{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.enableRealizationsForConst\"><span class=\"name\">Lean</span>.<span class=\"name\">enableRealizationsForConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Allows `realizeConst` calls for the given declaration in all derived environment branches.\nRealizations will run using the given environment and options to ensure deterministic results. Note\nthat while we check that the function isn't called before the declaration is actually added to the\nenvironment, we cannot automatically check that it isn't otherwise called too early in the sense\nthat helper declarations and environment extension state that may be relevant to realizations may\nnot have been added yet. We do check that we are not calling it from a different branch than `c` was\nadded on, which would be definitely too late. Thus, this function should generally be called in\nelaborators calling `addDecl` (when that declaration is a plausible target for realization) at the\nlatest possible point, i.e. at the very end of the elaborator or just before a first realization may\nbe triggered if any.\n","docLink":"./Lean/CoreM.html#Lean.enableRealizationsForConst","kind":"def","line":808,"name":"Lean.enableRealizationsForConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L808-L811"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.logMessageKind\"><span class=\"name\">Lean</span>.<span class=\"name\">logMessageKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the given message kind has not been reported in the message log,\nand then mark it as logged. Otherwise, returns `false`.\nWe use this API to ensure we don't log the same kind of warning multiple times.\n","docLink":"./Lean/CoreM.html#Lean.logMessageKind","kind":"def","line":796,"name":"Lean.logMessageKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L796-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mapCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">mapCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.mapCoreM","kind":"def","line":793,"name":"Lean.mapCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L793-L794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionStateRefT'\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadRuntimeExceptionStateRefT'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionStateRefT'","kind":"instance","line":790,"name":"Lean.instMonadRuntimeExceptionStateRefT'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L790-L791"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionReaderT\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadRuntimeExceptionReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionReaderT","kind":"instance","line":787,"name":"Lean.instMonadRuntimeExceptionReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L787-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadRuntimeExceptionCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instMonadRuntimeExceptionCoreM","kind":"instance","line":784,"name":"Lean.instMonadRuntimeExceptionCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L784-L785"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadRuntimeException.tryCatchRuntimeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadRuntimeException</span>.<span class=\"name\">tryCatchRuntimeEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadRuntimeException.tryCatchRuntimeEx","kind":"def","line":780,"name":"Lean.MonadRuntimeException.tryCatchRuntimeEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L780-L780"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadRuntimeException.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadRuntimeException</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryCatchRuntimeEx</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadRuntimeException.mk","kind":"ctor","line":779,"name":"Lean.MonadRuntimeException.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L779-L779"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadRuntimeException</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadRuntimeException","kind":"class","line":779,"name":"Lean.MonadRuntimeException","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L779-L780"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadExceptOfExceptionCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadExceptOfExceptionCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instMonadExceptOfExceptionCoreM","kind":"instance","line":775,"name":"Lean.instMonadExceptOfExceptionCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L775-L777"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.tryCatchRuntimeEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">tryCatchRuntimeEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A variant of `tryCatch` that also catches runtime exception (see also `tryCatch` documentation).\nLike `tryCatch`, this function does not catch interrupt exceptions, which are not considered runtime\nexceptions.\n","docLink":"./Lean/CoreM.html#Lean.Core.tryCatchRuntimeEx","kind":"def","line":762,"name":"Lean.Core.tryCatchRuntimeEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L762-L773"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.tryCatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Custom `try-catch` for all monads based on `CoreM`. We usually don't want to catch \"runtime\nexceptions\" these monads, but on `CommandElabM` or, in specific cases, using `tryCatchRuntimeEx`.\nSee issues #2775 and #2744 as well as `MonadAlwaysExcept`. Also, we never want to catch interrupt\nexceptions inside the elaborator.\n","docLink":"./Lean/CoreM.html#Lean.Core.tryCatch","kind":"def","line":747,"name":"Lean.Core.tryCatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L747-L760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Exception.isRuntime\"><span class=\"name\">Lean</span>.<span class=\"name\">Exception</span>.<span class=\"name\">isRuntime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if the exception was generated by one of our resource limits. ","docLink":"./Lean/CoreM.html#Lean.Exception.isRuntime","kind":"def","line":743,"name":"Lean.Exception.isRuntime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L743-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.ImportM.runCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span>.<span class=\"name\">runCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.ImportM.runCoreM","kind":"def","line":738,"name":"Lean.ImportM.runCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L738-L741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.isDiagnosticsEnabled\"><span class=\"name\">Lean</span>.<span class=\"name\">isDiagnosticsEnabled</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if diagnostic information collection is enabled. ","docLink":"./Lean/CoreM.html#Lean.isDiagnosticsEnabled","kind":"def","line":734,"name":"Lean.isDiagnosticsEnabled","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L734-L736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.getDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">getDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.getDiag","kind":"def","line":731,"name":"Lean.getDiag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L731-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compileDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">compileDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">logErrors</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.compileDecl","kind":"def","line":728,"name":"Lean.compileDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L728-L729"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compileDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">compileDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">logErrors</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.compileDecls","kind":"def","line":692,"name":"Lean.compileDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L692-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.compileDeclsImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">compileDeclsImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.compileDeclsImpl","kind":"opaque","line":688,"name":"Lean.compileDeclsImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L688-L689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.traceBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">traceBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"If `t` has not finished yet, waits for it under an `Elab.block` trace node. Returns `t`'s result.\n","docLink":"./Lean/CoreM.html#Lean.traceBlock","kind":"def","line":677,"name":"Lean.traceBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L677-L685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mkArrowN\"><span class=\"name\">Lean</span>.<span class=\"name\">mkArrowN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Iterated `mkArrow`, creates the expression `a₁ → a₂ → … → aₙ → b`. Also see `arrowDomainsN`. ","docLink":"./Lean/CoreM.html#Lean.mkArrowN","kind":"def","line":657,"name":"Lean.mkArrowN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L657-L658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mkArrow\"><span class=\"name\">Lean</span>.<span class=\"name\">mkArrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Creates the expression `d → b` ","docLink":"./Lean/CoreM.html#Lean.mkArrow","kind":"def","line":653,"name":"Lean.mkArrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L653-L655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Exception.isMaxHeartbeat\"><span class=\"name\">Lean</span>.<span class=\"name\">Exception</span>.<span class=\"name\">isMaxHeartbeat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return true if `ex` was generated by `throwMaxHeartbeat`.\nThis function is a bit hackish. The heartbeat exception should probably be an internal exception.\nWe used a similar hack at `Exception.isMaxRecDepth` ","docLink":"./Lean/CoreM.html#Lean.Exception.isMaxHeartbeat","kind":"def","line":646,"name":"Lean.Exception.isMaxHeartbeat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L646-L651"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.catchInternalIds\"><span class=\"name\">Lean</span>.<span class=\"name\">catchInternalIds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ids</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">InternalExceptionId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.catchInternalIds","kind":"def","line":639,"name":"Lean.catchInternalIds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L639-L644"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.catchInternalId\"><span class=\"name\">Lean</span>.<span class=\"name\">catchInternalId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">InternalExceptionId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.catchInternalId","kind":"def","line":632,"name":"Lean.catchInternalId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L632-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.withAtLeastMaxRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">withAtLeastMaxRecDepth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.withAtLeastMaxRecDepth","kind":"def","line":629,"name":"Lean.withAtLeastMaxRecDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L629-L630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.wrapAsyncAsSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">wrapAsyncAsSnapshot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <a href=\"./Init/Prelude.html#String\">String</a> := by exact decl_name%.toString)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a></span>)</span></span></div></div>","info":{"doc":"Wraps the given action for use in `BaseIO.asTask` etc., discarding its final state except for\n`logSnapshotTask` tasks, which are reported as part of the returned tree. The given cancellation\ntoken, if any, should be stored in a `SnapshotTask` for the server to trigger it when the result is\nno longer needed.\n","docLink":"./Lean/CoreM.html#Lean.Core.wrapAsyncAsSnapshot","kind":"def","line":590,"name":"Lean.Core.wrapAsyncAsSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L590-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.mkSnapshot?\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">mkSnapshot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">output</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">st</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <a href=\"./Init/Prelude.html#String\">String</a> := by exact decl_name%.toString)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>","info":{"doc":"Creates snapshot reporting given `withIsolatedStreams` output and diagnostics and traces from the\ngiven state.\n","docLink":"./Lean/CoreM.html#Lean.Core.mkSnapshot?","kind":"def","line":567,"name":"Lean.Core.mkSnapshot?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L567-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.stderrAsMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">stderrAsMessages</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Option for capturing output to stderr during elaboration. ","docLink":"./Lean/CoreM.html#Lean.Core.stderrAsMessages","kind":"opaque","line":560,"name":"Lean.Core.stderrAsMessages","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L560-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.wrapAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">wrapAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">β</span></span>)</span></span></div></div>","info":{"doc":"Wraps the given action for use in `EIO.asTask` etc., discarding its final monadic state. ","docLink":"./Lean/CoreM.html#Lean.Core.wrapAsync","kind":"def","line":543,"name":"Lean.Core.wrapAsync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L543-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.logSnapshotTask\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">logSnapshotTask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">task</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Includes a given task (such as from `wrapAsyncAsSnapshot`) in the overall snapshot tree for this\ncommand's elaboration, making its result available to reporting and the language server. The\nreporter will not know about this snapshot tree node until the main elaboration thread for this\ncommand has finished so this function is not useful for incremental reporting within a longer\nelaboration thread but only for tasks that outlive it such as background kernel checking or proof\nelaboration.\n","docLink":"./Lean/CoreM.html#Lean.Core.logSnapshotTask","kind":"def","line":532,"name":"Lean.Core.logSnapshotTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L532-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadLogCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadLogCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadLogCoreM","kind":"instance","line":516,"name":"Lean.Core.instMonadLogCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L516-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getAndEmptySnapshotTasks\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getAndEmptySnapshotTasks</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span>)</span></span></div></div>","info":{"doc":"Returns the current set of tasks added by `logSnapshotTask` and then resets it. When\nsaving/restoring state of an action that may have logged such tasks during incremental reuse, this\nfunction must be used to store them in the corresponding snapshot tree; otherwise, they will leak\noutside and may be cancelled by a later step, potentially leading to inconsistent state being\nreused.\n","docLink":"./Lean/CoreM.html#Lean.Core.getAndEmptySnapshotTasks","kind":"def","line":506,"name":"Lean.Core.getAndEmptySnapshotTasks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L506-L514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getAndEmptyMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getAndEmptyMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></span></div></div>","info":{"doc":"Returns the current log and then resets its messages while adjusting `MessageLog.hadErrors`. Used\nfor incremental reporting during elaboration of a single command.\n","docLink":"./Lean/CoreM.html#Lean.Core.getAndEmptyMessageLog","kind":"def","line":499,"name":"Lean.Core.getAndEmptyMessageLog","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L499-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.getMessageLog","kind":"def","line":496,"name":"Lean.Core.getMessageLog","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L496-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.resetMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">resetMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.resetMessageLog","kind":"def","line":493,"name":"Lean.Core.resetMessageLog","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L493-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.setMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">setMessageLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">messages</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.setMessageLog","kind":"def","line":490,"name":"Lean.Core.setMessageLog","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L490-L491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withCurrHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withCurrHeartbeats</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.withCurrHeartbeats","kind":"def","line":487,"name":"Lean.Core.withCurrHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L487-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkSystem\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkSystem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.checkSystem","kind":"def","line":478,"name":"Lean.Core.checkSystem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L478-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkMaxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeats","kind":"def","line":475,"name":"Lean.Core.checkMaxHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L475-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeatsCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkMaxHeartbeatsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optionName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.checkMaxHeartbeatsCore","kind":"def","line":469,"name":"Lean.Core.checkMaxHeartbeatsCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L469-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.throwMaxHeartbeat\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">throwMaxHeartbeat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleName </span><span class=\"fn\">optionName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.throwMaxHeartbeat","kind":"def","line":461,"name":"Lean.Core.throwMaxHeartbeat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L461-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.debug.moduleNameAtTimeout\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">debug</span>.<span class=\"name\">moduleNameAtTimeout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.debug.moduleNameAtTimeout","kind":"opaque","line":455,"name":"Lean.Core.debug.moduleNameAtTimeout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L455-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.checkInterrupted\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">checkInterrupted</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Throws an internal interrupt exception if cancellation has been requested. The exception is not\ncaught by `try catch` but is intended to be caught by `Command.withLoggingExceptions` at the top\nlevel of elaboration. In particular, we want to skip producing further incremental snapshots after\nthe exception has been thrown.\n ","docLink":"./Lean/CoreM.html#Lean.Core.checkInterrupted","kind":"def","line":444,"name":"Lean.Core.checkInterrupted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L444-L453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withIncRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withIncRecDepth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.withIncRecDepth","kind":"def","line":441,"name":"Lean.Core.withIncRecDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L441-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM.toIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span>.<span class=\"name\">toIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.CoreM.toIO","kind":"def","line":434,"name":"Lean.Core.CoreM.toIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L434-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.CoreM.run'","kind":"def","line":431,"name":"Lean.Core.CoreM.run'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L431-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.CoreM.run","kind":"def","line":428,"name":"Lean.Core.CoreM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L428-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.mkFreshUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">mkFreshUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Creates a name from `n` that is guaranteed to be unique.\nThis is intended to be used for creating inaccessible user names for free variables and constants.\n\nIt works by adding a fresh macro scope to `n`.\nApplying `Lean.Name.eraseMacroScopes` to the resulting name yields `n`.\n\nSee also `Lean.LocalContext.getUnusedName` (for creating a new accessible user name that is\nunused in the local context) and `Lean.Meta.mkFreshBinderNameForTactic` (for creating names\nthat are conditionally inaccessible, depending on the current value of the `tactic.hygiene` option).\n","docLink":"./Lean/CoreM.html#Lean.Core.mkFreshUserName","kind":"def","line":414,"name":"Lean.Core.mkFreshUserName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L414-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.restore\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">restore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Restore backtrackable parts of the state. ","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.restore","kind":"def","line":404,"name":"Lean.Core.SavedState.restore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L404-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withRestoreOrSaveFull\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withRestoreOrSaveFull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reusableResult?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a>)</span></div></div>","info":{"doc":"Incremental reuse primitive: if `reusableResult?` is `none`, runs `act` and returns its result\ntogether with the saved monadic state after `act` including the heartbeats used by it. If\n`reusableResult?` on the other hand is `some (a, state)`, restores full `state` including heartbeats\nused and returns `(a, state)`.\n\nThe intention is for steps that support incremental reuse to initially pass `none` as\n`reusableResult?` and store the result and state in a snapshot. In a further run, if reuse is\npossible, `reusableResult?` should be set to the previous result and state, ensuring that the state\nafter running `withRestoreOrSaveFull` is identical in both runs. Note however that necessarily this\nis only an approximation in the case of heartbeats as heartbeats used by `withRestoreOrSaveFull`\nitself after calling `act` as well as by reuse-handling code such as the one supplying\n`reusableResult?` are not accounted for.\n","docLink":"./Lean/CoreM.html#Lean.Core.withRestoreOrSaveFull","kind":"def","line":377,"name":"Lean.Core.withRestoreOrSaveFull","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L377-L402"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.saveState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">saveState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.saveState","kind":"def","line":373,"name":"Lean.Core.saveState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L373-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instNonemptySavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instNonemptySavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instNonemptySavedState","kind":"instance","line":371,"name":"Lean.Core.instNonemptySavedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L371-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.passedHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">passedHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of heartbeats passed inside `withRestoreOrSaveFull`, not used otherwise. ","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.passedHeartbeats","kind":"def","line":370,"name":"Lean.Core.SavedState.passedHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L370-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toState</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passedHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.mk","kind":"ctor","line":368,"name":"Lean.Core.SavedState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L368-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState.toState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">toState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.SavedState.toState","kind":"def","line":368,"name":"Lean.Core.SavedState.toState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L368-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.SavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">SavedState</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/CoreM.html#Lean.Core.State\">Lean.Core.State</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.SavedState","kind":"structure","line":368,"name":"Lean.Core.SavedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L368-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadTraceCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadTraceCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadTraceCoreM","kind":"instance","line":363,"name":"Lean.Core.instMonadTraceCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L363-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadLiftIOCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadLiftIOCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadLiftIOCoreM","kind":"instance","line":360,"name":"Lean.Core.instMonadLiftIOCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L360-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.liftIOCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">liftIOCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.liftIOCore","kind":"def","line":356,"name":"Lean.Core.liftIOCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L356-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instantiateValueLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instantiateValueLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instantiateValueLevelParams","kind":"def","line":346,"name":"Lean.Core.instantiateValueLevelParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L346-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instantiateTypeLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instantiateTypeLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instantiateTypeLevelParams","kind":"def","line":338,"name":"Lean.Core.instantiateTypeLevelParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L338-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.modifyInstLevelValueCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">modifyInstLevelValueCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a> → <a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.modifyInstLevelValueCache","kind":"def","line":335,"name":"Lean.Core.modifyInstLevelValueCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L335-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.modifyInstLevelTypeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">modifyInstLevelTypeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a> → <a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.modifyInstLevelTypeCache","kind":"def","line":332,"name":"Lean.Core.modifyInstLevelTypeCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L332-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.modifyCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">modifyCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a> → <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.modifyCache","kind":"def","line":328,"name":"Lean.Core.modifyCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L328-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadInfoTreeCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadInfoTreeCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">Elab.MonadInfoTree</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadInfoTreeCoreM","kind":"instance","line":324,"name":"Lean.Core.instMonadInfoTreeCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L324-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadQuotationCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadQuotationCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadQuotationCoreM","kind":"instance","line":319,"name":"Lean.Core.instMonadQuotationCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L319-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.withFreshMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">withFreshMacroScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.withFreshMacroScope","kind":"def","line":315,"name":"Lean.Core.withFreshMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L315-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadResolveNameCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadResolveNameCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">MonadResolveName</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadResolveNameCoreM","kind":"instance","line":311,"name":"Lean.Core.instMonadResolveNameCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L311-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadRecDepthCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadRecDepthCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadRecDepth\">MonadRecDepth</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadRecDepthCoreM","kind":"instance","line":306,"name":"Lean.Core.instMonadRecDepthCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L306-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadDeclNameGeneratorCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadDeclNameGeneratorCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadDeclNameGeneratorCoreM","kind":"instance","line":302,"name":"Lean.Core.instMonadDeclNameGeneratorCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L302-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadNameGeneratorCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadNameGeneratorCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadNameGeneratorCoreM","kind":"instance","line":298,"name":"Lean.Core.instMonadNameGeneratorCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L298-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instAddMessageContextCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instAddMessageContextCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instAddMessageContextCoreM","kind":"instance","line":295,"name":"Lean.Core.instAddMessageContextCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L295-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadWithOptionsCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadWithOptionsCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadWithOptions\">MonadWithOptions</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadWithOptionsCoreM","kind":"instance","line":275,"name":"Lean.Core.instMonadWithOptionsCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L275-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadOptionsCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadOptionsCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadOptionsCoreM","kind":"instance","line":272,"name":"Lean.Core.instMonadOptionsCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L272-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadEnvCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadEnvCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadEnvCoreM","kind":"instance","line":268,"name":"Lean.Core.instMonadEnvCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L268-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadRefCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadRefCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadRefCoreM","kind":"instance","line":264,"name":"Lean.Core.instMonadRefCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L264-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instInhabitedCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instInhabitedCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instInhabitedCoreM","kind":"instance","line":261,"name":"Lean.Core.instInhabitedCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L261-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instMonadCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instMonadCoreM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instMonadCoreM","kind":"instance","line":258,"name":"Lean.Core.instMonadCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L258-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.CoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">CoreM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"CoreM is a monad for manipulating the Lean environment.\nIt is the base monad for `MetaM`.\nThe main features it provides are:\n- name generator state\n- environment state\n- Lean options context\n- the current open namespace\n","docLink":"./Lean/CoreM.html#Lean.Core.CoreM","kind":"def","line":246,"name":"Lean.Core.CoreM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L246-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instNonemptyContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instNonemptyContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instNonemptyContext","kind":"instance","line":244,"name":"Lean.Core.instNonemptyContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L244-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.inheritedTraceOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">inheritedTraceOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Cache of `Lean.inheritedTraceOptions`. ","docLink":"./Lean/CoreM.html#Lean.Core.Context.inheritedTraceOptions","kind":"def","line":243,"name":"Lean.Core.Context.inheritedTraceOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.suppressElabErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">suppressElabErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If set (when `showPartialSyntaxErrors` is not set and parsing failed), suppresses most elaboration\nerrors; see also `logMessage` below.\n","docLink":"./Lean/CoreM.html#Lean.Core.Context.suppressElabErrors","kind":"def","line":241,"name":"Lean.Core.Context.suppressElabErrors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L241-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.cancelTk?\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">cancelTk?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span></div></div>","info":{"doc":"If set, used to cancel elaboration from outside when results are not needed anymore. ","docLink":"./Lean/CoreM.html#Lean.Core.Context.cancelTk?","kind":"def","line":236,"name":"Lean.Core.Context.cancelTk?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.diag\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">diag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `diag := true`, different parts of the system collect diagnostics.\nUse the `set_option diag true` to set it to true.\n","docLink":"./Lean/CoreM.html#Lean.Core.Context.diag","kind":"def","line":234,"name":"Lean.Core.Context.diag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L234-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.currMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">currMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.currMacroScope","kind":"def","line":229,"name":"Lean.Core.Context.currMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.quotContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">quotContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.quotContext","kind":"def","line":228,"name":"Lean.Core.Context.quotContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.maxHeartbeats","kind":"def","line":227,"name":"Lean.Core.Context.maxHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.initHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">initHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.initHeartbeats","kind":"def","line":226,"name":"Lean.Core.Context.initHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L226-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.openDecls","kind":"def","line":225,"name":"Lean.Core.Context.openDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.currNamespace","kind":"def","line":224,"name":"Lean.Core.Context.currNamespace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L224-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.ref","kind":"def","line":223,"name":"Lean.Core.Context.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.maxRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxRecDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.maxRecDepth","kind":"def","line":222,"name":"Lean.Core.Context.maxRecDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.currRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">currRecDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.currRecDepth","kind":"def","line":221,"name":"Lean.Core.Context.currRecDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.options\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.options","kind":"def","line":220,"name":"Lean.Core.Context.options","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L220-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.fileMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">fileMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a></div></div>","info":{"doc":"Auxiliary datastructure for converting `String.Pos` into Line/Column number. ","docLink":"./Lean/CoreM.html#Lean.Core.Context.fileMap","kind":"def","line":219,"name":"Lean.Core.Context.fileMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L219-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.fileName\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Name of the file being compiled. ","docLink":"./Lean/CoreM.html#Lean.Core.Context.fileName","kind":"def","line":217,"name":"Lean.Core.Context.fileName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileMap</span> : <a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">options</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currRecDepth </span><span class=\"fn\">maxRecDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initHeartbeats </span><span class=\"fn\">maxHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quotContext</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currMacroScope</span> : <a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diag</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suppressElabErrors</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inheritedTraceOptions</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Context.mk","kind":"ctor","line":215,"name":"Lean.Core.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L215-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Context for the CoreM monad. ","docLink":"./Lean/CoreM.html#Lean.Core.Context","kind":"structure","line":214,"name":"Lean.Core.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L214-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instNonemptyState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instNonemptyState","kind":"instance","line":212,"name":"Lean.Core.instNonemptyState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.snapshotTasks\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">snapshotTasks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>","info":{"doc":"Snapshot trees of asynchronous subtasks. As these are untyped and reported only at the end of the\ncommand's main elaboration thread, they are only useful for basic message log reporting; for\nincremental reporting and reuse within a long-running elaboration thread, types rooted in\n`CommandParsedSnapshot` need to be adjusted.\n","docLink":"./Lean/CoreM.html#Lean.Core.State.snapshotTasks","kind":"def","line":211,"name":"Lean.Core.State.snapshotTasks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L211-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.infoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">infoState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">Elab.InfoState</a></div></div>","info":{"doc":"Info tree. We have the info tree here because we want to update it while adding attributes. ","docLink":"./Lean/CoreM.html#Lean.Core.State.infoState","kind":"def","line":204,"name":"Lean.Core.State.infoState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.messages\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">messages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"Message log. ","docLink":"./Lean/CoreM.html#Lean.Core.State.messages","kind":"def","line":202,"name":"Lean.Core.State.messages","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a></div></div>","info":{"doc":"Cache for instantiating universe polymorphic declarations. ","docLink":"./Lean/CoreM.html#Lean.Core.State.cache","kind":"def","line":200,"name":"Lean.Core.State.cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.traceState\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">traceState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></div></div>","info":{"doc":"Trace messages ","docLink":"./Lean/CoreM.html#Lean.Core.State.traceState","kind":"def","line":198,"name":"Lean.Core.State.traceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.auxDeclNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">auxDeclNGen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"Name generator for creating persistent auxiliary declarations. Separate from `ngen` to keep\nnumbers smaller and create user-accessible names.\n","docLink":"./Lean/CoreM.html#Lean.Core.State.auxDeclNGen","kind":"def","line":196,"name":"Lean.Core.State.auxDeclNGen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"Name generator for producing unique `FVarId`s, `MVarId`s, and `LMVarId`s ","docLink":"./Lean/CoreM.html#Lean.Core.State.ngen","kind":"def","line":191,"name":"Lean.Core.State.ngen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.nextMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">nextMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a></div></div>","info":{"doc":"Next macro scope. We use macro scopes to avoid accidental name capture. ","docLink":"./Lean/CoreM.html#Lean.Core.State.nextMacroScope","kind":"def","line":189,"name":"Lean.Core.State.nextMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.env\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"Current environment. ","docLink":"./Lean/CoreM.html#Lean.Core.State.env","kind":"def","line":187,"name":"Lean.Core.State.env","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextMacroScope</span> : <a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDeclNGen</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceState</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">messages</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infoState</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">Elab.InfoState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snapshotTasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.State.mk","kind":"ctor","line":185,"name":"Lean.Core.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L185-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for the CoreM monad. ","docLink":"./Lean/CoreM.html#Lean.Core.State","kind":"structure","line":184,"name":"Lean.Core.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L184-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instInhabitedCache.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instInhabitedCache</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instInhabitedCache.default","kind":"def","line":182,"name":"Lean.Core.instInhabitedCache.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.instInhabitedCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">instInhabitedCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.instInhabitedCache","kind":"instance","line":182,"name":"Lean.Core.instInhabitedCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache.instLevelValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span>.<span class=\"name\">instLevelValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Cache.instLevelValue","kind":"def","line":181,"name":"Lean.Core.Cache.instLevelValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L181-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache.instLevelType\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span>.<span class=\"name\">instLevelType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Cache.instLevelType","kind":"def","line":180,"name":"Lean.Core.Cache.instLevelType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L180-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instLevelType </span><span class=\"fn\">instLevelValue</span> : <a href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\">InstantiateLevelCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Cache</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.Cache.mk","kind":"ctor","line":179,"name":"Lean.Core.Cache.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Cache for the `CoreM` monad ","docLink":"./Lean/CoreM.html#Lean.Core.Cache","kind":"structure","line":178,"name":"Lean.Core.Cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L178-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">InstantiateLevelCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.InstantiateLevelCache","kind":"def","line":176,"name":"Lean.Core.InstantiateLevelCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Core.getMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Core</span>.<span class=\"name\">getMaxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Core.getMaxHeartbeats","kind":"def","line":173,"name":"Lean.Core.getMaxHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L173-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.withDeclNameForAuxNaming\"><span class=\"name\">Lean</span>.<span class=\"name\">withDeclNameForAuxNaming</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Adjusts the `namePrefix` of `getDeclNGen` to the given name and resets the nested counter.\n","docLink":"./Lean/CoreM.html#Lean.withDeclNameForAuxNaming","kind":"def","line":153,"name":"Lean.withDeclNameForAuxNaming","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L153-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.mkAuxDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAuxDeclName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_aux</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Creates a new name for use as an auxiliary declaration that can be assumed to be globally unique.\n\nUniqueness is guaranteed for the current branch of elaboration. When entering parallelism and other\nbranching elaboration steps, `mkChild` must be used (automatically done in `wrapAsync*`).\n","docLink":"./Lean/CoreM.html#Lean.mkAuxDeclName","kind":"def","line":141,"name":"Lean.mkAuxDeclName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L141-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instMonadDeclNameGeneratorOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadDeclNameGeneratorOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instMonadDeclNameGeneratorOfMonadLift","kind":"instance","line":137,"name":"Lean.instMonadDeclNameGeneratorOfMonadLift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator.setDeclNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadDeclNameGenerator</span>.<span class=\"name\">setDeclNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadDeclNameGenerator.setDeclNGen","kind":"def","line":133,"name":"Lean.MonadDeclNameGenerator.setDeclNGen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator.getDeclNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadDeclNameGenerator</span>.<span class=\"name\">getDeclNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadDeclNameGenerator.getDeclNGen","kind":"def","line":132,"name":"Lean.MonadDeclNameGenerator.getDeclNGen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadDeclNameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getDeclNGen</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setDeclNGen</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadDeclNameGenerator.mk","kind":"ctor","line":131,"name":"Lean.MonadDeclNameGenerator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadDeclNameGenerator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.MonadDeclNameGenerator","kind":"class","line":131,"name":"Lean.MonadDeclNameGenerator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L131-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.mkChild\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">mkChild</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.mkChild","kind":"def","line":125,"name":"Lean.DeclNameGenerator.mkChild","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.mkUniqueName\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">mkUniqueName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«infix»</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"Creates a user-accessible unique name of the following structure:\n```\n<name prefix>.<infix>_<numeric components>_...\n```\nUniqueness is guaranteed for the current branch of elaboration. When entering parallelism and other\nbranching elaboration steps, `mkChild` must be used (automatically done in `wrapAsync*`).\n","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.mkUniqueName","kind":"def","line":92,"name":"Lean.DeclNameGenerator.mkUniqueName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L92-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.next\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.next","kind":"def","line":89,"name":"Lean.DeclNameGenerator.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L89-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.ofPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">ofPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.ofPrefix","kind":"def","line":83,"name":"Lean.DeclNameGenerator.ofPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instInhabitedDeclNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedDeclNameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instInhabitedDeclNameGenerator","kind":"instance","line":79,"name":"Lean.instInhabitedDeclNameGenerator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.instInhabitedDeclNameGenerator.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedDeclNameGenerator</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.instInhabitedDeclNameGenerator.default","kind":"def","line":79,"name":"Lean.instInhabitedDeclNameGenerator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.parentIdxs\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">parentIdxs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.parentIdxs","kind":"def","line":78,"name":"Lean.DeclNameGenerator.parentIdxs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.idx","kind":"def","line":77,"name":"Lean.DeclNameGenerator.idx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.namePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">namePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.namePrefix","kind":"def","line":74,"name":"Lean.DeclNameGenerator.namePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentIdxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator.mk","kind":"ctor","line":73,"name":"Lean.DeclNameGenerator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">DeclNameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Name generator that creates user-accessible names. ","docLink":"./Lean/CoreM.html#Lean.DeclNameGenerator","kind":"structure","line":72,"name":"Lean.DeclNameGenerator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L72-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.useDiagnosticMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">useDiagnosticMsg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"If the `diagnostics` option is not already set, gives a message explaining this option.\nBegins with a `\\n\\n`, so an error message can look like `m!\"some error occurred{useDiagnosticMsg}\"`.\nThe double newline gives better visual separation from the main error message\n","docLink":"./Lean/CoreM.html#Lean.useDiagnosticMsg","kind":"def","line":60,"name":"Lean.useDiagnosticMsg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L60-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.internal.cmdlineSnapshots\"><span class=\"name\">Lean</span>.<span class=\"name\">internal</span>.<span class=\"name\">cmdlineSnapshots</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Performance option used by cmdline driver. ","docLink":"./Lean/CoreM.html#Lean.internal.cmdlineSnapshots","kind":"opaque","line":53,"name":"Lean.internal.cmdlineSnapshots","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L53-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Elab.inServer\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">inServer</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Elab.inServer","kind":"opaque","line":46,"name":"Lean.Elab.inServer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L46-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.Elab.async\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">async</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.Elab.async","kind":"opaque","line":33,"name":"Lean.Elab.async","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L33-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.maxHeartbeats","kind":"opaque","line":28,"name":"Lean.maxHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L28-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.diagnostics.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">diagnostics</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.diagnostics.threshold","kind":"opaque","line":22,"name":"Lean.diagnostics.threshold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L22-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/CoreM.html#Lean.diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">diagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/CoreM.html#Lean.diagnostics","kind":"opaque","line":16,"name":"Lean.diagnostics","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/CoreM.lean#L16-L20"}}],"imports":["Lean.Util.RecDepth","Lean.ResolveName","Lean.Language.Basic"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedDeclNameGenerator","typeNames":["Lean.DeclNameGenerator"]},{"className":"Lean.MonadDeclNameGenerator","name":"Lean.instMonadDeclNameGeneratorOfMonadLift","typeNames":[]},{"className":"Inhabited","name":"Lean.Core.instInhabitedCache","typeNames":["Lean.Core.Cache"]},{"className":"Nonempty","name":"Lean.Core.instNonemptyState","typeNames":["Lean.Core.State"]},{"className":"Nonempty","name":"Lean.Core.instNonemptyContext","typeNames":["Lean.Core.Context"]},{"className":"Monad","name":"Lean.Core.instMonadCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Inhabited","name":"Lean.Core.instInhabitedCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadRef","name":"Lean.Core.instMonadRefCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadEnv","name":"Lean.Core.instMonadEnvCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadOptions","name":"Lean.Core.instMonadOptionsCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadWithOptions","name":"Lean.Core.instMonadWithOptionsCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.AddMessageContext","name":"Lean.Core.instAddMessageContextCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadNameGenerator","name":"Lean.Core.instMonadNameGeneratorCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadDeclNameGenerator","name":"Lean.Core.instMonadDeclNameGeneratorCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadRecDepth","name":"Lean.Core.instMonadRecDepthCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadResolveName","name":"Lean.Core.instMonadResolveNameCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadQuotation","name":"Lean.Core.instMonadQuotationCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.Elab.MonadInfoTree","name":"Lean.Core.instMonadInfoTreeCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"MonadLift","name":"Lean.Core.instMonadLiftIOCoreM","typeNames":["IO","Lean.Core.CoreM"]},{"className":"Lean.MonadTrace","name":"Lean.Core.instMonadTraceCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Nonempty","name":"Lean.Core.instNonemptySavedState","typeNames":["Lean.Core.SavedState"]},{"className":"Lean.MonadLog","name":"Lean.Core.instMonadLogCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"MonadExceptOf","name":"Lean.instMonadExceptOfExceptionCoreM","typeNames":["Lean.Exception","Lean.Core.CoreM"]},{"className":"Lean.MonadRuntimeException","name":"Lean.instMonadRuntimeExceptionCoreM","typeNames":["Lean.Core.CoreM"]},{"className":"Lean.MonadRuntimeException","name":"Lean.instMonadRuntimeExceptionReaderT","typeNames":["ReaderT"]},{"className":"Lean.MonadRuntimeException","name":"Lean.instMonadRuntimeExceptionStateRefT'","typeNames":["StateRefT'"]}],"name":"Lean.CoreM"}