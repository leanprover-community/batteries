{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.evalCase\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">close</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tags</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.binderIdent</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patts?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caseBody</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Batteries.Tactic.casePattTac</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Implementation for `case` and `case'`. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.evalCase","kind":"def","line":149,"name":"Batteries.Tactic.evalCase","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L149-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.processCasePattBody\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">processCasePattBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Batteries.Tactic.casePattTac</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> (<a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span>)</span></div></div>","info":{"doc":"Given a `casePattBody`, either give a synthetic hole or a tactic sequence\n(along with the syntax for the `=>`).\nConverts holes into synthetic holes since they are processed with `elabTermWithHoles`. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.processCasePattBody","kind":"def","line":138,"name":"Batteries.Tactic.processCasePattBody","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L138-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.findGoalOfPatt\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">findGoalOfPatt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patt?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">renameI</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.binderIdent</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> (<a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></div></div>","info":{"doc":"Find the first goal among those matching `tag` whose type unifies with `patt`.\nThe `renameI` array consists of names to use to rename inaccessibles.\nThe `patt` term is elaborated in the context where the inaccessibles have been renamed.\n\nReturns the found goal, goals caused by elaborating `patt`, and the remaining goals. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.findGoalOfPatt","kind":"def","line":99,"name":"Batteries.Tactic.findGoalOfPatt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L99-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.casePatt'\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">casePatt'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`case' _ : t => tac` is similar to the `case _ : t => tac` tactic,\nbut it does not ensure the goal has been solved after applying `tac`,\nnor does it admit the goal if `tac` failed.\nRecall that `case` closes the goal using `sorry` when `tac` fails,\nand the tactic execution is not interrupted. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.casePatt'","kind":"def","line":72,"name":"Batteries.Tactic.casePatt'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L72-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.casePatt\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">casePatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"* `case _ : t => tac` finds the first goal that unifies with `t` and then solves it\nusing `tac` or else fails. Like `show`, it changes the type of the goal to `t`.\nThe `_` can optionally be a case tag, in which case it only looks at goals\nwhose tag would be considered by `case` (goals with an exact tag match,\nfollowed by goals with the tag as a suffix, followed by goals with the tag as a prefix).\n\n* `case _ n₁ ... nₘ : t => tac` additionally names the `m` most recent hypotheses with\ninaccessible names to the given names. The names are renamed before matching against `t`.\nThe `_` can optionally be a case tag.\n\n* `case _ : t := e` is short for `case _ : t => exact e`.\n\n* `case _ : t₁ | _ : t₂ | ... => tac`\nis equivalent to `(case _ : t₁ => tac); (case _ : t₂ => tac); ...`\nbut with all matching done on the original list of goals --\neach goal is consumed as they are matched, so patterns may repeat or overlap.\n\n* `case _ : t` will make the matched goal be the first goal.\n`case _ : t₁ | _ : t₂ | ...` makes the matched goals be the first goals in the given order.\n\n* `case _ : t := _` and `case _ : t := ?m` are the same as `case _ : t` but in the `?m` case the\ngoal tag is changed to `m`.\nIn particular, the goal becomes metavariable `?m`.\n","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.casePatt","kind":"def","line":38,"name":"Batteries.Tactic.casePatt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L38-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattBody\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">casePattBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The body of a `case ... : ...` tactic. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattBody","kind":"def","line":35,"name":"Batteries.Tactic.casePattBody","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattExpr\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">casePattExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The body of a `case ... | ...` tactic that's an exact term. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattExpr","kind":"def","line":32,"name":"Batteries.Tactic.casePattExpr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattTac\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">casePattTac</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"The body of a `case ... | ...` tactic that's a tactic sequence (or hole). ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattTac","kind":"def","line":29,"name":"Batteries.Tactic.casePattTac","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattArg\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">casePattArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Clause for a `case ... : ...` tactic. ","docLink":"./Batteries/Tactic/Case.html#Batteries.Tactic.casePattArg","kind":"def","line":26,"name":"Batteries.Tactic.casePattArg","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Case.lean#L26-L27"}}],"imports":["Init","Lean.Elab.Tactic.BuiltinTactic","Lean.Elab.Tactic.RenameInaccessibles"],"instances":[],"name":"Batteries.Tactic.Case"}