{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Std.Iterators.Array.iter_equiv_iter_toList\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Array</span>.<span class=\"name\">iter_equiv_iter_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.Iter.Equiv\">Equiv</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Std/Data/Iterators/Producers/List.html#List.iter\">iter</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Std.Iterators.Array.iter_equiv_iter_toList","kind":"theorem","line":100,"name":"Std.Iterators.Array.iter_equiv_iter_toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L100-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Std.Iterators.Array.iterFromIdx_equiv_iter_drop_toList\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Array</span>.<span class=\"name\">iterFromIdx_equiv_iter_drop_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.Iter.Equiv\">Equiv</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>)</span>.<a href=\"./Std/Data/Iterators/Producers/List.html#List.iter\">iter</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Std.Iterators.Array.iterFromIdx_equiv_iter_drop_toList","kind":"theorem","line":95,"name":"Std.Iterators.Array.iterFromIdx_equiv_iter_drop_toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L95-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_toIter\"><span class=\"name\">Array</span>.<span class=\"name\">toListRev_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Data/Array/Lemmas.html#Array.toListRev\">toListRev</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_toIter","kind":"theorem","line":88,"name":"Array.toListRev_toIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L88-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">toListRev_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toListRev_iterFromIdx","kind":"theorem","line":83,"name":"Array.toListRev_iterFromIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L83-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_toIter\"><span class=\"name\">Array</span>.<span class=\"name\">toArray_toIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">array</span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_toIter","kind":"theorem","line":78,"name":"Array.toArray_toIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L78-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">toArray_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.extract\">extract</a></span> <span class=\"fn\">pos</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toArray_iterFromIdx","kind":"theorem","line":73,"name":"Array.toArray_iterFromIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L73-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iter\"><span class=\"name\">Array</span>.<span class=\"name\">toList_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iter","kind":"theorem","line":68,"name":"Array.toList_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">toList_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.toList_iterFromIdx","kind":"theorem","line":61,"name":"Array.toList_iterFromIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L61-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iter\"><span class=\"name\">Array</span>.<span class=\"name\">step_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if h : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">Std.Iterators.PlausibleIterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">1</span>)</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <span class=\"fn\">⋯</span></span>\n  else <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">Std.Iterators.PlausibleIterStep.done</a> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iter","kind":"theorem","line":51,"name":"Array.step_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L51-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">step_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if h : <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">Std.Iterators.PlausibleIterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> (<span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">pos</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <span class=\"fn\">⋯</span></span>\n  else <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">Std.Iterators.PlausibleIterStep.done</a> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.step_iterFromIdx","kind":"theorem","line":39,"name":"Array.step_iterFromIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L39-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iterFromIdx_eq_toIter_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">iterFromIdx_eq_toIter_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">pos</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iterFromIdx_eq_toIter_iterFromIdxM","kind":"theorem","line":35,"name":"Array.iterFromIdx_eq_toIter_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_iterFromIdx\"><span class=\"name\">Array</span>.<span class=\"name\">iter_eq_iterFromIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iterFromIdx\">iterFromIdx</a></span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_iterFromIdx","kind":"theorem","line":31,"name":"Array.iter_eq_iterFromIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L31-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_toIter_iterM\"><span class=\"name\">Array</span>.<span class=\"name\">iter_eq_toIter_iterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Array.html#Array.iter\">iter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">toIter</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Array.html#Array.iter_eq_toIter_iterM","kind":"theorem","line":27,"name":"Array.iter_eq_toIter_iterM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Array.lean#L27-L29"}}],"imports":["Std.Data.Iterators.Lemmas.Consumers.Collect","Std.Data.Iterators.Producers.Array","Std.Data.Iterators.Producers.List","Std.Data.Iterators.Lemmas.Producers.Monadic.Array"],"instances":[],"name":"Std.Data.Iterators.Lemmas.Producers.Array"}