{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.acExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">acExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.acExt","kind":"opaque","line":130,"name":"Lean.Meta.Grind.AC.acExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedState","kind":"instance","line":128,"name":"Lean.Meta.Grind.AC.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedState.default","kind":"def","line":128,"name":"Lean.Meta.Grind.AC.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.steps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">State</span>.<span class=\"name\">steps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.steps","kind":"def","line":127,"name":"Lean.Meta.Grind.AC.State.steps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.exprToOpIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">State</span>.<span class=\"name\">exprToOpIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Mapping from expressions/terms to their structure ids.\nRecall that term may be the argument of different operators. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.exprToOpIds","kind":"def","line":126,"name":"Lean.Meta.Grind.AC.State.exprToOpIds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.opIdOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">State</span>.<span class=\"name\">opIdOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Mapping from operators to its \"operator id\". We cache failures using `none`.\n`opIdOf[op]` is `some id`, then `id < structs.size`. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.opIdOf","kind":"def","line":122,"name":"Lean.Meta.Grind.AC.State.opIdOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.structs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">State</span>.<span class=\"name\">structs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a></span></div></div>","info":{"doc":"Structures/operators detected.\nWe expect to find a small number of associative operators in a given goal. Thus, using `Array` is fine here.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.structs","kind":"def","line":118,"name":"Lean.Meta.Grind.AC.State.structs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opIdOf</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprToOpIds</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State.mk","kind":"ctor","line":113,"name":"Lean.Meta.Grind.AC.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for all associative operators detected by `grind`. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.State","kind":"structure","line":112,"name":"Lean.Meta.Grind.AC.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L112-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedStruct","kind":"instance","line":110,"name":"Lean.Meta.Grind.AC.instInhabitedStruct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedStruct.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedStruct</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedStruct.default","kind":"def","line":110,"name":"Lean.Meta.Grind.AC.instInhabitedStruct.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.recheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">recheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `recheck` is `true`, then new equalities have been added to the basis since we checked\ndisequalities and implied equalities.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.recheck","kind":"def","line":109,"name":"Lean.Meta.Grind.AC.Struct.recheck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.diseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">diseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a></span></div></div>","info":{"doc":"Disequalities. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.diseqs","kind":"def","line":104,"name":"Lean.Meta.Grind.AC.Struct.diseqs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.basis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">basis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"Processed equations. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.basis","kind":"def","line":102,"name":"Lean.Meta.Grind.AC.Struct.basis","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.queue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">queue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Queue\">Queue</a></div></div>","info":{"doc":"Equations to process. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.queue","kind":"def","line":100,"name":"Lean.Meta.Grind.AC.Struct.queue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.denoteEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">denoteEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a>)</span></div></div>","info":{"doc":"`denoteEntries` is `denote` as a `PArray` for deterministic traversal. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.denoteEntries","kind":"def","line":98,"name":"Lean.Meta.Grind.AC.Struct.denoteEntries","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a></span></div></div>","info":{"doc":"Mapping from Lean expressions to their representations as `AC.Expr` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.denote","kind":"def","line":96,"name":"Lean.Meta.Grind.AC.Struct.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.varMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">varMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Grind.AC.Var</a></span></div></div>","info":{"doc":"Mapping from `Expr` to a variable representing it. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.varMap","kind":"def","line":94,"name":"Lean.Meta.Grind.AC.Struct.varMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Mapping from variables to their denotations.\nRemark each variable can be in only one ring.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.vars","kind":"def","line":92,"name":"Lean.Meta.Grind.AC.Struct.vars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.nextId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">nextId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Next unique id for `EqCnstr`s. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.nextId","kind":"def","line":87,"name":"Lean.Meta.Grind.AC.Struct.nextId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.neutralInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">neutralInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.neutralInst?","kind":"def","line":85,"name":"Lean.Meta.Grind.AC.Struct.neutralInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.commInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">commInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.commInst?","kind":"def","line":84,"name":"Lean.Meta.Grind.AC.Struct.commInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.idempotentInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">idempotentInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.idempotentInst?","kind":"def","line":83,"name":"Lean.Meta.Grind.AC.Struct.idempotentInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.assocInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">assocInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.assocInst","kind":"def","line":82,"name":"Lean.Meta.Grind.AC.Struct.assocInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.neutral?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">neutral?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.neutral?","kind":"def","line":81,"name":"Lean.Meta.Grind.AC.Struct.neutral?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.op","kind":"def","line":80,"name":"Lean.Meta.Grind.AC.Struct.op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.u\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">u</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a></div></div>","info":{"doc":"Cached `getLevel type` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.u","kind":"def","line":79,"name":"Lean.Meta.Grind.AC.Struct.u","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.type","kind":"def","line":77,"name":"Lean.Meta.Grind.AC.Struct.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.id","kind":"def","line":76,"name":"Lean.Meta.Grind.AC.Struct.id","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assocInst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idempotentInst? </span><span class=\"fn\">commInst? </span><span class=\"fn\">neutralInst?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Grind.AC.Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">denote</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">denoteEntries</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">queue</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Queue\">Queue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">basis</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diseqs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recheck</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\">Struct</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct.mk","kind":"ctor","line":75,"name":"Lean.Meta.Grind.AC.Struct.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Struct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Struct","kind":"structure","line":75,"name":"Lean.Meta.Grind.AC.Struct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L75-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">simp_middle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_middle","kind":"ctor","line":72,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.simp_middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">simp_prefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_prefix","kind":"ctor","line":71,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.simp_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">simp_suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_suffix","kind":"ctor","line":70,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.simp_suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">simp_ac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_ac","kind":"ctor","line":69,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.simp_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">simp_exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.simp_exact","kind":"ctor","line":68,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.simp_exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">erase0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.erase0","kind":"ctor","line":67,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.erase_dup\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">erase_dup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.erase_dup","kind":"ctor","line":66,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.erase_dup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ea </span><span class=\"fn\">eb</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof.core","kind":"ctor","line":65,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof.core","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof","kind":"inductive","line":64,"name":"Lean.Meta.Grind.AC.DiseqCnstrProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L64-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.h","kind":"def","line":62,"name":"Lean.Meta.Grind.AC.DiseqCnstr.h","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.rhs","kind":"def","line":61,"name":"Lean.Meta.Grind.AC.DiseqCnstr.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.lhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.lhs","kind":"def","line":60,"name":"Lean.Meta.Grind.AC.DiseqCnstr.lhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstrProof\">DiseqCnstrProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\">DiseqCnstr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr.mk","kind":"ctor","line":59,"name":"Lean.Meta.Grind.AC.DiseqCnstr.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">DiseqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.DiseqCnstr","kind":"structure","line":59,"name":"Lean.Meta.Grind.AC.DiseqCnstr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L59-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Queue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Queue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.Queue","kind":"def","line":56,"name":"Lean.Meta.Grind.AC.Queue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.compare\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">compare</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.compare","kind":"def","line":52,"name":"Lean.Meta.Grind.AC.EqCnstr.compare","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedEqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedEqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedEqCnstr","kind":"instance","line":49,"name":"Lean.Meta.Grind.AC.instInhabitedEqCnstr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedEqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedEqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instInhabitedEqCnstrProof","kind":"instance","line":46,"name":"Lean.Meta.Grind.AC.instInhabitedEqCnstrProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase0_rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">erase0_rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase0_rhs","kind":"ctor","line":43,"name":"Lean.Meta.Grind.AC.EqCnstrProof.erase0_rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase_dup_rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">erase_dup_rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase_dup_rhs","kind":"ctor","line":42,"name":"Lean.Meta.Grind.AC.EqCnstrProof.erase_dup_rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.refl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.refl","kind":"ctor","line":41,"name":"Lean.Meta.Grind.AC.EqCnstrProof.refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_tail_idempotent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">superpose_tail_idempotent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Grind.AC.Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_tail_idempotent","kind":"ctor","line":39,"name":"Lean.Meta.Grind.AC.EqCnstrProof.superpose_tail_idempotent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_head_idempotent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">superpose_head_idempotent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Grind.AC.Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_head_idempotent","kind":"ctor","line":38,"name":"Lean.Meta.Grind.AC.EqCnstrProof.superpose_head_idempotent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_ac_idempotent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">superpose_ac_idempotent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Grind.AC.Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_ac_idempotent","kind":"ctor","line":37,"name":"Lean.Meta.Grind.AC.EqCnstrProof.superpose_ac_idempotent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">superpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">s </span><span class=\"fn\">c</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose","kind":"ctor","line":36,"name":"Lean.Meta.Grind.AC.EqCnstrProof.superpose","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">superpose_ac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r₁ </span><span class=\"fn\">c </span><span class=\"fn\">r₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.superpose_ac","kind":"ctor","line":35,"name":"Lean.Meta.Grind.AC.EqCnstrProof.superpose_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">simp_middle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_middle","kind":"ctor","line":34,"name":"Lean.Meta.Grind.AC.EqCnstrProof.simp_middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">simp_prefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_prefix","kind":"ctor","line":33,"name":"Lean.Meta.Grind.AC.EqCnstrProof.simp_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">simp_suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_suffix","kind":"ctor","line":32,"name":"Lean.Meta.Grind.AC.EqCnstrProof.simp_suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">simp_ac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_ac","kind":"ctor","line":31,"name":"Lean.Meta.Grind.AC.EqCnstrProof.simp_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">simp_exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.simp_exact","kind":"ctor","line":30,"name":"Lean.Meta.Grind.AC.EqCnstrProof.simp_exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.swap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">swap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.swap","kind":"ctor","line":29,"name":"Lean.Meta.Grind.AC.EqCnstrProof.swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">erase0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase0","kind":"ctor","line":28,"name":"Lean.Meta.Grind.AC.EqCnstrProof.erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase_dup\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">erase_dup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.erase_dup","kind":"ctor","line":27,"name":"Lean.Meta.Grind.AC.EqCnstrProof.erase_dup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ea </span><span class=\"fn\">eb</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof.core","kind":"ctor","line":26,"name":"Lean.Meta.Grind.AC.EqCnstrProof.core","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof","kind":"inductive","line":25,"name":"Lean.Meta.Grind.AC.EqCnstrProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L25-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.id","kind":"def","line":23,"name":"Lean.Meta.Grind.AC.EqCnstr.id","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.h","kind":"def","line":22,"name":"Lean.Meta.Grind.AC.EqCnstr.h","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.rhs","kind":"def","line":21,"name":"Lean.Meta.Grind.AC.EqCnstr.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.lhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.lhs","kind":"def","line":20,"name":"Lean.Meta.Grind.AC.EqCnstr.lhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstrProof\">EqCnstrProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\">EqCnstr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr.mk","kind":"ctor","line":19,"name":"Lean.Meta.Grind.AC.EqCnstr.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">EqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.EqCnstr","kind":"structure","line":19,"name":"Lean.Meta.Grind.AC.EqCnstr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L19-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableExpr_lean.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instHashableExpr_lean</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableExpr_lean.hash","kind":"def","line":16,"name":"Lean.Meta.Grind.AC.instHashableExpr_lean.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableExpr_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instHashableExpr_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Grind.AC.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableExpr_lean","kind":"instance","line":16,"name":"Lean.Meta.Grind.AC.instHashableExpr_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instHashableSeq_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableSeq_lean","kind":"instance","line":16,"name":"Lean.Meta.Grind.AC.instHashableSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableSeq_lean.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instHashableSeq_lean</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Grind.AC.Seq</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Types.html#Lean.Meta.Grind.AC.instHashableSeq_lean.hash","kind":"def","line":16,"name":"Lean.Meta.Grind.AC.instHashableSeq_lean.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Types.lean#L16-L16"}}],"imports":["Init.Grind.AC","Std.Data.HashMap","Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.AC.Seq"],"instances":[{"className":"Hashable","name":"Lean.Meta.Grind.AC.instHashableSeq_lean","typeNames":["Lean.Grind.AC.Seq"]},{"className":"Hashable","name":"Lean.Meta.Grind.AC.instHashableExpr_lean","typeNames":["Lean.Grind.AC.Expr"]},{"className":"Inhabited","name":"Lean.Meta.Grind.AC.instInhabitedEqCnstrProof","typeNames":["Lean.Meta.Grind.AC.EqCnstrProof"]},{"className":"Inhabited","name":"Lean.Meta.Grind.AC.instInhabitedEqCnstr","typeNames":["Lean.Meta.Grind.AC.EqCnstr"]},{"className":"Inhabited","name":"Lean.Meta.Grind.AC.instInhabitedStruct","typeNames":["Lean.Meta.Grind.AC.Struct"]},{"className":"Inhabited","name":"Lean.Meta.Grind.AC.instInhabitedState","typeNames":["Lean.Meta.Grind.AC.State"]}],"name":"Lean.Meta.Tactic.Grind.AC.Types"}