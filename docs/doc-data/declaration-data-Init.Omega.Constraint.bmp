{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bmod_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_div_term\">bmod_div_term</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">Constraint.exact</a> <span class=\"fn\">r</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">Constraint.exact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">m</span>)</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs\">bmod_coeffs</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.bmod_sat","kind":"theorem","line":378,"name":"Lean.Omega.bmod_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L378-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bmod_coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"The coefficients of the new equation generated when solving a hard equality. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs","kind":"def","line":374,"name":"Lean.Omega.bmod_coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L374-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_div_term\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bmod_div_term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The value of the new variable introduced when solving a hard equality. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.bmod_div_term","kind":"def","line":371,"name":"Lean.Omega.bmod_div_term","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L371-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.combo_sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">combo_sat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wx</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wy</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">y</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\">Constraint.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.combo\">Coeffs.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.combo_sat'","kind":"theorem","line":363,"name":"Lean.Omega.combo_sat'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L363-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidy_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidy_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint\">tidyConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs\">tidyCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidy_sat","kind":"theorem","line":353,"name":"Lean.Omega.tidy_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L353-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidyCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"Shorthand for the second component of `tidy`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs","kind":"def","line":350,"name":"Lean.Omega.tidyCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L350-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidyConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Shorthand for the first component of `tidy`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint","kind":"def","line":348,"name":"Lean.Omega.tidyConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidy\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"`positivize` and `normalize` ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidy","kind":"def","line":344,"name":"Lean.Omega.tidy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L344-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidy?\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidy?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span></div></div>","info":{"doc":"`positivize` and `normalize`, returning `none` if neither does anything. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidy?","kind":"def","line":335,"name":"Lean.Omega.tidy?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L335-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint\">positivizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs\">positivizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize_sat","kind":"theorem","line":326,"name":"Lean.Omega.positivize_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L326-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize?_eq_some\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x'</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize?\">positivize?</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint\">positivizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs\">positivizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize?_eq_some","kind":"theorem","line":322,"name":"Lean.Omega.positivize?_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L322-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivizeCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"Shorthand for the second component of `positivize`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs","kind":"def","line":318,"name":"Lean.Omega.positivizeCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L318-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivizeConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Shorthand for the first component of `positivize`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint","kind":"def","line":315,"name":"Lean.Omega.positivizeConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L315-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"Multiply by `-1` if the leading coefficient is negative, otherwise do nothing. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize","kind":"def","line":311,"name":"Lean.Omega.positivize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L311-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize?\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span></div></div>","info":{"doc":"Multiply by `-1` if the leading coefficient is negative, otherwise return `none`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize?","kind":"def","line":303,"name":"Lean.Omega.positivize?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L303-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint\">normalizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs\">normalizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize_sat","kind":"theorem","line":289,"name":"Lean.Omega.normalize_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L289-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize?_eq_some\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x'</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize?\">normalize?</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint\">normalizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs\">normalizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize?_eq_some","kind":"theorem","line":285,"name":"Lean.Omega.normalize?_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L285-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalizeCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"Shorthand for the second component of `normalize`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs","kind":"def","line":281,"name":"Lean.Omega.normalizeCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L281-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalizeConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Shorthand for the first component of `normalize`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint","kind":"def","line":277,"name":"Lean.Omega.normalizeConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L277-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"Normalize a constraint, by dividing through by the GCD. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize","kind":"def","line":273,"name":"Lean.Omega.normalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L273-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize?\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span></div></div>","info":{"doc":"Normalize a constraint, by dividing through by the GCD.\n\nReturn `none` if there is nothing to do, to avoid adding unnecessary steps to the proof term.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize?","kind":"def","line":255,"name":"Lean.Omega.normalize?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L255-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addEquality_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">addEquality_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.dot\">dot</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">{</a> <span class=\"fn\">lowerBound</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">c</span>)</span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">c</span>)</span> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">}</a>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addEquality_sat","kind":"theorem","line":247,"name":"Lean.Omega.Constraint.addEquality_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L247-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addInequality_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">addInequality_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.dot\">dot</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">{</a> <span class=\"fn\">lowerBound</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">c</span>)</span>, <span class=\"fn\">upperBound</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">}</a>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addInequality_sat","kind":"theorem","line":241,"name":"Lean.Omega.Constraint.addInequality_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L241-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat'_of_isImpossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">not_sat'_of_isImpossible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible\">isImpossible</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat'_of_isImpossible","kind":"theorem","line":238,"name":"Lean.Omega.Constraint.not_sat'_of_isImpossible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L238-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">div_sat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.gcd\">gcd</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.dot\">dot</a></span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div\">div</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.gcd\">gcd</a></span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.sdiv\">sdiv</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.gcd\">gcd</a></span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat'","kind":"theorem","line":232,"name":"Lean.Omega.Constraint.div_sat'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L232-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combine_sat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\">combine</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat'","kind":"theorem","line":229,"name":"Lean.Omega.Constraint.combine_sat'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L229-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">sat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"It is convenient below to say that a constraint is satisfied at the dot product of two vectors,\nso we make an abbreviation `sat'` for this.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'","kind":"def","line":223,"name":"Lean.Omega.Constraint.sat'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L223-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">div_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\">k</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div\">div</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat","kind":"theorem","line":201,"name":"Lean.Omega.Constraint.div_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L201-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Dividing a constraint by a natural number, and tightened to integer bounds.\nThus the lower bound is rounded up, and the upper bound is rounded down.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div","kind":"def","line":193,"name":"Lean.Omega.Constraint.div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L193-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combine_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\">combine</a></span> <span class=\"fn\">c'</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c'</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat","kind":"theorem","line":182,"name":"Lean.Omega.Constraint.combine_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L182-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"The conjunction of two constraints. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine","kind":"def","line":177,"name":"Lean.Omega.Constraint.combine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L177-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combo_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\">combo</a> <span class=\"fn\">a</span> <span class=\"fn\">c₁</span> <span class=\"fn\">b</span> <span class=\"fn\">c₂</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo_sat","kind":"theorem","line":173,"name":"Lean.Omega.Constraint.combo_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L173-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"A linear combination of two constraints. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo","kind":"def","line":169,"name":"Lean.Omega.Constraint.combo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L169-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">add_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add\">add</a></span> <span class=\"fn\">c₂</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add_sat","kind":"theorem","line":156,"name":"Lean.Omega.Constraint.add_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L156-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"The sum of two constraints. `[a, b] + [c, d] = [a + c, b + d]`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add","kind":"def","line":151,"name":"Lean.Omega.Constraint.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L151-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">scale_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale\">scale</a> <span class=\"fn\">k</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">t</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale_sat","kind":"theorem","line":131,"name":"Lean.Omega.Constraint.scale_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L131-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">scale</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Scale a constraint by multiplying by an integer.\n* If `k = 0` this is either impossible, if the original constraint was impossible,\n  or the `= 0` exact constraint.\n* If `k` is positive this takes `[x, y]` to `[k * x, k * y]`\n* If `k` is negative this takes `[x, y]` to `[k * y, k * x]`.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale","kind":"def","line":116,"name":"Lean.Omega.Constraint.scale","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L116-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat_of_isImpossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">not_sat_of_isImpossible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible\">isImpossible</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat_of_isImpossible","kind":"theorem","line":112,"name":"Lean.Omega.Constraint.not_sat_of_isImpossible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L112-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">isExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check if a constraint requires an exact value. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isExact","kind":"def","line":107,"name":"Lean.Omega.Constraint.isExact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L107-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">isImpossible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check if a constraint is unsatisfiable. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible","kind":"def","line":102,"name":"Lean.Omega.Constraint.isImpossible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L102-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">exact_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r </span><span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">exact</a> <span class=\"fn\">r</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact_sat","kind":"theorem","line":98,"name":"Lean.Omega.Constraint.exact_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial_say\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">trivial_say</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial\">trivial</a>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial_say","kind":"theorem","line":95,"name":"Lean.Omega.Constraint.trivial_say","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L95-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"An exact constraint. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact","kind":"def","line":92,"name":"Lean.Omega.Constraint.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L92-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.impossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">impossible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"The impossible constraint, unsatisfiable. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.impossible","kind":"def","line":90,"name":"Lean.Omega.Constraint.impossible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L90-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">trivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"The trivial constraint, satisfied everywhere. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial","kind":"def","line":88,"name":"Lean.Omega.Constraint.trivial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L88-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">neg_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg\">neg</a></span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">v</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg_sat","kind":"theorem","line":85,"name":"Lean.Omega.Constraint.neg_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Negate a constraint. `[x, y]` becomes `[-y, -x]`.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg","kind":"def","line":80,"name":"Lean.Omega.Constraint.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L80-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.flip\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">flip</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Flip a constraint.\nThis operation is not useful by itself, but is used to implement `neg` and `scale`.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.flip","kind":"def","line":72,"name":"Lean.Omega.Constraint.flip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L72-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">translate_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate\">translate</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">t</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate_sat","kind":"theorem","line":69,"name":"Lean.Omega.Constraint.translate_sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">translate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Translate a constraint. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate","kind":"def","line":66,"name":"Lean.Omega.Constraint.translate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L66-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"Apply a function to both the lower bound and upper bound. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.map","kind":"def","line":61,"name":"Lean.Omega.Constraint.map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L61-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"A constraint is satisfied at `t` is both the lower bound and upper bound are satisfied. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat","kind":"def","line":58,"name":"Lean.Omega.Constraint.sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.instToString","kind":"instance","line":50,"name":"Lean.Omega.Constraint.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L50-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instReprConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instReprConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instReprConstraint","kind":"instance","line":43,"name":"Lean.Omega.instReprConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instReprConstraint.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instReprConstraint</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instReprConstraint.repr","kind":"def","line":43,"name":"Lean.Omega.instReprConstraint.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instDecidableEqConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instDecidableEqConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instDecidableEqConstraint","kind":"instance","line":43,"name":"Lean.Omega.instDecidableEqConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instDecidableEqConstraint.decEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instDecidableEqConstraint</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instDecidableEqConstraint.decEq","kind":"def","line":43,"name":"Lean.Omega.instDecidableEqConstraint.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instBEqConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instBEqConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instBEqConstraint","kind":"instance","line":43,"name":"Lean.Omega.instBEqConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instBEqConstraint.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instBEqConstraint</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instBEqConstraint.beq","kind":"def","line":43,"name":"Lean.Omega.instBEqConstraint.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.upperBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">upperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\">UpperBound</a></div></div>","info":{"doc":"An upper bound. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.upperBound","kind":"def","line":42,"name":"Lean.Omega.Constraint.upperBound","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.lowerBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">lowerBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\">LowerBound</a></div></div>","info":{"doc":"A lower bound. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.lowerBound","kind":"def","line":40,"name":"Lean.Omega.Constraint.lowerBound","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowerBound</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\">LowerBound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upperBound</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\">UpperBound</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk","kind":"ctor","line":38,"name":"Lean.Omega.Constraint.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Constraint` consists of an optional lower and upper bound (inclusive),\nconstraining a value to a set of the form `∅`, `{x}`, `[x, y]`, `[x, ∞)`, `(-∞, y]`, or `(-∞, ∞)`.\n","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint","kind":"structure","line":34,"name":"Lean.Omega.Constraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L34-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">UpperBound</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\">UpperBound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"A upper bound at `y` is satisfied at `t` if `t ≤ y`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.UpperBound.sat","kind":"def","line":31,"name":"Lean.Omega.UpperBound.sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LowerBound</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\">LowerBound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"A lower bound at `x` is satisfied at `t` if `x ≤ t`. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.LowerBound.sat","kind":"def","line":29,"name":"Lean.Omega.LowerBound.sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">UpperBound</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An optional upper bound on a integer. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.UpperBound","kind":"def","line":26,"name":"Lean.Omega.UpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LowerBound</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An optional lower bound on a integer. ","docLink":"./Init/Omega/Constraint.html#Lean.Omega.LowerBound","kind":"def","line":24,"name":"Lean.Omega.LowerBound","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/Constraint.lean#L24-L25"}}],"imports":["Init.Omega.LinearCombo","Init.Omega.Int"],"instances":[{"className":"BEq","name":"Lean.Omega.instBEqConstraint","typeNames":["Lean.Omega.Constraint"]},{"className":"Decidable","name":"Lean.Omega.instDecidableEqConstraint","typeNames":["Eq"]},{"className":"Repr","name":"Lean.Omega.instReprConstraint","typeNames":["Lean.Omega.Constraint"]},{"className":"ToString","name":"Lean.Omega.Constraint.instToString","typeNames":["Lean.Omega.Constraint"]}],"name":"Init.Omega.Constraint"}