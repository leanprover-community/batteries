{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LetToHave.html#Lean.Meta.letToHave\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">letToHave</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Transforms nondependent `let` expressions into `have` expressions.\nIf `e` is not type correct, returns `e`.\nThe `Meta.letToHave` trace class logs errors and messages.\n","docLink":"./Lean/Meta/LetToHave.html#Lean.Meta.letToHave","kind":"def","line":433,"name":"Lean.Meta.letToHave","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LetToHave.lean#L433-L441"}}],"imports":["Lean.Meta.Check","Lean.ReservedNameAction","Lean.AddDecl","Lean.Meta.Transform","Lean.Util.CollectFVars","Lean.Util.CollectMVars"],"instances":[],"name":"Lean.Meta.LetToHave"}