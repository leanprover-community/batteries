{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.instInhabitedArgsPacker.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedArgsPacker</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.instInhabitedArgsPacker.default","kind":"def","line":35,"name":"Lean.Meta.instInhabitedArgsPacker.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.instInhabitedArgsPacker\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedArgsPacker</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.instInhabitedArgsPacker","kind":"instance","line":35,"name":"Lean.Meta.instInhabitedArgsPacker","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.varNamess\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">varNamess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Variable names to use when unpacking a packed argument.\n\nCrucially, the size of this array also indicates the number of functions to pack, and\nthe length of each array the arity.\n","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.varNamess","kind":"def","line":34,"name":"Lean.Meta.ArgsPacker.varNamess","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker/Basic.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNamess</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.mk","kind":"ctor","line":27,"name":"Lean.Meta.ArgsPacker.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker/Basic.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The metadata required for the operation in the `Lean.Meta.ArgsPacker` module; see\nthe module docs there for an overview.\n","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker","kind":"structure","line":23,"name":"Lean.Meta.ArgsPacker","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker/Basic.lean#L23-L35"}}],"imports":["Init.Data.Array.Basic"],"instances":[{"className":"Inhabited","name":"Lean.Meta.instInhabitedArgsPacker","typeNames":["Lean.Meta.ArgsPacker"]}],"name":"Lean.Meta.ArgsPacker.Basic"}