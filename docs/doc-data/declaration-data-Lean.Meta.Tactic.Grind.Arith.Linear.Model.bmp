{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Model.html#Lean.Meta.Grind.Arith.Linear.mkModel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mkModel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>))</span></span></div></div>","info":{"doc":"Construct a model that satisfies all constraints in the linarith model for the structure with id `structId`.\nIt also assigns values to (integer) terms that have not been internalized by the linarith model.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Model.html#Lean.Meta.Grind.Arith.Linear.mkModel","kind":"def","line":31,"name":"Lean.Meta.Grind.Arith.Linear.mkModel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Model.lean#L31-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Model.html#Lean.Meta.Grind.Arith.Linear.getAssignment?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">getAssignment?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Model.html#Lean.Meta.Grind.Arith.Linear.getAssignment?","kind":"def","line":14,"name":"Lean.Meta.Grind.Arith.Linear.getAssignment?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Model.lean#L14-L19"}}],"imports":["Lean.Meta.Tactic.Grind.Arith.Linear.Types","Lean.Meta.Tactic.Grind.Arith.ModelUtil","Init.Grind.Module.Envelope"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Arith.Linear.Model"}