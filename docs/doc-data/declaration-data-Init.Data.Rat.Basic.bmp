{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.ceil\"><span class=\"name\">Rat</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The ceiling of a rational number `a` is the smallest integer greater than or equal to `a`. ","docLink":"./Init/Data/Rat/Basic.html#Rat.ceil","kind":"def","line":309,"name":"Rat.ceil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L309-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.floor\"><span class=\"name\">Rat</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The floor of a rational number `a` is the largest integer less than or equal to `a`. ","docLink":"./Init/Data/Rat/Basic.html#Rat.floor","kind":"def","line":302,"name":"Rat.floor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L302-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instSub\"><span class=\"name\">Rat</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instSub","kind":"instance","line":300,"name":"Rat.instSub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L300-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.sub\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Subtraction of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.sub_def` instead.)\n","docLink":"./Init/Data/Rat/Basic.html#Rat.sub","kind":"def","line":281,"name":"Rat.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L281-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.sub.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">ad </span><span class=\"fn\">bd</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbd</span> : <span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">den</span> := <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span>;\n<span class=\"fn\">have <span class=\"fn\">num</span> := <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.sub.aux","kind":"theorem","line":273,"name":"Rat.sub.aux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L273-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instNeg\"><span class=\"name\">Rat</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instNeg","kind":"instance","line":271,"name":"Rat.instNeg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L271-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.neg\"><span class=\"name\">Rat</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Negation of rational numbers. ","docLink":"./Init/Data/Rat/Basic.html#Rat.neg","kind":"def","line":267,"name":"Rat.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L267-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instAdd\"><span class=\"name\">Rat</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instAdd","kind":"instance","line":265,"name":"Rat.instAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L265-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.add\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Addition of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.add_def` instead.)\n","docLink":"./Init/Data/Rat/Basic.html#Rat.add","kind":"def","line":245,"name":"Rat.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L245-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.add.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">ad </span><span class=\"fn\">bd</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbd</span> : <span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">den</span> := <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span>;\n<span class=\"fn\">have <span class=\"fn\">num</span> := <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.add.aux","kind":"theorem","line":217,"name":"Rat.add.aux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L217-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instDiv\"><span class=\"name\">Rat</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"Division of rational numbers. Note: `div a 0 = 0`.  Written with a separate function `Rat.div`\nas a wrapper so that the definition is not unfolded at `.instance` transparency. ","docLink":"./Init/Data/Rat/Basic.html#Rat.instDiv","kind":"instance","line":213,"name":"Rat.instDiv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L213-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.div\"><span class=\"name\">Rat</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"Division of rational numbers. Note: `div a 0 = 0`. ","docLink":"./Init/Data/Rat/Basic.html#Rat.div","kind":"def","line":210,"name":"Rat.div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instPowInt\"><span class=\"name\">Rat</span>.<span class=\"name\">instPowInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instPowInt","kind":"instance","line":207,"name":"Rat.instPowInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L207-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.zpow\"><span class=\"name\">Rat</span>.<span class=\"name\">zpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.zpow","kind":"def","line":202,"name":"Rat.zpow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L202-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instPowNat\"><span class=\"name\">Rat</span>.<span class=\"name\">instPowNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instPowNat","kind":"instance","line":199,"name":"Rat.instPowNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L199-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.pow\"><span class=\"name\">Rat</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.pow","kind":"def","line":195,"name":"Rat.pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L195-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instInv\"><span class=\"name\">Rat</span>.<span class=\"name\">instInv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inv\">Inv</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instInv","kind":"instance","line":193,"name":"Rat.instInv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.inv\"><span class=\"name\">Rat</span>.<span class=\"name\">inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"The inverse of a rational number. Note: `inv 0 = 0`. (This definition is `@[irreducible]`\nbecause you don't want to unfold it. Use `Rat.inv_def` instead.)\n","docLink":"./Init/Data/Rat/Basic.html#Rat.inv","kind":"def","line":177,"name":"Rat.inv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L177-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instMul\"><span class=\"name\">Rat</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instMul","kind":"instance","line":175,"name":"Rat.instMul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.mul\"><span class=\"name\">Rat</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Multiplication of rational numbers. (This definition is `@[irreducible]` because you don't\nwant to unfold it. Use `Rat.mul_def` instead.) ","docLink":"./Init/Data/Rat/Basic.html#Rat.mul","kind":"def","line":156,"name":"Rat.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L156-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instMax\"><span class=\"name\">Rat</span>.<span class=\"name\">instMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instMax","kind":"instance","line":154,"name":"Rat.instMax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instMin\"><span class=\"name\">Rat</span>.<span class=\"name\">instMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instMin","kind":"instance","line":153,"name":"Rat.instMin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instDecidableLe\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instDecidableLe","kind":"instance","line":150,"name":"Rat.instDecidableLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L150-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instLE\"><span class=\"name\">Rat</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instLE","kind":"instance","line":148,"name":"Rat.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instDecidableLt\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instDecidableLt","kind":"instance","line":145,"name":"Rat.instDecidableLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L145-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instLT\"><span class=\"name\">Rat</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instLT","kind":"instance","line":143,"name":"Rat.instLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.blt\"><span class=\"name\">Rat</span>.<span class=\"name\">blt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Rational number strictly less than relation, as a `Bool`. ","docLink":"./Init/Data/Rat/Basic.html#Rat.blt","kind":"def","line":131,"name":"Rat.blt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L131-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instOfScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfScientific</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instOfScientific","kind":"instance","line":128,"name":"Rat.instOfScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.ofScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Implements \"scientific notation\" `123.4e-5` for rational numbers. (This definition is\n`@[irreducible]` because you don't want to unfold it. Use `Rat.ofScientific_def`,\n`Rat.ofScientific_true_def`, or `Rat.ofScientific_false_def` instead.) ","docLink":"./Init/Data/Rat/Basic.html#Rat.ofScientific","kind":"def","line":119,"name":"Rat.ofScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L119-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.«term_/._»\"><span class=\"name\">Rat</span>.<span class=\"name\">«term_/</span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"Form the quotient `n / d` where `n d : Int`. ","docLink":"./Init/Data/Rat/Basic.html#Rat.«term_/._»","kind":"def","line":117,"name":"Rat.«term_/._»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.divInt\"><span class=\"name\">Rat</span>.<span class=\"name\">divInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"Form the quotient `n / d` where `n d : Int`. ","docLink":"./Init/Data/Rat/Basic.html#Rat.divInt","kind":"def","line":112,"name":"Rat.divInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L112-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.isInt\"><span class=\"name\">Rat</span>.<span class=\"name\">isInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is this rational number integral? ","docLink":"./Init/Data/Rat/Basic.html#Rat.isInt","kind":"def","line":109,"name":"Rat.isInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L109-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instOfNat\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instOfNat","kind":"instance","line":107,"name":"Rat.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instIntCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instIntCast","kind":"instance","line":105,"name":"Rat.instIntCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.instNatCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.instNatCast","kind":"instance","line":103,"name":"Rat.instNatCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.ofInt\"><span class=\"name\">Rat</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Embedding of `Int` in the rational numbers. ","docLink":"./Init/Data/Rat/Basic.html#Rat.ofInt","kind":"def","line":100,"name":"Rat.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L100-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#mkRat\"><span class=\"name\">mkRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Construct a rational number from a numerator and denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized, and returns\nzero if `den` is zero.\n","docLink":"./Init/Data/Rat/Basic.html#mkRat","kind":"def","line":89,"name":"mkRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L89-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.normalize\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Construct a normalized `Rat` from a numerator and nonzero denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized.\n","docLink":"./Init/Data/Rat/Basic.html#Rat.normalize","kind":"def","line":79,"name":"Rat.normalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L79-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.normalize.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">reduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">g</span></span>).<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Coprime.html#Nat.Coprime\">Coprime</a></span> (<span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.normalize.reduced","kind":"theorem","line":73,"name":"Rat.normalize.reduced","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L73-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.normalize.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">den_nz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.normalize.den_nz","kind":"theorem","line":69,"name":"Rat.normalize.den_nz","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L69-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.normalize.dvd_den\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">dvd_den</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">den</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.normalize.dvd_den","kind":"theorem","line":65,"name":"Rat.normalize.dvd_den","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L65-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.normalize.dvd_num\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">dvd_num</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">num</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.normalize.dvd_num","kind":"theorem","line":60,"name":"Rat.normalize.dvd_num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L60-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.maybeNormalize\"><span class=\"name\">Rat</span>.<span class=\"name\">maybeNormalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dvd_num</span> : <span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">num</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dvd_den</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">den</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reduced</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">g</span></span>).<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Coprime.html#Nat.Coprime\">Coprime</a></span> (<span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Auxiliary definition for `Rat.normalize`. Constructs `num / den` as a rational number,\ndividing both `num` and `den` by `g` (which is the gcd of the two) if it is not 1.\n","docLink":"./Init/Data/Rat/Basic.html#Rat.maybeNormalize","kind":"def","line":47,"name":"Rat.maybeNormalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L47-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.den_pos\"><span class=\"name\">Rat</span>.<span class=\"name\">den_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#Rat.den_pos","kind":"theorem","line":45,"name":"Rat.den_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instReprRat\"><span class=\"name\">instReprRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instReprRat","kind":"instance","line":42,"name":"instReprRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instToStringRat\"><span class=\"name\">instToStringRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instToStringRat","kind":"instance","line":39,"name":"instToStringRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instInhabitedRat\"><span class=\"name\">instInhabitedRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instInhabitedRat","kind":"instance","line":37,"name":"instInhabitedRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instHashableRat.hash\"><span class=\"name\">instHashableRat</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instHashableRat.hash","kind":"def","line":35,"name":"instHashableRat.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instHashableRat\"><span class=\"name\">instHashableRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instHashableRat","kind":"instance","line":35,"name":"instHashableRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instDecidableEqRat.decEq\"><span class=\"name\">instDecidableEqRat</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instDecidableEqRat.decEq","kind":"def","line":35,"name":"instDecidableEqRat.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#instDecidableEqRat\"><span class=\"name\">instDecidableEqRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Rat/Basic.html#instDecidableEqRat","kind":"instance","line":35,"name":"instDecidableEqRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">reduced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Coprime.html#Nat.Coprime\">Coprime</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span></span></div></div>","info":{"doc":"The numerator and denominator are coprime: it is in \"reduced form\". ","docLink":"./Init/Data/Rat/Basic.html#Rat.reduced","kind":"theorem","line":34,"name":"Rat.reduced","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">den_nz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"The denominator is nonzero. ","docLink":"./Init/Data/Rat/Basic.html#Rat.den_nz","kind":"theorem","line":32,"name":"Rat.den_nz","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.den\"><span class=\"name\">Rat</span>.<span class=\"name\">den</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The denominator of the rational number is a natural number. ","docLink":"./Init/Data/Rat/Basic.html#Rat.den","kind":"def","line":30,"name":"Rat.den","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.num\"><span class=\"name\">Rat</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The numerator of the rational number is an integer. ","docLink":"./Init/Data/Rat/Basic.html#Rat.num","kind":"def","line":28,"name":"Rat.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat.mk'\"><span class=\"name\">Rat</span>.<span class=\"name\">mk'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> := by decide)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reduced</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Coprime.html#Nat.Coprime\">Coprime</a></span> <span class=\"fn\">den</span></span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Constructs a rational number from components.\nWe rename the constructor to `mk'` to avoid a clash with the smart constructor. ","docLink":"./Init/Data/Rat/Basic.html#Rat.mk'","kind":"ctor","line":26,"name":"Rat.mk'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Rat/Basic.html#Rat\"><span class=\"name\">Rat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Rational numbers, implemented as a pair of integers `num / den` such that the\ndenominator is positive and the numerator and denominator are coprime.\n","docLink":"./Init/Data/Rat/Basic.html#Rat","kind":"structure","line":18,"name":"Rat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Rat/Basic.lean#L18-L35"}}],"imports":["Init.Data.Nat.Coprime","Init.Data.Hashable","Init.Data.OfScientific","Init.Data.Int.Bitwise"],"instances":[{"className":"Decidable","name":"instDecidableEqRat","typeNames":["Eq"]},{"className":"Hashable","name":"instHashableRat","typeNames":["Rat"]},{"className":"Inhabited","name":"instInhabitedRat","typeNames":["Rat"]},{"className":"ToString","name":"instToStringRat","typeNames":["Rat"]},{"className":"Repr","name":"instReprRat","typeNames":["Rat"]},{"className":"NatCast","name":"Rat.instNatCast","typeNames":["Rat"]},{"className":"IntCast","name":"Rat.instIntCast","typeNames":["Rat"]},{"className":"OfNat","name":"Rat.instOfNat","typeNames":["Rat"]},{"className":"OfScientific","name":"Rat.instOfScientific","typeNames":["Rat"]},{"className":"LT","name":"Rat.instLT","typeNames":["Rat"]},{"className":"Decidable","name":"Rat.instDecidableLt","typeNames":["LT.lt"]},{"className":"LE","name":"Rat.instLE","typeNames":["Rat"]},{"className":"Decidable","name":"Rat.instDecidableLe","typeNames":["LE.le"]},{"className":"Min","name":"Rat.instMin","typeNames":["Rat"]},{"className":"Max","name":"Rat.instMax","typeNames":["Rat"]},{"className":"Mul","name":"Rat.instMul","typeNames":["Rat"]},{"className":"Inv","name":"Rat.instInv","typeNames":["Rat"]},{"className":"Pow","name":"Rat.instPowNat","typeNames":["Rat","Nat"]},{"className":"Pow","name":"Rat.instPowInt","typeNames":["Rat","Int"]},{"className":"Div","name":"Rat.instDiv","typeNames":["Rat"]},{"className":"Add","name":"Rat.instAdd","typeNames":["Rat"]},{"className":"Neg","name":"Rat.instNeg","typeNames":["Rat"]},{"className":"Sub","name":"Rat.instSub","typeNames":["Rat"]}],"name":"Init.Data.Rat.Basic"}