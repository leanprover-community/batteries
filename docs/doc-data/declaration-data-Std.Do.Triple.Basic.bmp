{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.mp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">mp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P₁</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₁</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₁</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q₁</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q₁</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.imp\">imp</a></span> <span class=\"fn\">Q₂</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q₁</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">and</a></span> <span class=\"fn\">Q₂</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"Modus ponens for two Hoare triple specifications of a program `x`.\nThis theorem is useful for separating proofs. If `h₁ : Triple x P₁ Q₁` proves a basic property about\n`x` and `h₂ : Triple x P₂ (Q₁ →ₚ Q₂)` is an advanced proof for `Q₂` that builds on the basic proof\nfor `Q₁`, then `mp x h₁ h₂` is a proof for `Q₂` about `x`.\n","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.mp","kind":"theorem","line":74,"name":"Std.Do.Triple.mp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L74-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P₁</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₁</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₁</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q₁</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P₂</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q₁</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">and</a></span> <span class=\"fn\">Q₂</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"Conjunction for two Hoare triple specifications of a program `x`.\nThis theorem is useful for decomposing proofs, because unrelated facts about `x` can be proven\nseparately and then combined with this theorem.\n","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.and","kind":"theorem","line":66,"name":"Std.Do.Triple.and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L66-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">Q</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">R</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">R</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.bind","kind":"theorem","line":56,"name":"Std.Do.Triple.bind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L56-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\"><span class=\"fn\">ps</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.args\">args</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">himp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.pure","kind":"theorem","line":53,"name":"Std.Do.Triple.pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple.instPropAsSPredTautologyImpApplyWp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span>.<span class=\"name\">instPropAsSPredTautologyImpApplyWp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">SPred.Tactic.PropAsSPredTautology</a> (<a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple.instPropAsSPredTautologyImpApplyWp","kind":"instance","line":50,"name":"Std.Do.Triple.instPropAsSPredTautologyImpApplyWp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.unexpandTriple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">unexpandTriple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/Basic.html#Std.Do.unexpandTriple","kind":"def","line":42,"name":"Std.Do.unexpandTriple","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L42-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.triple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">triple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"A Hoare triple for reasoning about monadic programs.\nA proof for `Triple x P Q` is a *specification* for `x`:\nIf assertion `P` holds before `x`, then postcondition `Q` holds after running `x`.\n\n`⦃P⦄ x ⦃Q⦄` is convenient syntax for `Triple x P Q`.\n","docLink":"./Std/Do/Triple/Basic.html#Std.Do.triple","kind":"def","line":39,"name":"Std.Do.triple","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Triple</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A Hoare triple for reasoning about monadic programs.\nA proof for `Triple x P Q` is a *specification* for `x`:\nIf assertion `P` holds before `x`, then postcondition `Q` holds after running `x`.\n\n`⦃P⦄ x ⦃Q⦄` is convenient syntax for `Triple x P Q`.\n","docLink":"./Std/Do/Triple/Basic.html#Std.Do.Triple","kind":"def","line":29,"name":"Std.Do.Triple","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/Triple/Basic.lean#L29-L37"}}],"imports":["Std.Do.WP","Std.Do.SPred.Notation"],"instances":[{"className":"Std.Do.SPred.Tactic.PropAsSPredTautology","name":"Std.Do.Triple.instPropAsSPredTautologyImpApplyWp","typeNames":["Std.Do.Triple","Std.Do.SPred.imp"]}],"name":"Std.Do.Triple.Basic"}