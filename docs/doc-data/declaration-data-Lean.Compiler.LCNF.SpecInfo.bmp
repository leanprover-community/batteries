{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.isSpecCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">isSpecCandidate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.isSpecCandidate","kind":"def","line":220,"name":"Lean.Compiler.LCNF.isSpecCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L220-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getSpecParamInfo?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfo?","kind":"def","line":217,"name":"Lean.Compiler.LCNF.getSpecParamInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L217-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfoCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getSpecParamInfoCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfoCore?","kind":"def","line":208,"name":"Lean.Compiler.LCNF.getSpecParamInfoCore?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L208-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.saveSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">saveSpecParamInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Save parameter information for `decls`.\n\nRemark: this function, similarly to `mkFixedArgMap`,\nassumes that if a function `f` was declared in a mutual block, then `decls`\ncontains all (computationally relevant) functions in the mutual block.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.saveSpecParamInfo","kind":"def","line":145,"name":"Lean.Compiler.LCNF.saveSpecParamInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L145-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.specExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">specExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></span></div></div>","info":{"doc":"Extension for storing `SpecParamInfo` for declarations being compiled.\nRemark: we only store information for declarations that will be specialized.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.specExtension","kind":"opaque","line":82,"name":"Lean.Compiler.LCNF.specExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L82-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.addEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span>.<span class=\"name\">addEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.addEntry","kind":"def","line":67,"name":"Lean.Compiler.LCNF.SpecState.addEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecEntry</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry.default","kind":"def","line":63,"name":"Lean.Compiler.LCNF.instInhabitedSpecEntry.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry","kind":"instance","line":63,"name":"Lean.Compiler.LCNF.instInhabitedSpecEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.paramsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span>.<span class=\"name\">paramsInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.paramsInfo","kind":"def","line":62,"name":"Lean.Compiler.LCNF.SpecEntry.paramsInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.declName","kind":"def","line":61,"name":"Lean.Compiler.LCNF.SpecEntry.declName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramsInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.mk","kind":"ctor","line":60,"name":"Lean.Compiler.LCNF.SpecEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry","kind":"structure","line":60,"name":"Lean.Compiler.LCNF.SpecEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L60-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState","kind":"instance","line":58,"name":"Lean.Compiler.LCNF.instInhabitedSpecState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState.default","kind":"def","line":58,"name":"Lean.Compiler.LCNF.instInhabitedSpecState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.specInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span>.<span class=\"name\">specInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.specInfo","kind":"def","line":57,"name":"Lean.Compiler.LCNF.SpecState.specInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">specInfo</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.mk","kind":"ctor","line":56,"name":"Lean.Compiler.LCNF.SpecState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState","kind":"structure","line":56,"name":"Lean.Compiler.LCNF.SpecState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L56-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instToMessageDataSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instToMessageDataSpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","kind":"instance","line":48,"name":"Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L48-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instReprSpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo","kind":"instance","line":46,"name":"Lean.Compiler.LCNF.instReprSpecParamInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instReprSpecParamInfo</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo.repr","kind":"def","line":46,"name":"Lean.Compiler.LCNF.instReprSpecParamInfo.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo","kind":"instance","line":46,"name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecParamInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo.default","kind":"def","line":46,"name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>","info":{"doc":"Parameter is not going to be specialized.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.other","kind":"ctor","line":42,"name":"Lean.Compiler.LCNF.SpecParamInfo.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L42-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.user\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">user</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>","info":{"doc":"An argument that has been specified in the `@[specialize]` attribute. Lean specializes it even if it is\nnot fixed in recursive declarations. Non-termination can happen, and Lean interrupts it with an error message\nbased on the stack depth.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.user","kind":"ctor","line":36,"name":"Lean.Compiler.LCNF.SpecParamInfo.user","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L36-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">fixedNeutral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>","info":{"doc":"Computationally irrelevant parameters that are fixed in recursive declarations,\n*and* there is a `fixedInst`, `fixedHO`, or `user` param that depends on it.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral","kind":"ctor","line":31,"name":"Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L31-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedHO\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">fixedHO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>","info":{"doc":"A parameter that is a function and is fixed in recursive declarations. If the user tags a declaration\nwith `@[specialize]` without specifying which arguments should be specialized, Lean will specialize\n`.fixedHO` arguments in addition to `.fixedInst`.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedHO","kind":"ctor","line":25,"name":"Lean.Compiler.LCNF.SpecParamInfo.fixedHO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L25-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">fixedInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>","info":{"doc":"A parameter that is an type class instance (or an arrow that produces a type class instance),\nand is fixed in recursive declarations. By default, Lean always specializes this kind of argument.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedInst","kind":"ctor","line":20,"name":"Lean.Compiler.LCNF.SpecParamInfo.fixedInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L20-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Each parameter is associated with a `SpecParamInfo`. This information is used by `LCNF/Specialize.lean`.\n","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo","kind":"inductive","line":16,"name":"Lean.Compiler.LCNF.SpecParamInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/SpecInfo.lean#L16-L46"}}],"imports":["Lean.Compiler.LCNF.FixedParams","Lean.Compiler.LCNF.InferType"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo","typeNames":["Lean.Compiler.LCNF.SpecParamInfo"]},{"className":"Repr","name":"Lean.Compiler.LCNF.instReprSpecParamInfo","typeNames":["Lean.Compiler.LCNF.SpecParamInfo"]},{"className":"Lean.ToMessageData","name":"Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","typeNames":["Lean.Compiler.LCNF.SpecParamInfo"]},{"className":"Inhabited","name":"Lean.Compiler.LCNF.instInhabitedSpecState","typeNames":["Lean.Compiler.LCNF.SpecState"]},{"className":"Inhabited","name":"Lean.Compiler.LCNF.instInhabitedSpecEntry","typeNames":["Lean.Compiler.LCNF.SpecEntry"]}],"name":"Lean.Compiler.LCNF.SpecInfo"}