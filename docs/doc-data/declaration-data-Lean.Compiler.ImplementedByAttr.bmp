{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ImplementedByAttr.html#Lean.setImplementedBy\"><span class=\"name\">Lean</span>.<span class=\"name\">setImplementedBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">impName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/ImplementedByAttr.html#Lean.setImplementedBy","kind":"def","line":76,"name":"Lean.setImplementedBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/ImplementedByAttr.lean#L76-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ImplementedByAttr.html#Lean.Compiler.setImplementedBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">setImplementedBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">impName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/ImplementedByAttr.html#Lean.Compiler.setImplementedBy","kind":"def","line":71,"name":"Lean.Compiler.setImplementedBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/ImplementedByAttr.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ImplementedByAttr.html#Lean.Compiler.getImplementedBy?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getImplementedBy?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/ImplementedByAttr.html#Lean.Compiler.getImplementedBy?","kind":"def","line":68,"name":"Lean.Compiler.getImplementedBy?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/ImplementedByAttr.lean#L68-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ImplementedByAttr.html#Lean.Compiler.implementedByAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">implementedByAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Instructs the compiler to use a different function as the implementation of a function. With the\nexception of tactics that call native code such as `native_decide`, the kernel and type checking\nare unaffected. When this attribute is used on a function, the function is not compiled and all\ncompiler-related attributes (e.g. `noncomputable`, `@[inline]`) are ignored. Calls to this\nfunction are replaced by calls to its implementation.\n\nThe most common use cases of `@[implemented_by]` are to provide an efficient unsafe implementation\nand to make an unsafe function accessible in safe code through an opaque function:\n\n```\nunsafe def testEqImpl (as bs : Array Nat) : Bool :=\n  ptrEq as bs || as == bs\n\n@[implemented_by testEqImpl]\ndef testEq (as bs : Array Nat) : Bool :=\n  as == bs\n\nunsafe def printAddrImpl {α : Type u} (x : α) : IO Unit :=\n  IO.println s!\"Address: {ptrAddrUnsafe x}\"\n\n@[implemented_by printAddrImpl]\nopaque printAddr {α : Type u} (x : α) : IO Unit\n```\n\nThe provided implementation is not checked to be equivalent to the original definition. This makes\nit possible to prove `False` with `native_decide` using incorrect implementations. For a safer\nvariant of this attribute that however doesn't work for unsafe implementations, see `@[csimp]`,\nwhich requires a proof that the two functions are equal.\n","docLink":"./Lean/Compiler/ImplementedByAttr.html#Lean.Compiler.implementedByAttr","kind":"opaque","line":16,"name":"Lean.Compiler.implementedByAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/ImplementedByAttr.lean#L16-L66"}}],"imports":["Lean.Elab.InfoTree","Lean.Compiler.LCNF.PhaseExt"],"instances":[],"name":"Lean.Compiler.ImplementedByAttr"}