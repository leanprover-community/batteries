{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and_left_of_entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">and_left_of_entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">and</a></span> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.and_left_of_entails","kind":"theorem","line":341,"name":"Std.Do.PostCond.and_left_of_entails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L341-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">and_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P' </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α✝</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P'</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">and</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P'</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.imp\">imp</a></span> <span class=\"fn\">Q'</span>)</span>)</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P'</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\">and</a></span> <span class=\"fn\">Q'</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.and_imp","kind":"theorem","line":338,"name":"Std.Do.PostCond.and_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L338-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_→ₚ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_→ₚ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.«term_→ₚ_»","kind":"def","line":336,"name":"Std.Do.«term_→ₚ_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L336-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.imp","kind":"def","line":333,"name":"Std.Do.PostCond.imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L333-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_∧ₚ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_∧ₚ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.«term_∧ₚ_»","kind":"def","line":331,"name":"Std.Do.«term_∧ₚ_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L331-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.and","kind":"def","line":328,"name":"Std.Do.PostCond.and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L328-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails_mayThrow\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails_mayThrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.mayThrow\">mayThrow</a> <span class=\"fn\">q</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails_mayThrow","kind":"theorem","line":324,"name":"Std.Do.PostCond.entails_mayThrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L324-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails_noThrow\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails_noThrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow\">noThrow</a> <span class=\"fn\">p</span>)</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails_noThrow","kind":"theorem","line":320,"name":"Std.Do.PostCond.entails_noThrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L320-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">R</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails.trans","kind":"theorem","line":317,"name":"Std.Do.PostCond.entails.trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L317-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails.rfl","kind":"theorem","line":315,"name":"Std.Do.PostCond.entails.rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L315-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\">entails</a></span> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails.refl","kind":"theorem","line":313,"name":"Std.Do.PostCond.entails.refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L313-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_⊢ₚ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⊢ₚ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.«term_⊢ₚ_»","kind":"def","line":311,"name":"Std.Do.«term_⊢ₚ_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L311-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.entails","kind":"def","line":307,"name":"Std.Do.PostCond.entails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L307-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.instInhabitedPostCond\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedPostCond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.instInhabitedPostCond","kind":"instance","line":304,"name":"Std.Do.instInhabitedPostCond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L304-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_⇓?_=&gt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⇓?_=&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"A postcondition expressing partial correctness.\nThat is, it expresses that *if* the asserted computation finishes without throwing an exception\n*then* the result satisfies the given predicate `p`.\nNothing is asserted when the computation throws an exception.\n","docLink":"./Std/Do/PostCond.html#Std.Do.«term_⇓?_=>_»","kind":"def","line":301,"name":"Std.Do.«term_⇓?_=>_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L301-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.mayThrow\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">mayThrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"A postcondition expressing partial correctness.\nThat is, it expresses that *if* the asserted computation finishes without throwing an exception\n*then* the result satisfies the given predicate `p`.\nNothing is asserted when the computation throws an exception.\n","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.mayThrow","kind":"def","line":291,"name":"Std.Do.PostCond.mayThrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L291-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_⇓_=&gt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⇓_=&gt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"A postcondition expressing total correctness.\nThat is, it expresses that the asserted computation finishes without throwing an exception\n*and* the result satisfies the given predicate `p`.\n","docLink":"./Std/Do/PostCond.html#Std.Do.«term_⇓_=>_»","kind":"def","line":288,"name":"Std.Do.«term_⇓_=>_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L288-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span>.<span class=\"name\">noThrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"A postcondition expressing total correctness.\nThat is, it expresses that the asserted computation finishes without throwing an exception\n*and* the result satisfies the given predicate `p`.\n","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow","kind":"def","line":279,"name":"Std.Do.PostCond.noThrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L279-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«termPost⟨_,,⟩»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«termPost⟨_,,⟩»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"A postcondition for the given predicate shape, with one `Assertion` for the terminating case and\none `Assertion` for each `.except` layer in the predicate shape.\n```\nvariable (α σ ε : Type)\nexample : PostCond α (.arg σ .pure) = ((α → σ → ULift Prop) × PUnit) := rfl\nexample : PostCond α (.except ε .pure) = ((α → ULift Prop) × (ε → ULift Prop) × PUnit) := rfl\nexample : PostCond α (.arg σ (.except ε .pure)) = ((α → σ → ULift Prop) × (ε → ULift Prop) × PUnit) := rfl\nexample : PostCond α (.except ε (.arg σ .pure)) = ((α → σ → ULift Prop) × (ε → σ → ULift Prop) × PUnit) := rfl\n```\n","docLink":"./Std/Do/PostCond.html#Std.Do.«termPost⟨_,,⟩»","kind":"def","line":274,"name":"Std.Do.«termPost⟨_,,⟩»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L274-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostCond\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostCond</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A postcondition for the given predicate shape, with one `Assertion` for the terminating case and\none `Assertion` for each `.except` layer in the predicate shape.\n```\nvariable (α σ ε : Type)\nexample : PostCond α (.arg σ .pure) = ((α → σ → ULift Prop) × PUnit) := rfl\nexample : PostCond α (.except ε .pure) = ((α → ULift Prop) × (ε → ULift Prop) × PUnit) := rfl\nexample : PostCond α (.arg σ (.except ε .pure)) = ((α → σ → ULift Prop) × (ε → ULift Prop) × PUnit) := rfl\nexample : PostCond α (.except ε (.arg σ .pure)) = ((α → σ → ULift Prop) × (ε → σ → ULift Prop) × PUnit) := rfl\n```\n","docLink":"./Std/Do/PostCond.html#Std.Do.PostCond","kind":"def","line":259,"name":"Std.Do.PostCond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L259-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">and_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> (<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">x₂</span>)).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> (<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">x₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_imp","kind":"theorem","line":253,"name":"Std.Do.ExceptConds.and_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L253-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">false_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.false_imp","kind":"theorem","line":245,"name":"Std.Do.ExceptConds.false_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L245-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">true_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.true_imp","kind":"theorem","line":236,"name":"Std.Do.ExceptConds.true_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L236-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">imp_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">R</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">Q</span>).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">R</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp_elim","kind":"theorem","line":230,"name":"Std.Do.ExceptConds.imp_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L230-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">imp_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">Q</span>).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">R</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp_intro","kind":"theorem","line":224,"name":"Std.Do.ExceptConds.imp_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L224-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">snd_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">x₂</span>).<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_imp","kind":"theorem","line":221,"name":"Std.Do.ExceptConds.snd_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L221-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">fst_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\">→ₑ</a> <span class=\"fn\">x₂</span>).<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_imp","kind":"theorem","line":218,"name":"Std.Do.ExceptConds.fst_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L218-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_→ₑ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_→ₑ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.«term_→ₑ_»","kind":"def","line":216,"name":"Std.Do.«term_→ₑ_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L216-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.imp","kind":"def","line":210,"name":"Std.Do.ExceptConds.imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L210-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_eq_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">and_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">p</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">q</span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_eq_left","kind":"theorem","line":199,"name":"Std.Do.ExceptConds.and_eq_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L199-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">false_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">x</span>).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.false_and","kind":"theorem","line":190,"name":"Std.Do.ExceptConds.false_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L190-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">and_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a>).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_false","kind":"theorem","line":181,"name":"Std.Do.ExceptConds.and_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L181-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">true_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">x</span>).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.true_and","kind":"theorem","line":172,"name":"Std.Do.ExceptConds.true_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L172-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">and_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a>).<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.and_true","kind":"theorem","line":163,"name":"Std.Do.ExceptConds.and_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L163-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">snd_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">x₂</span>).<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_and","kind":"theorem","line":160,"name":"Std.Do.ExceptConds.snd_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L160-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">fst_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x₁</span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\">∧ₑ</a> <span class=\"fn\">x₂</span>).<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_and","kind":"theorem","line":157,"name":"Std.Do.ExceptConds.fst_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_∧ₑ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_∧ₑ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.«term_∧ₑ_»","kind":"def","line":155,"name":"Std.Do.«term_∧ₑ_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.and","kind":"def","line":149,"name":"Std.Do.ExceptConds.and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L149-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">entails_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails_true","kind":"theorem","line":145,"name":"Std.Do.ExceptConds.entails_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L145-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">entails_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails_false","kind":"theorem","line":141,"name":"Std.Do.ExceptConds.entails_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L141-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">entails</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">z</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails.trans","kind":"theorem","line":135,"name":"Std.Do.ExceptConds.entails.trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L135-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">entails</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails.rfl","kind":"theorem","line":133,"name":"Std.Do.ExceptConds.entails.rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">entails</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\">entails</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails.refl","kind":"theorem","line":129,"name":"Std.Do.ExceptConds.entails.refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L129-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.«term_⊢ₑ_»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«term_⊢ₑ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.«term_⊢ₑ_»","kind":"def","line":127,"name":"Std.Do.«term_⊢ₑ_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.entails","kind":"def","line":121,"name":"Std.Do.ExceptConds.entails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L121-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.instInhabitedExceptConds\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedExceptConds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.instInhabitedExceptConds","kind":"instance","line":118,"name":"Std.Do.instInhabitedExceptConds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L118-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">snd_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_false","kind":"theorem","line":114,"name":"Std.Do.ExceptConds.snd_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">fst_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">false</a>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">_ε</span> : <span class=\"fn\">ε</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_false","kind":"theorem","line":110,"name":"Std.Do.ExceptConds.fst_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L110-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">snd_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_true","kind":"theorem","line":106,"name":"Std.Do.ExceptConds.snd_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">fst_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\">true</a>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">_ε</span> : <span class=\"fn\">ε</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_true","kind":"theorem","line":102,"name":"Std.Do.ExceptConds.fst_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L102-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_const\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">snd_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.const\">const</a> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.const\">const</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.snd_const","kind":"theorem","line":98,"name":"Std.Do.ExceptConds.snd_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_const\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">fst_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.const\">const</a> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">_ε</span> : <span class=\"fn\">ε</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">p</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.fst_const","kind":"theorem","line":94,"name":"Std.Do.ExceptConds.fst_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.false","kind":"def","line":92,"name":"Std.Do.ExceptConds.false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.true","kind":"def","line":91,"name":"Std.Do.ExceptConds.true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.const\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds.const","kind":"def","line":86,"name":"Std.Do.ExceptConds.const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L86-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptConds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>","info":{"doc":"Encodes one continuation barrel for each `PostShape.except` in the given predicate shape.\n```\nexample : ExceptConds (.pure) = Unit := rfl\nexample : ExceptConds (.except ε .pure) = ((ε → ULift Prop) × Unit) := rfl\nexample : ExceptConds (.arg σ (.except ε .pure)) = ((ε → ULift Prop) × Unit) := rfl\nexample : ExceptConds (.except ε (.arg σ .pure)) = ((ε → σ → ULift Prop) × Unit) := rfl\n```\n","docLink":"./Std/Do/PostCond.html#Std.Do.ExceptConds","kind":"def","line":72,"name":"Std.Do.ExceptConds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L72-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.Assertion\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Assertion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"An assertion on the `.arg`s in the given predicate shape.\n```\nexample : Assertion (.arg ρ .pure) = (ρ → ULift Prop) := rfl\nexample : Assertion (.except ε .pure) = ULift Prop := rfl\nexample : Assertion (.arg σ (.except ε .pure)) = (σ → ULift Prop) := rfl\nexample : Assertion (.except ε (.arg σ .pure)) = (σ → ULift Prop) := rfl\n```\nThis is an abbreviation for `SPred` under the hood, so all theorems about `SPred` apply.\n","docLink":"./Std/Do/PostCond.html#Std.Do.Assertion","kind":"def","line":59,"name":"Std.Do.Assertion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L59-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.args\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.args","kind":"def","line":54,"name":"Std.Do.PostShape.args","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L54-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">except</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.except","kind":"ctor","line":50,"name":"Std.Do.PostShape.except","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a> → <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.arg","kind":"ctor","line":49,"name":"Std.Do.PostShape.arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span>.<span class=\"name\">pure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape.pure","kind":"ctor","line":48,"name":"Std.Do.PostShape.pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PostCond.html#Std.Do.PostShape\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PostShape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>","info":{"doc":"","docLink":"./Std/Do/PostCond.html#Std.Do.PostShape","kind":"inductive","line":47,"name":"Std.Do.PostShape","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PostCond.lean#L47-L50"}}],"imports":["Std.Do.SPred"],"instances":[{"className":"Inhabited","name":"Std.Do.instInhabitedExceptConds","typeNames":["Std.Do.ExceptConds"]},{"className":"Inhabited","name":"Std.Do.instInhabitedPostCond","typeNames":["Std.Do.PostCond"]}],"name":"Std.Do.PostCond"}