{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.satQuery\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">satQuery</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">solverPath </span><span class=\"fn\">problemPath </span><span class=\"fn\">proofOutput</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timeout</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binaryProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult\">SolverResult</a></span></div></div>","info":{"doc":"Call the SAT solver in `solverPath` with `problemPath` as CNF input and ask it to output an LRAT\nUNSAT proof (binary or non-binary depending on `binaryProofs`) into `proofOutput`. To avoid runaway\nsolvers the solver is run with `timeout` in seconds as a maximum time limit to solve the problem.\n\nNote: This function currently assume that the solver has the same CLI as CaDiCal.\n","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.satQuery","kind":"def","line":141,"name":"Lean.Elab.Tactic.BVDecide.External.satQuery","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L141-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.runInterruptible\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">runInterruptible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timeout</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">IO.Process.SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut\">TimedOut</a> <a href=\"./Init/System/IO.html#IO.Process.Output\">IO.Process.Output</a>)</span></span></div></div>","info":{"doc":"Run a process with `args` until it terminates or the cancellation token in `CoreM` tells us to abort\nor `timeout` seconds have passed.\n","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.runInterruptible","kind":"def","line":95,"name":"Lean.Elab.Tactic.BVDecide.External.runInterruptible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L95-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut.timeout\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">TimedOut</span>.<span class=\"name\">timeout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut\">TimedOut</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut.timeout","kind":"ctor","line":93,"name":"Lean.Elab.Tactic.BVDecide.External.TimedOut.timeout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut.success\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">TimedOut</span>.<span class=\"name\">success</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut\">TimedOut</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut.success","kind":"ctor","line":92,"name":"Lean.Elab.Tactic.BVDecide.External.TimedOut.success","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">TimedOut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.TimedOut","kind":"inductive","line":91,"name":"Lean.Elab.Tactic.BVDecide.External.TimedOut","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L91-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">ModelParser</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Std.Internal.Parsec.ByteArray.Parser</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>))</span></span></div></div>","info":{"doc":"Parse the witness format of a SAT solver. The rough grammar for this is:\nline = \"v\" (\" \" lit)*\\n\nterminal_line = \"v\" (\" \" lit)* (\" \" 0)\\n\nwitness = \"s SATISFIABLE\\n\" line+ terminal_line\n","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parse","kind":"def","line":77,"name":"Lean.Elab.Tactic.BVDecide.External.ModelParser.parse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L77-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parseHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">ModelParser</span>.<span class=\"name\">parseHeader</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Std.Internal.Parsec.ByteArray.Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parseHeader","kind":"def","line":72,"name":"Lean.Elab.Tactic.BVDecide.External.ModelParser.parseHeader","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L72-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parseLines\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">ModelParser</span>.<span class=\"name\">parseLines</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Std.Internal.Parsec.ByteArray.Parser</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parseLines","kind":"def","line":61,"name":"Lean.Elab.Tactic.BVDecide.External.ModelParser.parseLines","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L61-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parsePartialAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">ModelParser</span>.<span class=\"name\">parsePartialAssignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Std.Internal.Parsec.ByteArray.Parser</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.ModelParser.parsePartialAssignment","kind":"def","line":44,"name":"Lean.Elab.Tactic.BVDecide.External.ModelParser.parsePartialAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L44-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult.unsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">SolverResult</span>.<span class=\"name\">unsat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult\">SolverResult</a></div></div>","info":{"doc":"The solver returned UNSAT.\n","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult.unsat","kind":"ctor","line":33,"name":"Lean.Elab.Tactic.BVDecide.External.SolverResult.unsat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L33-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">SolverResult</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult\">SolverResult</a></div></div>","info":{"doc":"The solver returned SAT with some literal assignment.\n","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult.sat","kind":"ctor","line":29,"name":"Lean.Elab.Tactic.BVDecide.External.SolverResult.sat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L29-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">External</span>.<span class=\"name\">SolverResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of calling a SAT solver.\n","docLink":"./Lean/Elab/Tactic/BVDecide/External.html#Lean.Elab.Tactic.BVDecide.External.SolverResult","kind":"inductive","line":25,"name":"Lean.Elab.Tactic.BVDecide.External.SolverResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/External.lean#L25-L36"}}],"imports":["Std.Tactic.BVDecide.LRAT.Parser","Lean.CoreM"],"instances":[],"name":"Lean.Elab.Tactic.BVDecide.External"}