{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">canonImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.canonImpl","kind":"def","line":223,"name":"Lean.Meta.Grind.Canon.canonImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Canon.lean#L223-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.isSupport\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">isSupport</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pinfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">ParamInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `shouldCannon pinfos i arg` is not `.visit`.\nThis is a helper function used to implement mbtc.\n","docLink":"./Lean/Meta/Tactic/Grind/Canon.html#Lean.Meta.Grind.Canon.isSupport","kind":"def","line":172,"name":"Lean.Meta.Grind.Canon.isSupport","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Canon.lean#L172-L178"}}],"imports":["Lean.Meta.Tactic.Grind.Types","Init.Grind.Util","Lean.Meta.FunInfo","Lean.Util.FVarSubset","Lean.Meta.IntInstTesters","Lean.Meta.NatInstTesters"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Canon"}