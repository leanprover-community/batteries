{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.decLe\"><span class=\"name\">USize</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Decides whether one word-sized unsigned integer is less than or equal to another. Usually accessed\nvia the `DecidableLE USize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : USize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : USize) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : USize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : USize) ≤ 7 by decide`\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.decLe","kind":"instance","line":382,"name":"USize.decLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L382-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.decLt\"><span class=\"name\">USize</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Decides whether one word-sized unsigned integer is strictly less than another. Usually accessed via\nthe `DecidableLT USize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : USize) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : USize) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : USize) < 7) by decide`\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.decLt","kind":"instance","line":367,"name":"USize.decLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L367-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instLEUSize\"><span class=\"name\">instLEUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#instLEUSize","kind":"instance","line":365,"name":"instLEUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L365-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instLTUSize\"><span class=\"name\">instLTUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#instLTUSize","kind":"instance","line":364,"name":"instLTUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L364-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instSubUSize\"><span class=\"name\">instSubUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#instSubUSize","kind":"instance","line":363,"name":"instSubUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L363-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#instAddUSize\"><span class=\"name\">instAddUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#instAddUSize","kind":"instance","line":362,"name":"instAddUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L362-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.instOfNat\"><span class=\"name\">USize</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#USize.instOfNat","kind":"instance","line":360,"name":"USize.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L360-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.le\"><span class=\"name\">USize</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Non-strict inequality of word-sized unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.le","kind":"def","line":354,"name":"USize.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L354-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.lt\"><span class=\"name\">USize</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Strict inequality of word-sized unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.lt","kind":"def","line":349,"name":"USize.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L349-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.sub\"><span class=\"name\">USize</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Subtracts one word-sized-bit unsigned integer from another, wrapping around on underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.sub","kind":"def","line":340,"name":"USize.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L340-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.add\"><span class=\"name\">USize</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Adds two word-sized unsigned integers, wrapping around on overflow.  Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.add","kind":"def","line":332,"name":"USize.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L332-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\"><span class=\"name\">USize</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Converts a word-sized unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.toNat","kind":"def","line":325,"name":"USize.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L325-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUSize\"><span class=\"name\">Nat</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts an arbitrary-precision natural number to an unsigned word-sized integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUSize","kind":"def","line":324,"name":"Nat.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L324-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.ofNatTruncate\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts a natural number to `USize`, returning the largest representable value if the number is too\nlarge.\n\nReturns `USize.size - 1`, which is  `2^64 - 1` or `2^32 - 1` depending on the platform, for natural\nnumbers greater than or equal to `USize.size`.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.ofNatTruncate","kind":"def","line":312,"name":"USize.ofNatTruncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L312-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts an arbitrary-precision natural number to an unsigned word-sized integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#USize.ofNat","kind":"def","line":304,"name":"USize.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L304-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\"><span class=\"name\">USize</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>","info":{"doc":"Converts a `USize` into the corresponding `Fin USize.size`. ","docLink":"./Init/Data/UInt/BasicAux.html#USize.toFin","kind":"def","line":301,"name":"USize.toFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L301-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.instOfNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.instOfNat","kind":"instance","line":299,"name":"UInt64.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts 32-bit unsigned integers to 64-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64","kind":"def","line":291,"name":"UInt32.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L291-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts 16-bit unsigned integers to 64-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64","kind":"def","line":284,"name":"UInt16.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L284-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts 8-bit unsigned integers to 64-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64","kind":"def","line":277,"name":"UInt8.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L277-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts 64-bit unsigned integers to 32-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32","kind":"def","line":270,"name":"UInt64.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L270-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts 64-bit unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16","kind":"def","line":263,"name":"UInt64.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L263-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts 64-bit unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8","kind":"def","line":256,"name":"UInt64.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L256-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Converts a 64-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toNat","kind":"def","line":249,"name":"UInt64.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L249-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt64\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts a natural number to a 64-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt64 5 = 5`\n* `Nat.toUInt64 65539 = 65539`\n* `Nat.toUInt64 4_294_967_299 = 4_294_967_299`\n* `Nat.toUInt64 18_446_744_073_709_551_620 = 4`\n","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt64","kind":"def","line":237,"name":"Nat.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L237-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNatTruncate\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts a natural number to a 64-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^64 - 1` for natural numbers greater than or equal to `2^64`.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.ofNatTruncate","kind":"def","line":226,"name":"UInt64.ofNatTruncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L226-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts a natural number to a 64-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt64.ofNat 5 = 5`\n* `UInt64.ofNat 65539 = 65539`\n* `UInt64.ofNat 4_294_967_299 = 4_294_967_299`\n* `UInt64.ofNat 18_446_744_073_709_551_620 = 4`\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.ofNat","kind":"def","line":213,"name":"UInt64.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L213-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span></div></div>","info":{"doc":"Converts a `UInt64` into the corresponding `Fin UInt64.size`. ","docLink":"./Init/Data/UInt/BasicAux.html#UInt64.toFin","kind":"def","line":210,"name":"UInt64.toFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNatLT_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt_ofNatLT_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.lt_ofNatLT_of_lt","kind":"theorem","line":205,"name":"UInt32.lt_ofNatLT_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L205-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNatLT_lt_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">h1</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">m</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNatLT_lt_of_lt","kind":"theorem","line":200,"name":"UInt32.ofNatLT_lt_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L200-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.instOfNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.instOfNat","kind":"instance","line":198,"name":"UInt32.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts 16-bit unsigned integers to 32-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32","kind":"def","line":190,"name":"UInt16.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L190-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts 8-bit unsigned integers to 32-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32","kind":"def","line":183,"name":"UInt8.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L183-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts 32-bit unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16","kind":"def","line":176,"name":"UInt32.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L176-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts a 32-bit unsigned integer to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8","kind":"def","line":169,"name":"UInt32.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L169-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt32\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts a natural number to a 32-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt32 5 = 5`\n* `Nat.toUInt32 65_539 = 65_539`\n* `Nat.toUInt32 4_294_967_299 = 3`\n","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt32","kind":"def","line":157,"name":"Nat.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L157-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNatTruncate\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts a natural number to a 32-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^32 - 1` for natural numbers greater than or equal to `2^32`.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNatTruncate","kind":"def","line":146,"name":"UInt32.ofNatTruncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L146-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts a natural number to a 32-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt32.ofNat 5 = 5`\n* `UInt32.ofNat 65539 = 65539`\n* `UInt32.ofNat 4_294_967_299 = 3`\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.ofNat","kind":"def","line":133,"name":"UInt32.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L133-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span></div></div>","info":{"doc":"Converts a `UInt32` into the corresponding `Fin UInt32.size`. ","docLink":"./Init/Data/UInt/BasicAux.html#UInt32.toFin","kind":"def","line":130,"name":"UInt32.toFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L130-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.instOfNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.instOfNat","kind":"instance","line":128,"name":"UInt16.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts 8-bit unsigned integers to 16-bit unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16","kind":"def","line":120,"name":"UInt8.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L120-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts 16-bit unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8","kind":"def","line":113,"name":"UInt16.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L113-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Converts a 16-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toNat","kind":"def","line":106,"name":"UInt16.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L106-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt16\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts a natural number to a 16-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt16 5 = 5`\n* `Nat.toUInt16 255 = 255`\n* `Nat.toUInt16 32770 = 32770`\n* `Nat.toUInt16 65537 = 1`\n","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt16","kind":"def","line":93,"name":"Nat.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L93-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNatTruncate\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts a natural number to a 16-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^16 - 1` for natural numbers greater than or equal to `2^16`.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.ofNatTruncate","kind":"def","line":81,"name":"UInt16.ofNatTruncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L81-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts a natural number to a 16-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt16.ofNat 5 = 5`\n* `UInt16.ofNat 255 = 255`\n* `UInt16.ofNat 32770 = 32770`\n* `UInt16.ofNat 65537 = 1`\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.ofNat","kind":"def","line":68,"name":"UInt16.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L68-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span></div></div>","info":{"doc":"Converts a `UInt16` into the corresponding `Fin UInt16.size`. ","docLink":"./Init/Data/UInt/BasicAux.html#UInt16.toFin","kind":"def","line":65,"name":"UInt16.toFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.instOfNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.instOfNat","kind":"instance","line":63,"name":"UInt8.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Converts an 8-bit unsigned integer to an arbitrary-precision natural number.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toNat","kind":"def","line":55,"name":"UInt8.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L55-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#Nat.toUInt8\"><span class=\"name\">Nat</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts a natural number to an 8-bit unsigned integer, wrapping on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Nat.toUInt8 5 = 5`\n* `Nat.toUInt8 255 = 255`\n* `Nat.toUInt8 256 = 0`\n* `Nat.toUInt8 259 = 3`\n* `Nat.toUInt8 32770 = 2`\n","docLink":"./Init/Data/UInt/BasicAux.html#Nat.toUInt8","kind":"def","line":41,"name":"Nat.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L41-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.ofNatTruncate\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts a natural number to an 8-bit unsigned integer, returning the largest representable value if\nthe number is too large.\n\nReturns `2^8 - 1` for natural numbers greater than or equal to `2^8`.\n","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.ofNatTruncate","kind":"def","line":29,"name":"UInt8.ofNatTruncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L29-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span></div></div>","info":{"doc":"Converts a `UInt8` into the corresponding `Fin UInt8.size`. ","docLink":"./Init/Data/UInt/BasicAux.html#UInt8.toFin","kind":"def","line":26,"name":"UInt8.toFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/UInt/BasicAux.lean#L26-L27"}}],"imports":["Init.Data.BitVec.BasicAux"],"instances":[{"className":"OfNat","name":"UInt8.instOfNat","typeNames":["UInt8"]},{"className":"OfNat","name":"UInt16.instOfNat","typeNames":["UInt16"]},{"className":"OfNat","name":"UInt32.instOfNat","typeNames":["UInt32"]},{"className":"OfNat","name":"UInt64.instOfNat","typeNames":["UInt64"]},{"className":"OfNat","name":"USize.instOfNat","typeNames":["USize"]},{"className":"Add","name":"instAddUSize","typeNames":["USize"]},{"className":"Sub","name":"instSubUSize","typeNames":["USize"]},{"className":"LT","name":"instLTUSize","typeNames":["USize"]},{"className":"LE","name":"instLEUSize","typeNames":["USize"]},{"className":"Decidable","name":"USize.decLt","typeNames":["LT.lt"]},{"className":"Decidable","name":"USize.decLe","typeNames":["LE.le"]}],"name":"Init.Data.UInt.BasicAux"}