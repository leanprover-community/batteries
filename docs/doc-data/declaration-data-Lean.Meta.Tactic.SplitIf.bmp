{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.splitIfLocalDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">splitIfLocalDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>))</span></span></div></div>","info":{"doc":"Split an `if-then-else` in the hypothesis `fvarId`.\n","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.splitIfLocalDecl?","kind":"def","line":330,"name":"Lean.Meta.splitIfLocalDecl?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L330-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.splitIfTarget?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">splitIfTarget?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNewSemantics</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a>))</span></span></div></div>","info":{"doc":"Split an `if-then-else` in the goal target.\nIf `useNewSemantics` is `true`, the flag `backward.split` is ignored.\n","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.splitIfTarget?","kind":"def","line":316,"name":"Lean.Meta.splitIfTarget?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L316-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.simpIfLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpIfLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNewSemantics</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Simplify the `if-then-else` targeted by the `split` tactic. If `useNewSemantics` is `true`, the flag\n`backward.split` is ignored.\n","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.simpIfLocalDecl","kind":"def","line":300,"name":"Lean.Meta.simpIfLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L300-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.simpIfTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">simpIfTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useDecide </span><span class=\"fn\">useNewSemantics</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Simplify the `if-then-else` targeted by the `split` tactic. If `useNewSemantics` is `true`, the flag\n`backward.split` is ignored.\n","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.simpIfTarget","kind":"def","line":284,"name":"Lean.Meta.simpIfTarget","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L284-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitIf.splitIfAt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitIf</span>.<span class=\"name\">splitIfAt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitIf.splitIfAt?","kind":"def","line":265,"name":"Lean.Meta.SplitIf.splitIfAt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L265-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitIf.mkDischarge?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitIf</span>.<span class=\"name\">mkDischarge?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useDecide</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Simp.Discharge</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitIf.mkDischarge?","kind":"def","line":262,"name":"Lean.Meta.SplitIf.mkDischarge?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L262-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitIf.getSimpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitIf</span>.<span class=\"name\">getSimpContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Simp.Context</a></span></div></div>","info":{"doc":"The `Simp.Context` that used to be used with `simpIf` methods. It contains all congruence theorems, but\njust the rewriting rules for reducing `if` expressions.\nThis function is only used when the old `split` tactic behavior is enabled.\n","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitIf.getSimpContext","kind":"def","line":141,"name":"Lean.Meta.SplitIf.getSimpContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L141-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.backward.split\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">backward</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.backward.split","kind":"opaque","line":134,"name":"Lean.Meta.backward.split","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L134-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.findSplit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">findSplit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a> := <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.both\">SplitKind.both</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exceptionSet</span> : <a href=\"./Lean/Expr.html#Lean.ExprSet\">ExprSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Return an `if-then-else` or `match-expr` to split. ","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.findSplit?","kind":"def","line":104,"name":"Lean.Meta.findSplit?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L104-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.FindM\">FindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.visit","kind":"def","line":64,"name":"Lean.Meta.FindSplitImpl.visit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L64-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.checkVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">checkVisited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.FindM\">FindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.checkVisited","kind":"def","line":59,"name":"Lean.Meta.FindSplitImpl.checkVisited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L59-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.FindM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">FindM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.FindM","kind":"def","line":34,"name":"Lean.Meta.FindSplitImpl.FindM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">Context</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context.kind","kind":"def","line":32,"name":"Lean.Meta.FindSplitImpl.Context.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context.exceptionSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">Context</span>.<span class=\"name\">exceptionSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.ExprSet\">ExprSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context.exceptionSet","kind":"def","line":31,"name":"Lean.Meta.FindSplitImpl.Context.exceptionSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exceptionSet</span> : <a href=\"./Lean/Expr.html#Lean.ExprSet\">ExprSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context.mk","kind":"ctor","line":30,"name":"Lean.Meta.FindSplitImpl.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">FindSplitImpl</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.FindSplitImpl.Context","kind":"structure","line":30,"name":"Lean.Meta.FindSplitImpl.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L30-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.considerMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitKind</span>.<span class=\"name\">considerMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.considerMatch","kind":"def","line":24,"name":"Lean.Meta.SplitKind.considerMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L24-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.considerIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitKind</span>.<span class=\"name\">considerIte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.considerIte","kind":"def","line":20,"name":"Lean.Meta.SplitKind.considerIte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L20-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.both\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitKind</span>.<span class=\"name\">both</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.both","kind":"ctor","line":18,"name":"Lean.Meta.SplitKind.both","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.match\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitKind</span>.<span class=\"name\">match</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.match","kind":"ctor","line":18,"name":"Lean.Meta.SplitKind.match","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.ite\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitKind</span>.<span class=\"name\">ite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\">SplitKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind.ite","kind":"ctor","line":18,"name":"Lean.Meta.SplitKind.ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SplitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/SplitIf.html#Lean.Meta.SplitKind","kind":"inductive","line":17,"name":"Lean.Meta.SplitKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/SplitIf.lean#L17-L18"}}],"imports":["Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Simp.Rewrite","Lean.Meta.Tactic.Simp.Main"],"instances":[],"name":"Lean.Meta.Tactic.SplitIf"}