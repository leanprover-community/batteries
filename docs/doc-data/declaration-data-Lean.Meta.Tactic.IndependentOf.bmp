{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/IndependentOf.html#Lean.MVarId.isIndependentOf\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">isIndependentOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check if a goal is \"independent\" of a list of other goals.\nWe say a goal is independent of other goals if assigning a value to it\ncan not change the assignability of the other goals.\n\nExamples:\n* `?m_1 : Type` is not independent of `?m_2 : ?m_1`,\n  because we could assign `true : Bool` to `?m_2`,\n  but if we first assign `Nat` to `?m_1` then that is no longer possible.\n* `?m_1 : Nat` is not independent of `?m_2 : Fin ?m_1`,\n  because we could assign `37 : Fin 42` to `?m_2`,\n  but if we first assign `2` to `?m_1` then that is no longer possible.\n* `?m_1 : ?m_2` is not independent of `?m_2 : Type`, because we could assign `Bool` to ?m_2`,\n  but if we first assign `0 : Nat` to `?m_1` then that is no longer possible.\n* Given `P : Prop` and `f : P → Type`, `?m_1 : P` is independent of `?m_2 : f ?m_1`\n  by proof irrelevance.\n* Similarly given `f : Fin 0 → Type`, `?m_1 : Fin 0` is independent of `?m_2 : f ?m_1`,\n  because `Fin 0` is a subsingleton.\n* Finally `?m_1 : Nat` is independent of `?m_2 : α`,\n  as long as `?m_1` does not appear in `Meta.getMVars α`\n  (note that `Meta.getMVars` follows delayed assignments).\n\nThis function only calculates a conservative approximation of this condition.\nThat is, it may return `false` when it should return `true`.\n(In particular it returns false whenever the type of `g` contains a metavariable,\nregardless of whether this is related to the metavariables in `L`.)\n","docLink":"./Lean/Meta/Tactic/IndependentOf.html#Lean.MVarId.isIndependentOf","kind":"def","line":18,"name":"Lean.MVarId.isIndependentOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/IndependentOf.lean#L18-L60"}}],"imports":["Lean.Meta.CollectMVars","Lean.Meta.Tactic.Util"],"instances":[],"name":"Lean.Meta.Tactic.IndependentOf"}