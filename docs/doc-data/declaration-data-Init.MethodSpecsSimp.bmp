{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#ShiftRight.shiftRight_hShiftRight\"><span class=\"name\">ShiftRight</span>.<span class=\"name\">shiftRight_hShiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ShiftRight.shiftRight\">shiftRight</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">HShiftRight.hShiftRight</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#ShiftRight.shiftRight_hShiftRight","kind":"theorem","line":67,"name":"ShiftRight.shiftRight_hShiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#ShiftLeft.shiftLeft_hShiftLeft\"><span class=\"name\">ShiftLeft</span>.<span class=\"name\">shiftLeft_hShiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ShiftLeft.shiftLeft\">shiftLeft</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">HShiftLeft.hShiftLeft</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#ShiftLeft.shiftLeft_hShiftLeft","kind":"theorem","line":64,"name":"ShiftLeft.shiftLeft_hShiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L64-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#OrOp.or_hOr\"><span class=\"name\">OrOp</span>.<span class=\"name\">or_hOr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#OrOp.or\">or</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HOr.hOr\">HOr.hOr</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#OrOp.or_hOr","kind":"theorem","line":61,"name":"OrOp.or_hOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#XorOp.xor_hXor\"><span class=\"name\">XorOp</span>.<span class=\"name\">xor_hXor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#XorOp.xor\">xor</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HXor.hXor\">HXor.hXor</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#XorOp.xor_hXor","kind":"theorem","line":58,"name":"XorOp.xor_hXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#AndOp.andOp_hAnd\"><span class=\"name\">AndOp</span>.<span class=\"name\">andOp_hAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#AndOp.and\">and</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HAnd.hAnd\">HAnd.hAnd</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#AndOp.andOp_hAnd","kind":"theorem","line":55,"name":"AndOp.andOp_hAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#AndThen.andThen_eq_hAndThen\"><span class=\"name\">AndThen</span>.<span class=\"name\">andThen_eq_hAndThen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#AndThen\">AndThen</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#AndThen.andThen\">andThen</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HAndThen.hAndThen\">HAndThen.hAndThen</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#AndThen.andThen_eq_hAndThen","kind":"theorem","line":52,"name":"AndThen.andThen_eq_hAndThen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#OrElse.orElse_eq_hOrElse\"><span class=\"name\">OrElse</span>.<span class=\"name\">orElse_eq_hOrElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse\">OrElse</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#OrElse.orElse\">orElse</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HOrElse.hOrElse\">HOrElse.hOrElse</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#OrElse.orElse_eq_hOrElse","kind":"theorem","line":49,"name":"OrElse.orElse_eq_hOrElse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Append.append_eq_hAppend\"><span class=\"name\">Append</span>.<span class=\"name\">append_eq_hAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Append.append\">append</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HAppend.hAppend\">HAppend.hAppend</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Append.append_eq_hAppend","kind":"theorem","line":46,"name":"Append.append_eq_hAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Mul.mul_eq_smul\"><span class=\"name\">Mul</span>.<span class=\"name\">mul_eq_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Mul.mul\">mul</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#SMul.smul\">SMul.smul</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Mul.mul_eq_smul","kind":"theorem","line":43,"name":"Mul.mul_eq_smul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#SMul.smul_eq_hSMul\"><span class=\"name\">SMul</span>.<span class=\"name\">smul_eq_hSMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#SMul\">SMul</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#SMul.smul\">smul</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HSMul.hSMul\">HSMul.hSMul</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#SMul.smul_eq_hSMul","kind":"theorem","line":40,"name":"SMul.smul_eq_hSMul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Pow.pow_eq_hPow\"><span class=\"name\">Pow</span>.<span class=\"name\">pow_eq_hPow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Pow.pow\">pow</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HPow.hPow\">HPow.hPow</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Pow.pow_eq_hPow","kind":"theorem","line":37,"name":"Pow.pow_eq_hPow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Mod.mod_eq_hMod\"><span class=\"name\">Mod</span>.<span class=\"name\">mod_eq_hMod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Mod.mod\">mod</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HMod.hMod\">HMod.hMod</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Mod.mod_eq_hMod","kind":"theorem","line":34,"name":"Mod.mod_eq_hMod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Div.div_eq_hDiv\"><span class=\"name\">Div</span>.<span class=\"name\">div_eq_hDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Div.div\">div</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HDiv.hDiv\">HDiv.hDiv</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Div.div_eq_hDiv","kind":"theorem","line":31,"name":"Div.div_eq_hDiv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Mul.mul_eq_hMul\"><span class=\"name\">Mul</span>.<span class=\"name\">mul_eq_hMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Mul.mul\">mul</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HMul.hMul\">HMul.hMul</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Mul.mul_eq_hMul","kind":"theorem","line":28,"name":"Mul.mul_eq_hMul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Sub.sub_eq_hSub\"><span class=\"name\">Sub</span>.<span class=\"name\">sub_eq_hSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Sub.sub\">sub</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HSub.hSub\">HSub.hSub</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Sub.sub_eq_hSub","kind":"theorem","line":25,"name":"Sub.sub_eq_hSub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L25-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MethodSpecsSimp.html#Add.add_eq_hAdd\"><span class=\"name\">Add</span>.<span class=\"name\">add_eq_hAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Add.add\">add</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">HAdd.hAdd</a></div></div>","info":{"doc":"","docLink":"./Init/MethodSpecsSimp.html#Add.add_eq_hAdd","kind":"theorem","line":22,"name":"Add.add_eq_hAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MethodSpecsSimp.lean#L22-L23"}}],"imports":["Init.Prelude"],"instances":[],"name":"Init.MethodSpecsSimp"}