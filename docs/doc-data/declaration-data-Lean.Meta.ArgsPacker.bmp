{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryParam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value </span><span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Given `value : type` where `type` is\n```\n(m : (x : a ⊗' b ⊕' c ⊗' d) → s[x]) → r[m]\n```\nbrings `m1 : (x : a) → (y : b) → s[.inl ⟨x,y⟩]` and `m2 : (x : c) → (y : d) → s[.inr ⟨x,y⟩]` into scope. The continuation receives\n\n * FVars for `m1`…\n * `e[m]`\n * `t[m]`\n\nwhere `m : a ⊗' b ⊕' c ⊗' d → s` is the uncurried form of `m1` and `m2`.\n\nThe variable names `m1` and `m2` are taken from the parameter name in `t`, with numbers added\nunless `numFuns = 1`\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryParam","kind":"def","line":586,"name":"Lean.Meta.ArgsPacker.curryParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L586-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given expression `e` of type `(x : a ⊗' b ⊕' c ⊗' d) → e[x]`, wraps that expression\nto produce an expression of the isomorphic type\n```\n((x: a) → (y : b) → e[.inl (x,y)]) ∧ ((x : c) → (y : d) → e[.inr (x,y)])\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curry","kind":"def","line":557,"name":"Lean.Meta.ArgsPacker.curry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L557-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Given type `(x : a ⊗' b ⊕' c ⊗' d) → R` (dependent), return types\n```\n#[(x: a) → (y : b) → R, (x : c) → (y : d) → R]\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryType","kind":"def","line":547,"name":"Lean.Meta.ArgsPacker.curryType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L547-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given expression `e` of type `(x : a₁ ⊗' b₁ ⊕' a₂ ⊗' d₂ …) → e[x]`, uncurries the expression and\nprojects to the `i`th function of type,\n```\n((x : aᵢ) → (y : bᵢ) → e[.inr….inl (x,y)])\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryProj","kind":"def","line":522,"name":"Lean.Meta.ArgsPacker.curryProj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L522-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given expressions `e₁`, `e₂` with types `(x : A) → (y : B[x]) → R`\nand `(z : C) → R`, returns an expression of type\n```\n(x : (A ⊗ B) ⊕ C) → R\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryND","kind":"def","line":511,"name":"Lean.Meta.ArgsPacker.uncurryND","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L511-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryWithType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryWithType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryWithType","kind":"def","line":507,"name":"Lean.Meta.ArgsPacker.uncurryWithType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L507-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given expressions `e₁`, `e₂` with types `(x : A) → (y : B[x]) → R₁[x,y]`\nand `(z : C) → R₂[z]`, returns an expression of type\n```\n(x : (A ⊗ B) ⊕ C) → (match x with | .inl (x, y) => R₁[x,y] | .inr R₂[z]\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurry","kind":"def","line":496,"name":"Lean.Meta.ArgsPacker.uncurry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L496-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given types `(x : A) → (y : B[x]) → R₁[x,y]` and `(z : C) → R₂[z]`, returns the type uncurried type\n```\n(x : (A ⊗ B) ⊕ C) → (match x with | .inl (x, y) => R₁[x,y] | .inr R₂[z]\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryType","kind":"def","line":486,"name":"Lean.Meta.ArgsPacker.uncurryType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L486-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"Given the packed argument of a (possibly) mutual and (possibly) nary call,\nreturn the function index that is called and the arguments individually.\n\nWe expect precisely the expressions produced by `pack`, with manifest\n`PSum.inr`, `PSum.inl` and `PSigma.mk` constructors, and thus take them apart\nrather than using projections.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.unpack","kind":"def","line":473,"name":"Lean.Meta.ArgsPacker.unpack","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L473-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">domain</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.pack","kind":"def","line":465,"name":"Lean.Meta.ArgsPacker.pack","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L465-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.onlyOneUnary\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">onlyOneUnary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.onlyOneUnary","kind":"def","line":461,"name":"Lean.Meta.ArgsPacker.onlyOneUnary","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L461-L463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.arities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">arities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The arities of the functions being packed ","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.arities","kind":"def","line":458,"name":"Lean.Meta.ArgsPacker.arities","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L458-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.numFuncs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">numFuncs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of functions being packed ","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.numFuncs","kind":"def","line":455,"name":"Lean.Meta.ArgsPacker.numFuncs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L455-L456"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.curryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">curryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.curryType","kind":"def","line":442,"name":"Lean.Meta.ArgsPacker.Mutual.curryType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L442-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given unary expressions `e₁`, `e₂` with types `(x : A) → R`\nand `(z : C) → R`, returns an expression of type\n```\n(x : A ⊕' C) → R\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryND","kind":"def","line":421,"name":"Lean.Meta.ArgsPacker.Mutual.uncurryND","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L421-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurry","kind":"def","line":416,"name":"Lean.Meta.ArgsPacker.Mutual.uncurry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L416-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryWithType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryWithType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given unary expressions `e₁`, `e₂` with types `(x : A) → R₁[x]`\nand `(z : C) → R₂[z]`, returns an expression of type\n```\n(x : A ⊕' C) → (match x with | .inl x => R₁[x] | .inr R₂[z])\n```\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryWithType","kind":"def","line":403,"name":"Lean.Meta.ArgsPacker.Mutual.uncurryWithType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L403-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryTypeND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryTypeND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryTypeND","kind":"def","line":362,"name":"Lean.Meta.ArgsPacker.Mutual.uncurryTypeND","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L362-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryType","kind":"def","line":344,"name":"Lean.Meta.ArgsPacker.Mutual.uncurryType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L344-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">mkCodomain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given unary types `(x : Aᵢ) → Rᵢ[x]`, and `(x : A₁ ⊕ A₂ …)`, calculate the packed codomain\n```\nmatch x with | inl x₁ => R₁[x₁] | inr x₂ => R₂[x₂] | …\n```\nThis function assumes (and does not check) that `Rᵢ` all have the same level.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain","kind":"def","line":304,"name":"Lean.Meta.ArgsPacker.Mutual.mkCodomain","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L304-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFuncs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Unpacks a mutually packed argument created with `Mutual.mk` returning the\nargument and function index.\n\nThrows an error if the expression is not of that form.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.unpack","kind":"def","line":283,"name":"Lean.Meta.ArgsPacker.Mutual.unpack","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L283-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFuncs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">domain</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"If `arg` is the argument to the `fidx`th of the `argsPacker.numFuncs` in the recursive group,\nthen `mk` packs that argument in `PSum.inl` and `PSum.inr` constructors\nto create the mutual-packed argument of type `domain`.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack","kind":"def","line":263,"name":"Lean.Meta.ArgsPacker.Mutual.pack","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L263-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.packType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">packType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given types `#[t₁, t₂,…]`, returns the type `t₁ ⊕' t₂ …`. ","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.packType","kind":"def","line":246,"name":"Lean.Meta.ArgsPacker.Mutual.packType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L246-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given expression `e` of type `(x : A) → (y : B[x]) → … → (z : D[x,y]) → R[x,y,z]`\nreturns an expression of type `(x : A ⊗' B ⊗' … ⊗' D) → R[x.1, x.2.1, x.2.2]`.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurry","kind":"def","line":167,"name":"Lean.Meta.ArgsPacker.Unary.uncurry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L167-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given a type `t` of the form `(x : A) → (y : B[x]) → … → (z : D[x,y]) → R[x,y,z]`\nreturns the curried type `(x : A ⊗' B ⊗' … ⊗' D) → R[x.1, x.2.1, x.2.2]`.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurryType","kind":"def","line":127,"name":"Lean.Meta.ArgsPacker.Unary.uncurryType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L127-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Unpacks a unary packed argument created with `Unary.pack`.\n\nThrows an error if the expression is not of that form.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.unpack","kind":"def","line":95,"name":"Lean.Meta.ArgsPacker.Unary.unpack","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L95-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Create a unary application by packing the given arguments using `PSigma.mk`.\nThe `type` should be the expected type of the packed argument, as created with `packType`.\n","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack","kind":"def","line":71,"name":"Lean.Meta.ArgsPacker.Unary.pack","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L71-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.packType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">packType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.packType","kind":"def","line":62,"name":"Lean.Meta.ArgsPacker.Unary.packType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/ArgsPacker.lean#L62-L68"}}],"imports":["Lean.Meta.AppBuilder","Lean.Meta.PProdN","Lean.Meta.ArgsPacker.Basic"],"instances":[],"name":"Lean.Meta.ArgsPacker"}