{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_eval_eq_mkGate_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached_eval_eq_mkGate_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached\">mkGateCached</a></span> <span class=\"fn\">input</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.mkGate\">mkGate</a></span> <span class=\"fn\">input</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></div></div>","info":{"doc":"The central equality theorem between `mkGateCached` and `mkGate`.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_eval_eq_mkGate_eval","kind":"theorem","line":224,"name":"Std.Sat.AIG.mkGateCached_eval_eq_mkGate_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L224-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_eval_eq_mkGate_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached</span>.<span class=\"name\">go_eval_eq_mkGate_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.mkGate\">mkGate</a></span> <span class=\"fn\">input</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_eval_eq_mkGate_eval","kind":"theorem","line":203,"name":"Std.Sat.AIG.mkGateCached.go_eval_eq_mkGate_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L203-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorBinaryInputMkGateCached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">instLawfulOperatorBinaryInputMkGateCached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">LawfulOperator</a> <span class=\"fn\">α</span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a> <a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached\">mkGateCached</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorBinaryInputMkGateCached","kind":"instance","line":197,"name":"Std.Sat.AIG.instLawfulOperatorBinaryInputMkGateCached","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L197-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached\">mkGateCached</a></span> <span class=\"fn\">input</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached\">mkGateCached</a></span> <span class=\"fn\">input</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"The AIG produced by `AIG.mkGateCached` agrees with the input AIG on all indices that are valid for\nboth.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_decl_eq","kind":"theorem","line":182,"name":"Std.Sat.AIG.mkGateCached_decl_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L182-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached</span>.<span class=\"name\">go_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_decl_eq","kind":"theorem","line":148,"name":"Std.Sat.AIG.mkGateCached.go_decl_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L148-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached\">mkGateCached</a></span> <span class=\"fn\">input</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"`AIG.mkGateCached` never shrinks the underlying AIG.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached_le_size","kind":"theorem","line":138,"name":"Std.Sat.AIG.mkGateCached_le_size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L138-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkGateCached</span>.<span class=\"name\">go_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkGateCached.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkGateCached.go_le_size","kind":"theorem","line":128,"name":"Std.Sat.AIG.mkGateCached.go_le_size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L128-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkGate_cached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">denote_mkGate_cached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput\">BinaryInput</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hit</span> :\n  <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Decl.gate</a> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.mk\">Fanin.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.lhs\">lhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.gate\">gate</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.lhs\">lhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.invert\">invert</a></span>)</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.mk\">Fanin.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.rhs\">rhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.gate\">gate</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.rhs\">rhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.invert\">invert</a></span>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Cache.get?\">get?</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Decl.gate</a> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.mk\">Fanin.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.lhs\">lhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.gate\">gate</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.lhs\">lhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.invert\">invert</a></span>)</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.mk\">Fanin.mk</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.rhs\">rhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.gate\">gate</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.BinaryInput.rhs\">rhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.invert\">invert</a></span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span> →\n  <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">{</a> <span class=\"fn\">gate</span> := <span class=\"fn\"><span class=\"fn\">hit</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit.idx\">idx</a></span>, <span class=\"fn\">invert</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">}</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.mkGate\">mkGate</a></span> <span class=\"fn\">input</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></span></div></div>","info":{"doc":"If we find a cached gate declaration in the AIG, denoting it is equivalent to denoting `AIG.mkGate`.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkGate_cached","kind":"theorem","line":111,"name":"Std.Sat.AIG.denote_mkGate_cached","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L111-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkConstCached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">denote_mkConstCached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkConstCached\">mkConstCached</a></span> <span class=\"fn\">val</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">val</span></div></div>","info":{"doc":"The central equality theorem between `mkConstCached` and `mkConst`.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkConstCached","kind":"theorem","line":98,"name":"Std.Sat.AIG.denote_mkConstCached","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L98-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_eval_eq_mkAtom_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_eval_eq_mkAtom_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span> <span class=\"fn\">var</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.mkAtom\">mkAtom</a></span> <span class=\"fn\">var</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></div></div>","info":{"doc":"The central equality theorem between `mkAtomCached` and `mkAtom`.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_eval_eq_mkAtom_eval","kind":"theorem","line":86,"name":"Std.Sat.AIG.mkAtomCached_eval_eq_mkAtom_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L86-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorMkAtomCached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">instLawfulOperatorMkAtomCached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">LawfulOperator</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">α</span>)</span> <a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.instLawfulOperatorMkAtomCached","kind":"instance","line":82,"name":"Std.Sat.AIG.instLawfulOperatorMkAtomCached","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L82-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span> <span class=\"fn\">var</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"`AIG.mkAtomCached` never shrinks the underlying AIG.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_le_size","kind":"theorem","line":72,"name":"Std.Sat.AIG.mkAtomCached_le_size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L72-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hbound</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span> <span class=\"fn\">var</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span> <span class=\"fn\">var</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"The AIG produced by `AIG.mkAtomCached` agrees with the input AIG on all indices that are valid for\nboth.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_decl_eq","kind":"theorem","line":54,"name":"Std.Sat.AIG.mkAtomCached_decl_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L54-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_miss_aig\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_miss_aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcache</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Cache.get?\">get?</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">var</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span> <span class=\"fn\">var</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.push\">push</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">var</span>)</span></span></div></div>","info":{"doc":"`mkAtomCached` pushes to the input AIG upon a cache miss.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_miss_aig","kind":"theorem","line":46,"name":"Std.Sat.AIG.mkAtomCached_miss_aig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L46-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_hit_aig\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">mkAtomCached_hit_aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hit</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">var</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcache</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Cache.get?\">get?</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">var</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Cached.html#Std.Sat.AIG.mkAtomCached\">mkAtomCached</a></span> <span class=\"fn\">var</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.aig\">aig</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">aig</span></div></div>","info":{"doc":"`mkAtomCached` does not modify the input AIG upon a cache hit.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.mkAtomCached_hit_aig","kind":"theorem","line":38,"name":"Std.Sat.AIG.mkAtomCached_hit_aig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L38-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkAtom_cached\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">denote_mkAtom_cached</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hit</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit\">CacheHit</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">v</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Cache.get?\">get?</a></span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">hit</span></span> →\n  <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">{</a> <span class=\"fn\">gate</span> := <span class=\"fn\"><span class=\"fn\">hit</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.CacheHit.idx\">idx</a></span>, <span class=\"fn\">invert</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">}</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.mkAtom\">mkAtom</a></span> <span class=\"fn\">v</span></span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></span></div></div>","info":{"doc":"If we find a cached atom declaration in the AIG, denoting it is equivalent to denoting `AIG.mkAtom`.\n","docLink":"./Std/Sat/AIG/CachedLemmas.html#Std.Sat.AIG.denote_mkAtom_cached","kind":"theorem","line":26,"name":"Std.Sat.AIG.denote_mkAtom_cached","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sat/AIG/CachedLemmas.lean#L26-L36"}}],"imports":["Std.Sat.AIG.Cached"],"instances":[{"className":"Std.Sat.AIG.LawfulOperator","name":"Std.Sat.AIG.instLawfulOperatorMkAtomCached","typeNames":["Std.Sat.AIG.mkAtomCached"]},{"className":"Std.Sat.AIG.LawfulOperator","name":"Std.Sat.AIG.instLawfulOperatorBinaryInputMkGateCached","typeNames":["Std.Sat.AIG.BinaryInput","Std.Sat.AIG.mkGateCached"]}],"name":"Std.Sat.AIG.CachedLemmas"}