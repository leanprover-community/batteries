{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toArrayUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to an array in arbitrary order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toArrayUnordered","kind":"def","line":374,"name":"Batteries.PairingHeap.toArrayUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L374-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toListUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to a list in arbitrary order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toListUnordered","kind":"def","line":371,"name":"Batteries.PairingHeap.toListUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L371-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to an array in increasing order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toArray","kind":"def","line":368,"name":"Batteries.PairingHeap.toArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L368-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to a list in increasing order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.toList","kind":"def","line":365,"name":"Batteries.PairingHeap.toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L365-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"Amortized `O(log n)`. Removes the smallest element from the heap, if possible. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.tail","kind":"def","line":362,"name":"Batteries.PairingHeap.tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L362-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>","info":{"doc":"Amortized `O(log n)`. Removes the smallest element from the heap, or `none` if the heap is empty.\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.tail?","kind":"def","line":354,"name":"Batteries.PairingHeap.tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L354-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.headI\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">headI</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"`O(1)`. Returns the smallest element in the heap, or `default` if the heap is empty. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.headI","kind":"def","line":351,"name":"Batteries.PairingHeap.headI","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L351-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.head!\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">head!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"`O(1)`. Returns the smallest element in the heap, or panics if the heap is empty. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.head!","kind":"def","line":348,"name":"Batteries.PairingHeap.head!","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(1)`. Returns the smallest element in the heap, or `none` if the heap is empty. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.head?","kind":"def","line":345,"name":"Batteries.PairingHeap.head?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L345-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></div></div>","info":{"doc":"Amortized `O(log n)`. Remove and return the minimum element from the heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.deleteMin","kind":"def","line":339,"name":"Batteries.PairingHeap.deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L339-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.ofArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.ofArray","kind":"def","line":335,"name":"Batteries.PairingHeap.ofArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L335-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.ofList\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.ofList","kind":"def","line":331,"name":"Batteries.PairingHeap.ofList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L331-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Add element `a` to the given heap `h`. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.insert","kind":"def","line":327,"name":"Batteries.PairingHeap.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L327-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span></div></div>","info":{"doc":"`O(1)`. Merge the contents of two heaps. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.merge","kind":"def","line":323,"name":"Batteries.PairingHeap.merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L323-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Make a new heap containing `a`. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.singleton","kind":"def","line":319,"name":"Batteries.PairingHeap.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L319-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`O(n)`. The number of elements in the heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.size","kind":"def","line":316,"name":"Batteries.PairingHeap.size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L316-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`O(1)`. Is the heap empty? ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.isEmpty","kind":"def","line":313,"name":"Batteries.PairingHeap.isEmpty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L313-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.instInhabited\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.instInhabited","kind":"instance","line":311,"name":"Batteries.PairingHeap.instInhabited","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L311-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Make a new empty pairing heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap.empty","kind":"def","line":308,"name":"Batteries.PairingHeap.empty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L308-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.mkPairingHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">mkPairingHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\">PairingHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Make a new empty pairing heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.mkPairingHeap","kind":"def","line":301,"name":"Batteries.mkPairingHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L301-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A [pairing heap](https://en.wikipedia.org/wiki/Pairing_heap) is a data structure which supports\nthe following primary operations:\n\n* `insert : α → PairingHeap α → PairingHeap α`: add an element to the heap\n* `deleteMin : PairingHeap α → Option (α × PairingHeap α)`:\n  remove the minimum element from the heap\n* `merge : PairingHeap α → PairingHeap α → PairingHeap α`: combine two heaps\n\nThe first two operations are known as a \"priority queue\", so this could be called\na \"mergeable priority queue\". The standard choice for a priority queue is a binary heap,\nwhich supports `insert` and `deleteMin` in `O(log n)`, but `merge` is `O(n)`.\nWith a `PairingHeap`, `insert` and `merge` are `O(1)`, `deleteMin` is amortized `O(log n)`.\n\nNote that `deleteMin` may be `O(n)` in a single operation. So if you need an efficient\npersistent priority queue, you should use other data structures with better worst-case time.\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeap","kind":"def","line":281,"name":"Batteries.PairingHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L281-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin_fst\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin\">deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.head?\">head?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin_fst","kind":"theorem","line":272,"name":"Batteries.PairingHeapImp.Heap.deleteMin_fst","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L272-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail\">Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.tail","kind":"theorem","line":266,"name":"Batteries.PairingHeapImp.Heap.WF.tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L266-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail?\">Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">tl</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">tl</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.tail?","kind":"theorem","line":260,"name":"Batteries.PairingHeapImp.Heap.WF.tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L260-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin\">Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.deleteMin","kind":"theorem","line":256,"name":"Batteries.PairingHeapImp.Heap.WF.deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L256-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.combine\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NodeWF\">NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.combine\">Heap.combine</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.combine","kind":"theorem","line":250,"name":"Batteries.PairingHeapImp.Heap.WF.combine","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L250-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.merge","kind":"theorem","line":242,"name":"Batteries.PairingHeapImp.Heap.WF.merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L242-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.merge_node\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₂</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₂ </span><span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NodeWF\">NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a₁</span> <span class=\"fn\">c₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NodeWF\">NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a₂</span> <span class=\"fn\">c₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\">Heap.node</a> <span class=\"fn\">a₁</span> <span class=\"fn\">c₁</span> <span class=\"fn\">s₁</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\">Heap.node</a> <span class=\"fn\">a₂</span> <span class=\"fn\">c₂</span> <span class=\"fn\">s₂</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.merge_node","kind":"theorem","line":235,"name":"Batteries.PairingHeapImp.Heap.WF.merge_node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L235-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.singleton\">Heap.singleton</a> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.singleton","kind":"theorem","line":233,"name":"Batteries.PairingHeapImp.Heap.WF.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L233-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NodeWF\">NodeWF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\">Heap.node</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span> <a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.nil\">Heap.nil</a>)</span></span></div></div>","info":{"doc":"There is exactly one tree and it is a `le`-min-heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.node","kind":"ctor","line":230,"name":"Batteries.PairingHeapImp.Heap.WF.node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L230-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.nil\">Heap.nil</a></span></div></div>","info":{"doc":"It is an empty heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF.nil","kind":"ctor","line":228,"name":"Batteries.PairingHeapImp.Heap.WF.nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L228-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"The well formedness predicate for a pairing heap.\nIt asserts that:\n* There is no more than one tree.\n* It is a `le`-min-heap (if `le` is well-behaved)\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.WF","kind":"inductive","line":221,"name":"Batteries.PairingHeapImp.Heap.WF","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L221-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NodeWF\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NodeWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"The well formedness predicate for a heap node.\nIt asserts that:\n* If `a` is added at the top to make the forest into a tree, the resulting tree\n  is a `le`-min-heap (if `le` is well-behaved)\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NodeWF","kind":"def","line":211,"name":"Batteries.PairingHeapImp.Heap.NodeWF","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L211-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toArrayUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to an array in arbitrary order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toArrayUnordered","kind":"def","line":207,"name":"Batteries.PairingHeapImp.Heap.toArrayUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L207-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toListUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to a list in arbitrary order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toListUnordered","kind":"def","line":203,"name":"Batteries.PairingHeapImp.Heap.toListUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L203-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.foldTree\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"`O(n)`. Fold a function over the tree structure to accumulate a value. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.foldTree","kind":"def","line":199,"name":"Batteries.PairingHeapImp.Heap.foldTree","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L199-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.foldTreeM\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.foldTreeM","kind":"def","line":194,"name":"Batteries.PairingHeapImp.Heap.foldTreeM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L194-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to a list in increasing order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toList","kind":"def","line":191,"name":"Batteries.PairingHeapImp.Heap.toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L191-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to an array in increasing order. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.toArray","kind":"def","line":188,"name":"Batteries.PairingHeapImp.Heap.toArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L188-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.fold\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.fold","kind":"def","line":181,"name":"Batteries.PairingHeapImp.Heap.fold","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L181-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.foldM\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.foldM","kind":"def","line":168,"name":"Batteries.PairingHeapImp.Heap.foldM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L168-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_tail?_lt\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_tail?_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail?\">tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span> → <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_tail?_lt","kind":"theorem","line":162,"name":"Batteries.PairingHeapImp.Heap.size_tail?_lt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L162-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_deleteMin_lt\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_deleteMin_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin\">deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_deleteMin_lt","kind":"theorem","line":158,"name":"Batteries.PairingHeapImp.Heap.size_deleteMin_lt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L158-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail\">tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_tail","kind":"theorem","line":152,"name":"Batteries.PairingHeapImp.Heap.size_tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L152-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail?\">tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_tail?","kind":"theorem","line":146,"name":"Batteries.PairingHeapImp.Heap.size_tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L146-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin\">deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_deleteMin","kind":"theorem","line":142,"name":"Batteries.PairingHeapImp.Heap.size_deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L142-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_combine\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.combine\">combine</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_combine","kind":"theorem","line":133,"name":"Batteries.PairingHeapImp.Heap.size_combine","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L133-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge\">merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_merge","kind":"theorem","line":127,"name":"Batteries.PairingHeapImp.Heap.size_merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L127-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_merge_node\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size_merge_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">s₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge\">merge</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\">node</a> <span class=\"fn\">a₁</span> <span class=\"fn\">c₁</span> <span class=\"fn\">s₁</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\">node</a> <span class=\"fn\">a₂</span> <span class=\"fn\">c₂</span> <span class=\"fn\">s₂</span>)</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c₂</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size_merge_node","kind":"theorem","line":123,"name":"Batteries.PairingHeapImp.Heap.size_merge_node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L123-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail\">tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_tail","kind":"theorem","line":117,"name":"Batteries.PairingHeapImp.Heap.noSibling_tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L117-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail?\">tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span> → <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_tail?","kind":"theorem","line":111,"name":"Batteries.PairingHeapImp.Heap.noSibling_tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L111-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin\">deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_deleteMin","kind":"theorem","line":107,"name":"Batteries.PairingHeapImp.Heap.noSibling_deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L107-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_combine\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.combine\">combine</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_combine","kind":"theorem","line":99,"name":"Batteries.PairingHeapImp.Heap.noSibling_combine","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L99-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">noSibling_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge\">merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.noSibling_merge","kind":"theorem","line":94,"name":"Batteries.PairingHeapImp.Heap.noSibling_merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L94-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.instDecidableNoSibling\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">instDecidableNoSibling</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.instDecidableNoSibling","kind":"instance","line":88,"name":"Batteries.PairingHeapImp.instDecidableNoSibling","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L88-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NoSibling</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\">Heap.node</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span> <a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.nil\">Heap.nil</a>)</span>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></div></div>","info":{"doc":"Or there is exactly one tree. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling.node","kind":"ctor","line":85,"name":"Batteries.PairingHeapImp.Heap.NoSibling.node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NoSibling</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.nil\">Heap.nil</a>.<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\">NoSibling</a></span></div></div>","info":{"doc":"An empty heap is no more than one tree. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling.nil","kind":"ctor","line":83,"name":"Batteries.PairingHeapImp.Heap.NoSibling.nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">NoSibling</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"A predicate says there is no more than one tree. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.NoSibling","kind":"inductive","line":81,"name":"Batteries.PairingHeapImp.Heap.NoSibling","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L81-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Amortized `O(log n)`. Remove the minimum element of the heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail","kind":"def","line":77,"name":"Batteries.PairingHeapImp.Heap.tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Amortized `O(log n)`. Get the tail of the pairing heap after removing the minimum element. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.tail?","kind":"def","line":73,"name":"Batteries.PairingHeapImp.Heap.tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L73-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>","info":{"doc":"Amortized `O(log n)`. Find and remove the the minimum element from the heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.deleteMin","kind":"def","line":68,"name":"Batteries.PairingHeapImp.Heap.deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"`O(1)`. Get the smallest element in the heap, if it has an element. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.head?","kind":"def","line":63,"name":"Batteries.PairingHeapImp.Heap.head?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L63-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.headD\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">headD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(1)`. Get the smallest element in the heap, including the passed in value `a`. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.headD","kind":"def","line":58,"name":"Batteries.PairingHeapImp.Heap.headD","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L58-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.combine\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Auxiliary for `Heap.deleteMin`: merge the forest in pairs. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.combine","kind":"def","line":53,"name":"Batteries.PairingHeapImp.Heap.combine","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L53-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"`O(1)`. Merge two heaps. Ignore siblings. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.merge","kind":"def","line":45,"name":"Batteries.PairingHeapImp.Heap.merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L45-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`O(1)`. Is the heap empty? ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.isEmpty","kind":"def","line":40,"name":"Batteries.PairingHeapImp.Heap.isEmpty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A node containing a single element `a`. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.singleton","kind":"def","line":37,"name":"Batteries.PairingHeapImp.Heap.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`O(n)`. The number of elements in the heap. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.size","kind":"def","line":32,"name":"Batteries.PairingHeapImp.Heap.size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L32-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.instReprHeap.repr\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">instReprHeap</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.instReprHeap.repr","kind":"def","line":30,"name":"Batteries.PairingHeapImp.instReprHeap.repr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.instReprHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">instReprHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.instReprHeap","kind":"instance","line":30,"name":"Batteries.PairingHeapImp.instReprHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">child </span><span class=\"fn\">sibling</span> : <span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A forest consists of a root `a`, a forest `child` elements greater than `a`,\nand another forest `sibling`. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.node","kind":"ctor","line":27,"name":"Batteries.PairingHeapImp.Heap.node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L27-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"An empty forest, which has depth `0`. ","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap.nil","kind":"ctor","line":25,"name":"Batteries.PairingHeapImp.Heap.nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L25-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap\"><span class=\"name\">Batteries</span>.<span class=\"name\">PairingHeapImp</span>.<span class=\"name\">Heap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A `Heap` is the nodes of the pairing heap.\nEach node have two pointers: `child` going to the first child of this node,\nand `sibling` goes to the next sibling of this tree.\nSo it actually encodes a forest where each node has children\n`node.child`, `node.child.sibling`, `node.child.sibling.sibling`, etc.\n\nEach edge in this forest denotes a `le a b` relation that has been checked, so\nthe root is smaller than everything else under it.\n","docLink":"./Batteries/Data/PairingHeap.html#Batteries.PairingHeapImp.Heap","kind":"inductive","line":14,"name":"Batteries.PairingHeapImp.Heap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/PairingHeap.lean#L14-L30"}}],"imports":["Init","Batteries.Classes.Order"],"instances":[{"className":"Repr","name":"Batteries.PairingHeapImp.instReprHeap","typeNames":["Batteries.PairingHeapImp.Heap"]},{"className":"Decidable","name":"Batteries.PairingHeapImp.instDecidableNoSibling","typeNames":["Batteries.PairingHeapImp.Heap.NoSibling"]},{"className":"Inhabited","name":"Batteries.PairingHeap.instInhabited","typeNames":["Batteries.PairingHeap"]}],"name":"Batteries.Data.PairingHeap"}