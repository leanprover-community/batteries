{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">contradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Meta.Contradiction.Config</a> := <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\">{</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Try to close the goal using \"contradictions\" such as\n- Contradictory hypotheses `h₁ : p` and `h₂ : ¬ p`.\n- Contradictory disequality `h : x ≠ x`.\n- Contradictory equality between different constructors, e.g., `h : List.nil = List.cons x xs`.\n- Empty inductive types, e.g., `x : Fin 0`.\n- Decidable propositions that evaluate to false, i.e., a hypothesis `h : p` s.t. `decide p` reduces to `false`.\n  This is only tried if `Config.useDecide = true`.\n\nThrow exception if goal failed to be closed.\n","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction","kind":"def","line":219,"name":"Lean.MVarId.contradiction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L219-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">contradictionCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if goal `mvarId` has contradictory hypotheses.\nSee `MVarId.contradiction` for the list of tests performed by this method.\n","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore","kind":"def","line":153,"name":"Lean.MVarId.contradictionCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L153-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.mkGenDiseqMask\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkGenDiseqMask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Given `e` s.t. `isGenDiseq e`, generate a bit-mask `mask` s.t. `mask[i] = true` iff\nthe `i`-th binder is an equality without forward dependencies.\n\nSee `processGenDiseq`\n","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.mkGenDiseqMask","kind":"def","line":97,"name":"Lean.Meta.mkGenDiseqMask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L97-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim","kind":"opaque","line":58,"name":"Lean.Meta.ElimEmptyInductive.elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L58-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">instMonadBacktrackSavedStateM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadBacktrack.html#Lean.MonadBacktrack\">MonadBacktrack</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\">M</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","kind":"instance","line":54,"name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M","kind":"def","line":52,"name":"Lean.Meta.ElimEmptyInductive.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.genDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">genDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Support for hypotheses such as\n```\nh : (x y : Nat) (ys : List Nat) → x = 0 → y::ys = [a, b, c] → False\n```\nThis kind of hypotheses appear when proving conditional equation theorems for match expressions. ","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.genDiseq","kind":"def","line":29,"name":"Lean.Meta.Contradiction.Config.genDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.searchFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">searchFuel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"When checking for empty types, `searchFuel` specifies the number of goals visited. ","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.searchFuel","kind":"def","line":23,"name":"Lean.Meta.Contradiction.Config.searchFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.emptyType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">emptyType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check whether any of the hypotheses is an empty type. ","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.emptyType","kind":"def","line":21,"name":"Lean.Meta.Contradiction.Config.emptyType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.useDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">useDecide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.useDecide","kind":"def","line":19,"name":"Lean.Meta.Contradiction.Config.useDecide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useDecide </span><span class=\"fn\">emptyType</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searchFuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">genDiseq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk","kind":"ctor","line":18,"name":"Lean.Meta.Contradiction.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config","kind":"structure","line":18,"name":"Lean.Meta.Contradiction.Config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Contradiction.lean#L18-L29"}}],"imports":["Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Simp.Main"],"instances":[{"className":"Lean.MonadBacktrack","name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","typeNames":["Lean.Meta.SavedState","Lean.Meta.ElimEmptyInductive.M"]}],"name":"Lean.Meta.Tactic.Contradiction"}