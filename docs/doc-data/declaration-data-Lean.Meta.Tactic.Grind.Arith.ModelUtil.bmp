{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.traceModel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">traceModel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceClass</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">model</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If the given trace class is enabled, trace the model using the class. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.traceModel","kind":"def","line":121,"name":"Lean.Meta.Grind.Arith.traceModel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/ModelUtil.lean#L121-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.finalizeModel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">finalizeModel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isTarget</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">model</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>))</span></span></div></div>","info":{"doc":"Converts the given model into a sorted array of pairs `(e, v)` representing assignments `e := v`.\n`isTarget` is a predicate used to detect terms that must be in the model but have not been assigned a value (see: `assignUnassigned`)\nThe pairs are sorted using `e`s generation and then `Expr.lt`.\nOnly terms s.t. `isInterpretedTerm e = false` are included into the resulting array.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.finalizeModel","kind":"def","line":107,"name":"Lean.Meta.Grind.Arith.finalizeModel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/ModelUtil.lean#L107-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.assignEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">assignEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>","info":{"doc":"Adds the assignments `e' := v` to `a` for each `e'` in the equivalence class os `e`.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.assignEqc","kind":"def","line":65,"name":"Lean.Meta.Grind.Arith.assignEqc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/ModelUtil.lean#L65-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.isInterpretedTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isInterpretedTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `e` should be treated as an interpreted value by the arithmetic modules.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.isInterpretedTerm","kind":"def","line":56,"name":"Lean.Meta.Grind.Arith.isInterpretedTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/ModelUtil.lean#L56-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.pickUnusedValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">pickUnusedValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alreadyUsed</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Returns an integer value `i` for assigning to `e` s.t. adding `e := i` to `a` will not falsify any disequality\nand `i` is not in `alreadyUsed`.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/ModelUtil.html#Lean.Meta.Grind.Arith.pickUnusedValue","kind":"def","line":41,"name":"Lean.Meta.Grind.Arith.pickUnusedValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/ModelUtil.lean#L41-L54"}}],"imports":["Lean.Meta.Tactic.Grind.Types","Init.Data.Rat.Basic","Lean.Meta.Tactic.Grind.Arith.Util","Init.Grind.Module.Envelope"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Arith.ModelUtil"}