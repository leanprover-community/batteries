{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.cmdCodeActionProvider\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">cmdCodeActionProvider</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Basic.html#Lean.Server.CodeActionProvider\">Server.CodeActionProvider</a></div></div>","info":{"doc":"A code action which calls all `@[command_code_action]` code actions on each command.\n","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.cmdCodeActionProvider","kind":"def","line":170,"name":"Lean.CodeAction.cmdCodeActionProvider","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L170-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.findInfoTree?\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findInfoTree?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgtRange</span> : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Elab.ContextInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Elab.ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Elab.Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonicalOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">Elab.ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></div></div>","info":{"doc":"Returns the info tree corresponding to a syntax, using `kind` and `range` for identification.\n(This is not foolproof, but it is a fairly accurate proxy for `Syntax` equality and a lot cheaper\nthan deep comparison.)\n","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.findInfoTree?","kind":"opaque","line":146,"name":"Lean.CodeAction.findInfoTree?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L146-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.findTactic?\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findTactic?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preferred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult\">FindTacticResult</a></span></div></div>","info":{"doc":"Find the syntax on which to trigger tactic code actions.\nThis is a pure syntax pass, without regard to elaboration information.\n\n* `preferred : String.Pos → Bool`: used to select \"preferred `tacticSeq`s\" based on the cursor\n  column, when the cursor selection would otherwise be ambiguous. For example, in:\n  ```\n  · foo\n    · bar\n      baz\n    |\n  ```\n  where the cursor is at the `|`, we select the `tacticSeq` starting with `foo`, while if the\n  cursor was indented to align with `baz` then we would select the `bar; baz` sequence instead.\n\n* `range`: the cursor selection. We do not do much with range selections; if a range selection\n  covers more than one tactic then we abort.\n\n* `root`: the root syntax to process\n\nThe return value is either a selected tactic, or a selected point in a tactic sequence.\n","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.findTactic?","kind":"def","line":60,"name":"Lean.CodeAction.findTactic?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L60-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult.tacticSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">FindTacticResult</span>.<span class=\"name\">tacticSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preferred</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insertIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Syntax.Stack</a> → <a href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult\">FindTacticResult</a></span></div></div>","info":{"doc":"The cursor is between tactics, and the nearest enclosing range is a tactic sequence.\nCode actions will insert tactics at index `insertIdx` into the syntax\n(which is a nullNode of `tactic;*` inside a `tacticSeqBracketed` or `tacticSeq1Indented`). ","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult.tacticSeq","kind":"ctor","line":55,"name":"Lean.CodeAction.FindTacticResult.tacticSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L55-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">FindTacticResult</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Syntax.Stack</a> → <a href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult\">FindTacticResult</a></span></div></div>","info":{"doc":"The nearest enclosing tactic is a tactic, with the given syntax stack. ","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult.tactic","kind":"ctor","line":53,"name":"Lean.CodeAction.FindTacticResult.tactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">FindTacticResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The return value of `findTactic?`.\nThis is the syntax for which code actions will be triggered.\n","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.FindTacticResult","kind":"inductive","line":48,"name":"Lean.CodeAction.FindTacticResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L48-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.holeCodeActionProvider\"><span class=\"name\">Lean</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">holeCodeActionProvider</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Basic.html#Lean.Server.CodeActionProvider\">Server.CodeActionProvider</a></div></div>","info":{"doc":"A code action which calls all `@[hole_code_action]` code actions on each hole\n(`?_`, `_`, or `sorry`).\n","docLink":"./Lean/Server/CodeActions/Provider.html#Lean.CodeAction.holeCodeActionProvider","kind":"def","line":30,"name":"Lean.CodeAction.holeCodeActionProvider","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/CodeActions/Provider.lean#L30-L46"}}],"imports":["Std.Data.Iterators.Producers.Range","Std.Data.Iterators.Combinators.StepSize","Lean.Elab.BuiltinTerm","Lean.Elab.BuiltinNotation","Lean.Server.CodeActions.Attr"],"instances":[],"name":"Lean.Server.CodeActions.Provider"}