{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cleanup.html#Lean.MVarId.cleanup\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">cleanup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPreserve</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indirectProps</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Auxiliary tactic for cleaning the local context. It removes local declarations (aka hypotheses) that are *not* relevant.\nWe say a variable `x` is \"relevant\" if\n- It occurs in the `toPreserve` array, or\n- It occurs in the target type, or\n- There is a relevant variable `y` that depends on `x`, or\n- If `indirectProps` is true, the type of `x` is a proposition and it depends on a relevant variable `y`.\n- If `indirectProps` is true, `x` is a local declartation and its value mentions a relevant variable `y`.\n\nBy default, `toPreserve := #[]` and `indirectProps := true`. These settings are used in the mathlib tactic `extract_goal`\nto give the user more control over which variables to include.\n","docLink":"./Lean/Meta/Tactic/Cleanup.html#Lean.MVarId.cleanup","kind":"def","line":68,"name":"Lean.MVarId.cleanup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Cleanup.lean#L68-L81"}}],"imports":["Lean.Meta.Basic","Lean.Meta.CollectFVars","Lean.Meta.Tactic.Clear"],"instances":[],"name":"Lean.Meta.Tactic.Cleanup"}