{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.insertUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">insertUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"Unexpander for the `{ x, y, ... }` notation. ","docLink":"./Init/NotationExtra.html#Lean.insertUnexpander","kind":"def","line":354,"name":"Lean.insertUnexpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L354-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.singletonUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">singletonUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"Unexpander for the `{ x }` notation. ","docLink":"./Init/NotationExtra.html#Lean.singletonUnexpander","kind":"def","line":348,"name":"Lean.singletonUnexpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L348-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«term{_}»\"><span class=\"name\">«term{_}»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`{ a, b, c }` syntax, powered by the `Singleton` and `Insert` typeclasses. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `{x}` in identifiers is `singleton`.","docLink":"./Init/NotationExtra.html#«term{_}»","kind":"def","line":337,"name":"«term{_}»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L337-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.«term_Matches_|»\"><span class=\"name\">Lean</span>.<span class=\"name\">«term_Matches_|»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">TrailingParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.«term_Matches_|»","kind":"def","line":332,"name":"Lean.«term_Matches_|»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L332-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.solveTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">solveTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Similar to `first`, but succeeds only if one the given tactics solves the current goal.\n","docLink":"./Init/NotationExtra.html#Lean.solveTactic","kind":"def","line":324,"name":"Lean.solveTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L324-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.cdot\"><span class=\"name\">Lean</span>.<span class=\"name\">cdot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`· tac` focuses on the main goal and tries to solve it using `tac`, or else fails. ","docLink":"./Init/NotationExtra.html#Lean.cdot","kind":"def","line":321,"name":"Lean.cdot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L321-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.cdotTk\"><span class=\"name\">Lean</span>.<span class=\"name\">cdotTk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.cdotTk","kind":"def","line":320,"name":"Lean.cdotTk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L320-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.Parser.Command.classAbbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Command</span>.<span class=\"name\">classAbbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Expands\n```\nclass abbrev C <params> := D_1, ..., D_n\n```\ninto\n```\nclass C <params> extends D_1, ..., D_n\nattribute [instance] C.mk\n```\n","docLink":"./Init/NotationExtra.html#Lean.Parser.Command.classAbbrev","kind":"def","line":298,"name":"Lean.Parser.Command.classAbbrev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L298-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#tacticFunext___\"><span class=\"name\">tacticFunext___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Apply function extensionality and introduce new hypotheses.\nThe tactic `funext` will keep applying the `funext` lemma until the goal target is not reducible to\n```\n  |-  ((fun x => ...) = (fun x => ...))\n```\nThe variant `funext h₁ ... hₙ` applies `funext` `n` times, and uses the given identifiers to name the new hypotheses.\nPatterns can be used like in the `intro` tactic. Example, given a goal\n```\n  |-  ((fun x : Nat × Bool => ...) = (fun x => ...))\n```\n`funext (a, b)` applies `funext` once and performs pattern matching on the newly introduced pair.\n","docLink":"./Init/NotationExtra.html#tacticFunext___","kind":"def","line":266,"name":"tacticFunext___","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L266-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray8\"><span class=\"name\">unexpandMkArray8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray8","kind":"def","line":262,"name":"unexpandMkArray8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L262-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray7\"><span class=\"name\">unexpandMkArray7</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray7","kind":"def","line":258,"name":"unexpandMkArray7","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L258-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray6\"><span class=\"name\">unexpandMkArray6</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray6","kind":"def","line":254,"name":"unexpandMkArray6","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L254-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray5\"><span class=\"name\">unexpandMkArray5</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray5","kind":"def","line":250,"name":"unexpandMkArray5","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L250-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray4\"><span class=\"name\">unexpandMkArray4</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray4","kind":"def","line":246,"name":"unexpandMkArray4","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L246-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray3\"><span class=\"name\">unexpandMkArray3</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray3","kind":"def","line":242,"name":"unexpandMkArray3","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L242-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray2\"><span class=\"name\">unexpandMkArray2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray2","kind":"def","line":238,"name":"unexpandMkArray2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L238-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray1\"><span class=\"name\">unexpandMkArray1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray1","kind":"def","line":234,"name":"unexpandMkArray1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L234-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandMkArray0\"><span class=\"name\">unexpandMkArray0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandMkArray0","kind":"def","line":231,"name":"unexpandMkArray0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L231-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandArrayEmpty\"><span class=\"name\">unexpandArrayEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandArrayEmpty","kind":"def","line":228,"name":"unexpandArrayEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L228-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandGetElem?\"><span class=\"name\">unexpandGetElem?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandGetElem?","kind":"def","line":224,"name":"unexpandGetElem?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L224-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandGetElem!\"><span class=\"name\">unexpandGetElem!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandGetElem!","kind":"def","line":220,"name":"unexpandGetElem!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L220-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandGetElem\"><span class=\"name\">unexpandGetElem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandGetElem","kind":"def","line":216,"name":"unexpandGetElem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L216-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandTSepArray\"><span class=\"name\">unexpandTSepArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandTSepArray","kind":"def","line":212,"name":"unexpandTSepArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L212-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandTSyntaxArray\"><span class=\"name\">unexpandTSyntaxArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandTSyntaxArray","kind":"def","line":208,"name":"unexpandTSyntaxArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L208-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandTSyntax\"><span class=\"name\">unexpandTSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandTSyntax","kind":"def","line":204,"name":"unexpandTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L204-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandSubtype\"><span class=\"name\">unexpandSubtype</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandSubtype","kind":"def","line":199,"name":"unexpandSubtype","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L199-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandPSigma\"><span class=\"name\">unexpandPSigma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandPSigma","kind":"def","line":195,"name":"unexpandPSigma","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L195-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandSigma\"><span class=\"name\">unexpandSigma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandSigma","kind":"def","line":191,"name":"unexpandSigma","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L191-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandExists\"><span class=\"name\">unexpandExists</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandExists","kind":"def","line":185,"name":"unexpandExists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L185-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandEqRec\"><span class=\"name\">unexpandEqRec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandEqRec","kind":"def","line":181,"name":"unexpandEqRec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L181-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandEqNDRec\"><span class=\"name\">unexpandEqNDRec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandEqNDRec","kind":"def","line":177,"name":"unexpandEqNDRec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L177-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandIte\"><span class=\"name\">unexpandIte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandIte","kind":"def","line":173,"name":"unexpandIte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L173-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandProdMk\"><span class=\"name\">unexpandProdMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandProdMk","kind":"def","line":168,"name":"unexpandProdMk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L168-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandListToArray\"><span class=\"name\">unexpandListToArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandListToArray","kind":"def","line":164,"name":"unexpandListToArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandListCons\"><span class=\"name\">unexpandListCons</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandListCons","kind":"def","line":155,"name":"unexpandListCons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L155-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandListNil\"><span class=\"name\">unexpandListNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandListNil","kind":"def","line":152,"name":"unexpandListNil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#unexpandUnit\"><span class=\"name\">unexpandUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#unexpandUnit","kind":"def","line":149,"name":"unexpandUnit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L149-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.convCalc_\"><span class=\"name\">Lean</span>.<span class=\"name\">convCalc_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Step-wise reasoning over transitive relations.\n```\ncalc\n  a = b := pab\n  b = c := pbc\n  ...\n  y = z := pyz\n```\nproves `a = z` from the given step-wise proofs. `=` can be replaced with any\nrelation implementing the typeclass `Trans`. Instead of repeating the right-\nhand sides, subsequent left-hand sides can be replaced with `_`.\n```\ncalc\n  a = b := pab\n  _ = c := pbc\n  ...\n  _ = z := pyz\n```\nIt is also possible to write the *first* relation as `<lhs>\\n  _ = <rhs> :=\n<proof>`. This is useful for aligning relation symbols, especially on longer:\nidentifiers:\n```\ncalc abc\n  _ = bce := pabce\n  _ = cef := pbcef\n  ...\n  _ = xyz := pwxyz\n```\n\n`calc` works as a term, as a tactic or as a `conv` tactic.\n\nSee [Theorem Proving in Lean 4][tpil4] for more information.\n\n[tpil4]: https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#calculational-proofs\n","docLink":"./Init/NotationExtra.html#Lean.convCalc_","kind":"def","line":145,"name":"Lean.convCalc_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L145-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.calcTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">calcTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Step-wise reasoning over transitive relations.\n```\ncalc\n  a = b := pab\n  b = c := pbc\n  ...\n  y = z := pyz\n```\nproves `a = z` from the given step-wise proofs. `=` can be replaced with any\nrelation implementing the typeclass `Trans`. Instead of repeating the right-\nhand sides, subsequent left-hand sides can be replaced with `_`.\n```\ncalc\n  a = b := pab\n  _ = c := pbc\n  ...\n  _ = z := pyz\n```\nIt is also possible to write the *first* relation as `<lhs>\\n  _ = <rhs> :=\n<proof>`. This is useful for aligning relation symbols, especially on longer:\nidentifiers:\n```\ncalc abc\n  _ = bce := pabce\n  _ = cef := pbcef\n  ...\n  _ = xyz := pwxyz\n```\n\n`calc` works as a term, as a tactic or as a `conv` tactic.\n\nSee [Theorem Proving in Lean 4][tpil4] for more information.\n\n[tpil4]: https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#calculational-proofs\n","docLink":"./Init/NotationExtra.html#Lean.calcTactic","kind":"def","line":141,"name":"Lean.calcTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.calc\"><span class=\"name\">Lean</span>.<span class=\"name\">calc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Step-wise reasoning over transitive relations.\n```\ncalc\n  a = b := pab\n  b = c := pbc\n  ...\n  y = z := pyz\n```\nproves `a = z` from the given step-wise proofs. `=` can be replaced with any\nrelation implementing the typeclass `Trans`. Instead of repeating the right-\nhand sides, subsequent left-hand sides can be replaced with `_`.\n```\ncalc\n  a = b := pab\n  _ = c := pbc\n  ...\n  _ = z := pyz\n```\nIt is also possible to write the *first* relation as `<lhs>\\n  _ = <rhs> :=\n<proof>`. This is useful for aligning relation symbols, especially on longer:\nidentifiers:\n```\ncalc abc\n  _ = bce := pabce\n  _ = cef := pbcef\n  ...\n  _ = xyz := pwxyz\n```\n\n`calc` works as a term, as a tactic or as a `conv` tactic.\n\nSee [Theorem Proving in Lean 4][tpil4] for more information.\n\n[tpil4]: https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#calculational-proofs\n","docLink":"./Init/NotationExtra.html#Lean.calc","kind":"def","line":104,"name":"Lean.calc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L104-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.calcSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">calcSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.calcSteps","kind":"def","line":102,"name":"Lean.calcSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.calcStep\"><span class=\"name\">Lean</span>.<span class=\"name\">calcStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.calcStep","kind":"def","line":101,"name":"Lean.calcStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.calcFirstStep\"><span class=\"name\">Lean</span>.<span class=\"name\">calcFirstStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.calcFirstStep","kind":"def","line":99,"name":"Lean.calcFirstStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«term_×'__1»\"><span class=\"name\">«term_×'__1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#«term_×'__1»","kind":"def","line":94,"name":"«term_×'__1»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«term_×__1»\"><span class=\"name\">«term_×__1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#«term_×__1»","kind":"def","line":93,"name":"«term_×__1»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«termΣ'_,_»\"><span class=\"name\">«termΣ'_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#«termΣ'_,_»","kind":"def","line":92,"name":"«termΣ'_,_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«termΣ_,_»\"><span class=\"name\">«termΣ_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#«termΣ_,_»","kind":"def","line":91,"name":"«termΣ_,_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«termExists_,_»\"><span class=\"name\">«termExists_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#«termExists_,_»","kind":"def","line":90,"name":"«termExists_,_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#«term∃_,_»\"><span class=\"name\">«term∃_,_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#«term∃_,_»","kind":"def","line":89,"name":"«term∃_,_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.«command__Unif_hint____Where_|_-⊢_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«command__Unif_hint____Where_|_-⊢_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.«command__Unif_hint____Where_|_-⊢_»","kind":"def","line":69,"name":"Lean.«command__Unif_hint____Where_|_-⊢_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.unifConstraintElem\"><span class=\"name\">Lean</span>.<span class=\"name\">unifConstraintElem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.unifConstraintElem","kind":"def","line":67,"name":"Lean.unifConstraintElem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.unifConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">unifConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.unifConstraint","kind":"def","line":66,"name":"Lean.unifConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.expandBracketedBinders\"><span class=\"name\">Lean</span>.<span class=\"name\">expandBracketedBinders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">combinatorDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bracketedExplicitBinders </span><span class=\"fn\">body</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.expandBracketedBinders","kind":"def","line":62,"name":"Lean.expandBracketedBinders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L62-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.expandExplicitBinders\"><span class=\"name\">Lean</span>.<span class=\"name\">expandExplicitBinders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">combinatorDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicitBinders </span><span class=\"fn\">body</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.expandExplicitBinders","kind":"def","line":50,"name":"Lean.expandExplicitBinders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L50-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.expandBracketedBindersAux\"><span class=\"name\">Lean</span>.<span class=\"name\">expandBracketedBindersAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">combinator</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.expandBracketedBindersAux","kind":"def","line":40,"name":"Lean.expandBracketedBindersAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L40-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.expandExplicitBindersAux\"><span class=\"name\">Lean</span>.<span class=\"name\">expandExplicitBindersAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">combinator</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idents</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.expandExplicitBindersAux","kind":"def","line":26,"name":"Lean.expandExplicitBindersAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L26-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.explicitBinders\"><span class=\"name\">Lean</span>.<span class=\"name\">explicitBinders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.explicitBinders","kind":"def","line":23,"name":"Lean.explicitBinders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.bracketedExplicitBinders\"><span class=\"name\">Lean</span>.<span class=\"name\">bracketedExplicitBinders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.bracketedExplicitBinders","kind":"def","line":22,"name":"Lean.bracketedExplicitBinders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/NotationExtra.html#Lean.unbracketedExplicitBinders\"><span class=\"name\">Lean</span>.<span class=\"name\">unbracketedExplicitBinders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/NotationExtra.html#Lean.unbracketedExplicitBinders","kind":"def","line":21,"name":"Lean.unbracketedExplicitBinders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/NotationExtra.lean#L21-L21"}}],"imports":["Init.Conv","Init.Meta","Init.While"],"instances":[],"name":"Init.NotationExtra"}