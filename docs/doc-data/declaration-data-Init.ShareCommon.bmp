{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.shareCommon'\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">shareCommon'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"A more restrictive but efficient max sharing primitive.\n\nRemark: it optimizes the number of RC operations, and the strategy for caching results.\n","docLink":"./Init/ShareCommon.html#ShareCommon.shareCommon'","kind":"def","line":110,"name":"ShareCommon.shareCommon'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L110-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonM.run\"><span class=\"name\">ShareCommonM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommonM\">ShareCommonM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommonM.run","kind":"def","line":108,"name":"ShareCommonM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT.run\"><span class=\"name\">ShareCommonT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommonT\">ShareCommonT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommonT.run","kind":"def","line":107,"name":"ShareCommonT.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT.monadShareCommon\"><span class=\"name\">ShareCommonT</span>.<span class=\"name\">monadShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">(<a href=\"./Init/ShareCommon.html#ShareCommonT\">ShareCommonT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommonT.monadShareCommon","kind":"instance","line":104,"name":"ShareCommonT.monadShareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L104-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT.withShareCommon\"><span class=\"name\">ShareCommonT</span>.<span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommonT\">ShareCommonT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommonT.withShareCommon","kind":"def","line":101,"name":"ShareCommonT.withShareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L101-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonM\"><span class=\"name\">ShareCommonM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommonM","kind":"def","line":99,"name":"ShareCommonM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommonT\"><span class=\"name\">ShareCommonT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">ShareCommon.StateFactory</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommonT","kind":"def","line":98,"name":"ShareCommonT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#shareCommonM\"><span class=\"name\">shareCommonM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#shareCommonM","kind":"def","line":95,"name":"shareCommonM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L95-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#withShareCommon\"><span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#withShareCommon","kind":"def","line":93,"name":"withShareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#MonadShareCommon.withShareCommon\"><span class=\"name\">MonadShareCommon</span>.<span class=\"name\">withShareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#MonadShareCommon.withShareCommon","kind":"def","line":91,"name":"MonadShareCommon.withShareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#MonadShareCommon.mk\"><span class=\"name\">MonadShareCommon</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">withShareCommon</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#MonadShareCommon\">MonadShareCommon</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#MonadShareCommon.mk","kind":"ctor","line":90,"name":"MonadShareCommon.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#MonadShareCommon\"><span class=\"name\">MonadShareCommon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#MonadShareCommon","kind":"class","line":90,"name":"MonadShareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L90-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.State.shareCommon\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">State</span>.<span class=\"name\">shareCommon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.State.shareCommon","kind":"def","line":85,"name":"ShareCommon.State.shareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.instInhabitedState\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.instInhabitedState","kind":"instance","line":83,"name":"ShareCommon.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.State.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.State.mk","kind":"opaque","line":82,"name":"ShareCommon.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.mkStateImpl\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">mkStateImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.mkStateImpl","kind":"def","line":81,"name":"ShareCommon.mkStateImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.instNonemptyState\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/ShareCommon.html#ShareCommon.State\">State</a> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.instNonemptyState","kind":"instance","line":79,"name":"ShareCommon.instNonemptyState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.State\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.State","kind":"def","line":78,"name":"ShareCommon.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StatePointed\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StatePointed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>","info":{"doc":"Internally `State` is implemented as a pair `ObjectMap` and `ObjectSet` ","docLink":"./Init/ShareCommon.html#ShareCommon.StatePointed","kind":"opaque","line":76,"name":"ShareCommon.StatePointed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory.get\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory.get","kind":"def","line":74,"name":"ShareCommon.StateFactory.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory.mk","kind":"opaque","line":71,"name":"ShareCommon.StateFactory.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory.mkImpl\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span>.<span class=\"name\">mkImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory.mkImpl","kind":"def","line":57,"name":"ShareCommon.StateFactory.mkImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L57-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">setInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setInsert","kind":"def","line":55,"name":"ShareCommon.StateFactoryBuilder.setInsert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">setFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.setFind?","kind":"def","line":54,"name":"ShareCommon.StateFactoryBuilder.setFind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkSet\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mkSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\">Set</a></span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkSet","kind":"def","line":53,"name":"ShareCommon.StateFactoryBuilder.mkSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">Set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Set","kind":"def","line":52,"name":"ShareCommon.StateFactoryBuilder.Set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mapInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapInsert","kind":"def","line":51,"name":"ShareCommon.StateFactoryBuilder.mapInsert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mapFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mapFind?","kind":"def","line":50,"name":"ShareCommon.StateFactoryBuilder.mapFind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkMap\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mkMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\">Map</a></span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mkMap","kind":"def","line":49,"name":"ShareCommon.StateFactoryBuilder.mkMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">Map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">_β</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.Map","kind":"def","line":48,"name":"ShareCommon.StateFactoryBuilder.Map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Map</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <a href=\"./foundational_types.html\">Type</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkMap</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapFind?</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapInsert</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">Map</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Set</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <a href=\"./foundational_types.html\">Type</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSet</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setFind?</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setInsert</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">Set</span> <span class=\"fn\">α</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\">StateFactoryBuilder</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder.mk","kind":"ctor","line":47,"name":"ShareCommon.StateFactoryBuilder.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryBuilder","kind":"structure","line":47,"name":"ShareCommon.StateFactoryBuilder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L47-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.hash\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.Object.hash","kind":"opaque","line":44,"name":"ShareCommon.Object.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.eq\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.Object.eq","kind":"opaque","line":41,"name":"ShareCommon.Object.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.instNonemptyStateFactory\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">instNonemptyStateFactory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\">StateFactory</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.instNonemptyStateFactory","kind":"instance","line":39,"name":"ShareCommon.instNonemptyStateFactory","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactory\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactory","kind":"def","line":38,"name":"ShareCommon.StateFactory","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryPointed\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryPointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryPointed","kind":"opaque","line":37,"name":"ShareCommon.StateFactoryPointed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">setInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setInsert","kind":"def","line":35,"name":"ShareCommon.StateFactoryImpl.setInsert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">setFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.setFind?","kind":"def","line":34,"name":"ShareCommon.StateFactoryImpl.setFind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapInsert\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mapInsert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">v</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapInsert","kind":"def","line":33,"name":"ShareCommon.StateFactoryImpl.mapInsert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapFind?\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mapFind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mapFind?","kind":"def","line":32,"name":"ShareCommon.StateFactoryImpl.mapFind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mkState\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mkState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\">Map</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\">Set</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mkState","kind":"def","line":31,"name":"ShareCommon.StateFactoryImpl.mkState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">Set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Set","kind":"def","line":30,"name":"ShareCommon.StateFactoryImpl.Set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">Map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.Map","kind":"def","line":30,"name":"ShareCommon.StateFactoryImpl.Map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mk\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Map </span><span class=\"fn\">Set</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkState</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\">Map</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">Set</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapFind?</span> : <span class=\"fn\"><span class=\"fn\">Map</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapInsert</span> : <span class=\"fn\"><span class=\"fn\">Map</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\">Map</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setFind?</span> : <span class=\"fn\"><span class=\"fn\">Set</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setInsert</span> : <span class=\"fn\"><span class=\"fn\">Set</span> → <span class=\"fn\"><a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a> → <span class=\"fn\">Set</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\">StateFactoryImpl</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl.mk","kind":"ctor","line":29,"name":"ShareCommon.StateFactoryImpl.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">StateFactoryImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.StateFactoryImpl","kind":"structure","line":29,"name":"ShareCommon.StateFactoryImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L29-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.ptrHash\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">ptrHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.Object.ptrHash","kind":"def","line":26,"name":"ShareCommon.Object.ptrHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object.ptrEq\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span>.<span class=\"name\">ptrEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/ShareCommon.html#ShareCommon.Object\">Object</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.Object.ptrEq","kind":"def","line":23,"name":"ShareCommon.Object.ptrEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L23-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/ShareCommon.html#ShareCommon.Object\"><span class=\"name\">ShareCommon</span>.<span class=\"name\">Object</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/ShareCommon.html#ShareCommon.Object","kind":"def","line":21,"name":"ShareCommon.Object","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/ShareCommon.lean#L21-L21"}}],"imports":["Init.Data.UInt.Basic"],"instances":[{"className":"Nonempty","name":"ShareCommon.instNonemptyStateFactory","typeNames":["ShareCommon.StateFactory"]},{"className":"Nonempty","name":"ShareCommon.instNonemptyState","typeNames":["ShareCommon.State"]},{"className":"Inhabited","name":"ShareCommon.instInhabitedState","typeNames":["ShareCommon.State"]},{"className":"MonadShareCommon","name":"ShareCommonT.monadShareCommon","typeNames":["ShareCommonT"]}],"name":"Init.ShareCommon"}