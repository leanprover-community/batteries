{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Fin/Iterate.html#Fin.hIterate_eq\"><span class=\"name\">Fin</span>.<span class=\"name\">hIterate_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">state</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\">state</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">state</span> (<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Fin/Iterate.html#Fin.hIterate\">hIterate</a> <span class=\"fn\">P</span> <span class=\"fn\">s</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">state</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Fin/Iterate.html#Fin.hIterate_eq","kind":"theorem","line":98,"name":"Fin.hIterate_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Fin/Iterate.lean#L98-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Fin/Iterate.html#Fin.hIterate_elim\"><span class=\"name\">Fin</span>.<span class=\"name\">hIterate_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">0</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) (<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> (<span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">k</span> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Fin/Iterate.html#Fin.hIterate\">hIterate</a> <span class=\"fn\">P</span> <span class=\"fn\">s</span> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Fin/Iterate.html#Fin.hIterate_elim","kind":"theorem","line":85,"name":"Fin.hIterate_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Fin/Iterate.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Fin/Iterate.html#Fin.hIterate\"><span class=\"name\">Fin</span>.<span class=\"name\">hIterate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Applies an index-dependent function to all the values less than the given bound `n`, starting at\n`0` with an accumulator.\n\nConcretely, `Fin.hIterate P init f` is equal to\n```lean\n  init |> f 0 |> f 1 |> ... |> f (n-1)\n```\n\nTheorems about `Fin.hIterate` can be proven using the general theorem `Fin.hIterate_elim` or other more\nspecialized theorems.\n\n`Fin.hIterateFrom` is a variant that takes a custom starting value instead of `0`.\n ","docLink":"./Init/Data/Fin/Iterate.html#Fin.hIterate","kind":"def","line":39,"name":"Fin.hIterate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Fin/Iterate.lean#L39-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Fin/Iterate.html#Fin.hIterateFrom\"><span class=\"name\">Fin</span>.<span class=\"name\">hIterateFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ubnd</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"Applies an index-dependent function `f` to all of the values in `[i:n]`, starting at `i` with an\ninitial accumulator `a`.\n\nConcretely, `Fin.hIterateFrom P f i a` is equal to\n```lean\n  a |> f i |> f (i + 1) |> ... |> f (n - 1)\n```\n\nTheorems about `Fin.hIterateFrom` can be proven using the general theorem `Fin.hIterateFrom_elim` or\nother more specialized theorems.\n\n`Fin.hIterate` is a variant that always starts at `0`.\n","docLink":"./Init/Data/Fin/Iterate.html#Fin.hIterateFrom","kind":"def","line":15,"name":"Fin.hIterateFrom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Fin/Iterate.lean#L15-L37"}}],"imports":["Init.PropLemmas"],"instances":[],"name":"Init.Data.Fin.Iterate"}