{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono","kind":"def","line":442,"name":"Lean.Compiler.LCNF.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L442-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono","kind":"def","line":431,"name":"Lean.Compiler.LCNF.Decl.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L431-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono","kind":"opaque","line":356,"name":"Lean.Compiler.LCNF.Code.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L356-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">trivialStructToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Eliminate `cases` for trivial structure. See `hasTrivialStructure?` ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono","kind":"opaque","line":342,"name":"Lean.Compiler.LCNF.trivialStructToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L342-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesTaskToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesTaskToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Task</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `Task. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesTaskToMono","kind":"opaque","line":331,"name":"Lean.Compiler.LCNF.casesTaskToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L331-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesThunkToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesThunkToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Thunk</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `Thunk. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesThunkToMono","kind":"opaque","line":311,"name":"Lean.Compiler.LCNF.casesThunkToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L311-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesStringToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesStringToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`String</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `String. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesStringToMono","kind":"opaque","line":300,"name":"Lean.Compiler.LCNF.casesStringToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L300-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesFloatArrayToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesFloatArrayToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`FloatArray</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `FloatArray. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesFloatArrayToMono","kind":"opaque","line":289,"name":"Lean.Compiler.LCNF.casesFloatArrayToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L289-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesByteArrayToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesByteArrayToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`ByteArray</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `ByteArray. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesByteArrayToMono","kind":"opaque","line":278,"name":"Lean.Compiler.LCNF.casesByteArrayToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L278-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesArrayToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesArrayToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Array</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `Array. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesArrayToMono","kind":"opaque","line":267,"name":"Lean.Compiler.LCNF.casesArrayToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L267-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesUIntToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesUIntToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uintName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">uintName</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `UInt` types. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesUIntToMono","kind":"opaque","line":256,"name":"Lean.Compiler.LCNF.casesUIntToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L256-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesIntToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesIntToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Int</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `Int`. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesIntToMono","kind":"opaque","line":231,"name":"Lean.Compiler.LCNF.casesIntToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L231-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesNatToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">casesNatToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Nat</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Eliminate `cases` for `Nat`. ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.casesNatToMono","kind":"opaque","line":210,"name":"Lean.Compiler.LCNF.casesNatToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L210-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">decToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Decidable</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>","info":{"doc":"Convert `cases` `Decidable` => `Bool` ","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono","kind":"opaque","line":198,"name":"Lean.Compiler.LCNF.decToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L198-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDecl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDecl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDecl.toMono","kind":"opaque","line":192,"name":"Lean.Compiler.LCNF.FunDecl.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L192-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.mkFieldParamsForComputedFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">mkFieldParamsForComputedFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams </span><span class=\"fn\">numNewFields</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldFields</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.mkFieldParamsForComputedFields","kind":"def","line":172,"name":"Lean.Compiler.LCNF.mkFieldParamsForComputedFields","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L172-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono","kind":"def","line":167,"name":"Lean.Compiler.LCNF.LetDecl.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L167-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultFVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono","kind":"opaque","line":97,"name":"Lean.Compiler.LCNF.LetValue.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L97-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ctorAppToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultFVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorInfo</span> : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono","kind":"def","line":90,"name":"Lean.Compiler.LCNF.ctorAppToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L90-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argsToMonoRedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argsToMonoRedArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultFVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">redArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argsToMonoRedArg","kind":"def","line":72,"name":"Lean.Compiler.LCNF.argsToMonoRedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L72-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argsToMonoWithFnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argsToMonoWithFnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultFVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argsToMonoWithFnType","kind":"def","line":55,"name":"Lean.Compiler.LCNF.argsToMonoWithFnType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L55-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMonoDeferredCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argToMonoDeferredCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultFVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMonoDeferredCheck","kind":"def","line":52,"name":"Lean.Compiler.LCNF.argToMonoDeferredCheck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono","kind":"def","line":50,"name":"Lean.Compiler.LCNF.argToMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMonoBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argToMonoBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">check</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMonoBase","kind":"def","line":39,"name":"Lean.Compiler.LCNF.argToMonoBase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L39-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.checkFVarUseDeferred\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">checkFVarUseDeferred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultFVar </span><span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.checkFVarUseDeferred","kind":"def","line":35,"name":"Lean.Compiler.LCNF.checkFVarUseDeferred","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.checkFVarUse\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">checkFVarUse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.checkFVarUse","kind":"def","line":31,"name":"Lean.Compiler.LCNF.checkFVarUse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L31-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.throwNoncomputableError\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">throwNoncomputableError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.throwNoncomputableError","kind":"def","line":28,"name":"Lean.Compiler.LCNF.throwNoncomputableError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono","kind":"def","line":23,"name":"Lean.Compiler.LCNF.Param.toMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L23-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM","kind":"def","line":21,"name":"Lean.Compiler.LCNF.ToMonoM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.noncomputableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">noncomputableVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.noncomputableVars","kind":"def","line":19,"name":"Lean.Compiler.LCNF.ToMonoM.State.noncomputableVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">typeParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams","kind":"def","line":18,"name":"Lean.Compiler.LCNF.ToMonoM.State.typeParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeParams</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">noncomputableVars</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk","kind":"ctor","line":17,"name":"Lean.Compiler.LCNF.ToMonoM.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State","kind":"structure","line":17,"name":"Lean.Compiler.LCNF.ToMonoM.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToMono.lean#L17-L19"}}],"imports":["Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.InferType","Lean.Compiler.NoncomputableAttr"],"instances":[],"name":"Lean.Compiler.LCNF.ToMono"}