{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.lookup\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">lookup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></div></div>","info":{"doc":"Look up an expression in the atoms, recording it if it has not previously appeared.\n\nReturn its index, and, if it is new, a collection of interesting facts about the atom.\n* for each new atom `a` of the form `((x : Nat) : Int)`, the fact that `0 ≤ a`\n* for each new atom `a` of the form `x / k`, for `k` a positive numeral, the facts that\n  `k * a ≤ x < k * a + k`\n* for each new atom of the form `((a - b : Nat) : Int)`, the fact:\n  `b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\n","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.lookup","kind":"def","line":236,"name":"Lean.Elab.Tactic.Omega.lookup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L236-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.analyzeAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">analyzeAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Analyzes a newly recorded atom,\nreturning a collection of interesting facts about it that should be added to the context.\n","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.analyzeAtom","kind":"def","line":161,"name":"Lean.Elab.Tactic.Omega.analyzeAtom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L161-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.mkEqReflWithExpectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkEqReflWithExpectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Construct the term with type hint `(Eq.refl a : a = b)`","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.mkEqReflWithExpectedType","kind":"def","line":157,"name":"Lean.Elab.Tactic.Omega.mkEqReflWithExpectedType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L157-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundInt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">groundInt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"If `groundInt? e = some i`,\nthen `e` is definitionally equal to the standard expression for `i`.\n","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundInt?","kind":"opaque","line":137,"name":"Lean.Elab.Tactic.Omega.groundInt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L137-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundNat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">groundNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"If `groundNat? e = some n`, then `e` is definitionally equal to `OfNat.ofNat n`.\n","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.groundNat?","kind":"opaque","line":118,"name":"Lean.Elab.Tactic.Omega.groundNat?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L118-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.intCast?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">intCast?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"Wrapper around `Expr.int?` that also allows `Nat.cast`. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.intCast?","kind":"def","line":112,"name":"Lean.Elab.Tactic.Omega.intCast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L112-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.natCast?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">natCast?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Wrapper around `Expr.nat?` that also allows `Nat.cast`. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.natCast?","kind":"def","line":106,"name":"Lean.Elab.Tactic.Omega.natCast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L106-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.withoutModifyingState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">withoutModifyingState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run an `OmegaM` computation, restoring the state afterwards.\n","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.withoutModifyingState","kind":"def","line":100,"name":"Lean.Elab.Tactic.Omega.withoutModifyingState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L100-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.commitWhen\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">commitWhen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run an `OmegaM` computation, restoring the state afterwards depending on the result. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.commitWhen","kind":"def","line":90,"name":"Lean.Elab.Tactic.Omega.commitWhen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L90-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">atomsCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Return the `Expr` representing the list of atoms as a `Coeffs`. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsCoeffs","kind":"def","line":86,"name":"Lean.Elab.Tactic.Omega.atomsCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L86-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsList\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">atomsList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Return the `Expr` representing the list of atoms. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atomsList","kind":"def","line":83,"name":"Lean.Elab.Tactic.Omega.atomsList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atoms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">atoms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Retrieve the list of atoms. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.atoms","kind":"def","line":79,"name":"Lean.Elab.Tactic.Omega.atoms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L79-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.cfg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">cfg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a></span></div></div>","info":{"doc":"Retrieve the user-specified configuration options. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.cfg","kind":"def","line":76,"name":"Lean.Elab.Tactic.Omega.cfg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run a computation in the `OmegaM` monad, starting with no recorded atoms. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM.run","kind":"def","line":72,"name":"Lean.Elab.Tactic.Omega.OmegaM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L72-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The `OmegaM` monad maintains two pieces of state:\n* the linear atoms discovered while processing hypotheses\n* a cache mapping subexpressions of one side of a linear inequality to `LinearCombo`s\n  (and a proof that the `LinearCombo` evaluates at the atoms to the original expression). ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM","kind":"def","line":65,"name":"Lean.Elab.Tactic.Omega.OmegaM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L65-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Cache of expressions that have been visited, and their reflection as a linear combination.\n","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Cache","kind":"def","line":60,"name":"Lean.Elab.Tactic.Omega.Cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L60-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaM'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An intermediate layer in the `OmegaM` monad. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM'","kind":"def","line":57,"name":"Lean.Elab.Tactic.Omega.OmegaM'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.atoms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">State</span>.<span class=\"name\">atoms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The atoms up-to-defeq encountered so far. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.atoms","kind":"def","line":55,"name":"Lean.Elab.Tactic.Omega.State.atoms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State.mk","kind":"ctor","line":53,"name":"Lean.Elab.Tactic.Omega.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The internal state for the `OmegaM` monad, recording previously encountered atoms. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.State","kind":"structure","line":52,"name":"Lean.Elab.Tactic.Omega.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.cfg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Context</span>.<span class=\"name\">cfg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a></div></div>","info":{"doc":"User configurable options for `omega`. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.cfg","kind":"def","line":50,"name":"Lean.Elab.Tactic.Omega.Context.cfg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context.mk","kind":"ctor","line":48,"name":"Lean.Elab.Tactic.Omega.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Context for the `OmegaM` monad, containing the user configurable options. ","docLink":"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.Context","kind":"structure","line":47,"name":"Lean.Elab.Tactic.Omega.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/OmegaM.lean#L47-L50"}}],"imports":["Lean.Meta.AppBuilder","Lean.Meta.Canonicalizer"],"instances":[],"name":"Lean.Elab.Tactic.Omega.OmegaM"}