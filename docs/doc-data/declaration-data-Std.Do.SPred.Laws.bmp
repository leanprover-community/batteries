{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a>     <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a>   <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">t</span></span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_curry","kind":"theorem","line":169,"name":"Std.Do.SPred.imp_curry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L169-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a>     <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a>   <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_curry","kind":"theorem","line":164,"name":"Std.Do.SPred.or_curry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L164-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a>     <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a>   <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_curry","kind":"theorem","line":159,"name":"Std.Do.SPred.and_curry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L159-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.exists_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Φ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.exists_elim","kind":"theorem","line":152,"name":"Std.Do.SPred.exists_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L152-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.exists_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.exists_intro","kind":"theorem","line":147,"name":"Std.Do.SPred.exists_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L147-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.forall_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.forall_elim","kind":"theorem","line":144,"name":"Std.Do.SPred.forall_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.forall_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.forall_intro","kind":"theorem","line":141,"name":"Std.Do.SPred.forall_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_elim","kind":"theorem","line":136,"name":"Std.Do.SPred.imp_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L136-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_intro","kind":"theorem","line":133,"name":"Std.Do.SPred.imp_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_elim","kind":"theorem","line":126,"name":"Std.Do.SPred.or_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L126-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_intro_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_intro_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_intro_r","kind":"theorem","line":123,"name":"Std.Do.SPred.or_intro_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L123-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_intro_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_intro_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_intro_l","kind":"theorem","line":120,"name":"Std.Do.SPred.or_intro_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L120-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_elim_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_elim_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_elim_r","kind":"theorem","line":115,"name":"Std.Do.SPred.and_elim_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L115-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_elim_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_elim_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_elim_l","kind":"theorem","line":112,"name":"Std.Do.SPred.and_elim_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L112-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_intro","kind":"theorem","line":109,"name":"Std.Do.SPred.and_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L109-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">Q</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.imp_pure","kind":"theorem","line":102,"name":"Std.Do.SPred.imp_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L102-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.or_pure","kind":"theorem","line":97,"name":"Std.Do.SPred.or_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L97-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.and_pure","kind":"theorem","line":92,"name":"Std.Do.SPred.and_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L92-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.pure_elim'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_elim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">φ</span> → <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>)</span> → <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.pure_elim'","kind":"theorem","line":85,"name":"Std.Do.SPred.pure_elim'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.pure_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.pure_intro","kind":"theorem","line":82,"name":"Std.Do.SPred.pure_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.apply_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">apply_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.apply_pure","kind":"theorem","line":80,"name":"Std.Do.SPred.apply_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.down_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">down_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.down_pure","kind":"theorem","line":79,"name":"Std.Do.SPred.down_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.to_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">to_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.to_eq","kind":"theorem","line":71,"name":"Std.Do.SPred.bientails.to_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L71-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.symm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>) → <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.symm","kind":"theorem","line":66,"name":"Std.Do.SPred.bientails.symm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.instTransBientails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">instTransBientails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">bientails</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">bientails</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">bientails</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.instTransBientails","kind":"instance","line":63,"name":"Std.Do.SPred.instTransBientails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>) → <span class=\"fn\">(<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">R</span>) → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">R</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.trans","kind":"theorem","line":58,"name":"Std.Do.SPred.bientails.trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L58-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.refl","kind":"theorem","line":54,"name":"Std.Do.SPred.bientails.refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.iff\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#And\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.bientails.iff","kind":"theorem","line":46,"name":"Std.Do.SPred.bientails.iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L46-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.instTransEntails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">instTransEntails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Trans\">Trans</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">entails</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">entails</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">entails</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.instTransEntails","kind":"instance","line":41,"name":"Std.Do.SPred.instTransEntails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.entails.trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) → <span class=\"fn\">(<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>) → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.entails.trans","kind":"theorem","line":36,"name":"Std.Do.SPred.entails.trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L36-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/Laws.html#Std.Do.SPred.entails.refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/Laws.html#Std.Do.SPred.entails.refl","kind":"theorem","line":30,"name":"Std.Do.SPred.entails.refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/Laws.lean#L30-L34"}}],"imports":["Std.Do.SPred.Notation"],"instances":[{"className":"Trans","name":"Std.Do.SPred.instTransEntails","typeNames":["Std.Do.SPred.entails","Std.Do.SPred.entails","Std.Do.SPred.entails"]},{"className":"Trans","name":"Std.Do.SPred.instTransBientails","typeNames":["Std.Do.SPred.bientails","Std.Do.SPred.bientails","Std.Do.SPred.bientails"]}],"name":"Std.Do.SPred.Laws"}