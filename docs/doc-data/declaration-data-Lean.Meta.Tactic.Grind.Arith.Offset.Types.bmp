{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.offsetExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">offsetExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.offsetExt","kind":"opaque","line":73,"name":"Lean.Meta.Grind.Arith.Offset.offsetExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedState.default","kind":"def","line":71,"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedState","kind":"instance","line":71,"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.propagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">propagate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></span></div></div>","info":{"doc":"Truth values and equalities to propagate to core. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.propagate","kind":"def","line":70,"name":"Lean.Meta.Grind.Arith.Offset.State.propagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span></div></div>","info":{"doc":"Proof reconstruction information. For each node with id `u`, `proofs[u]` contains\npairs `(v, { w, proof })` s.t. there is a path from `u` to `v`, and\n`w` is the penultimate node in the path, and `proof` is the justification for\nthe last edge.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.proofs","kind":"def","line":68,"name":"Lean.Meta.Grind.Arith.Offset.State.proofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.targets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">targets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span></div></div>","info":{"doc":"For each node with id `u`, `targets[u]` contains\npairs `(v, k)` s.t. there is a path from `u` to `v` with weight `k`.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.targets","kind":"def","line":61,"name":"Lean.Meta.Grind.Arith.Offset.State.targets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.sources\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">sources</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span></div></div>","info":{"doc":"For each node with id `u`, `sources[u]` contains\npairs `(v, k)` s.t. there is a path from `v` to `u` with weight `k`.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.sources","kind":"def","line":56,"name":"Lean.Meta.Grind.Arith.Offset.State.sources","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrsOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>","info":{"doc":"Mapping from pairs `(u, v)` to a list of offset constraints on `u` and `v`.\nWe use this mapping to implement exhaustive constraint propagation.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrsOf","kind":"def","line":51,"name":"Lean.Meta.Grind.Arith.Offset.State.cnstrsOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span></div></div>","info":{"doc":"Mapping from `Expr` representing inequalities to constraints. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrs","kind":"def","line":46,"name":"Lean.Meta.Grind.Arith.Offset.State.cnstrs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">nodeMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span></div></div>","info":{"doc":"Mapping from `Expr` to a node representing it. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodeMap","kind":"def","line":44,"name":"Lean.Meta.Grind.Arith.Offset.State.nodeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">nodes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Mapping from `NodeId` to the `Expr` represented by the node. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodes","kind":"def","line":42,"name":"Lean.Meta.Grind.Arith.Offset.State.nodes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nodes</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nodeMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrsOf</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sources </span><span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proofs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">propagate</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.mk","kind":"ctor","line":40,"name":"Lean.Meta.Grind.Arith.Offset.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State of the constraint offset procedure. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State","kind":"structure","line":39,"name":"Lean.Meta.Grind.Arith.Offset.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L39-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedToPropagate</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate.default","kind":"def","line":37,"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedToPropagate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate","kind":"instance","line":37,"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eq","kind":"ctor","line":36,"name":"Lean.Meta.Grind.Arith.Offset.ToPropagate.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqFalse","kind":"ctor","line":35,"name":"Lean.Meta.Grind.Arith.Offset.ToPropagate.eqFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqTrue","kind":"ctor","line":34,"name":"Lean.Meta.Grind.Arith.Offset.ToPropagate.eqTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary inductive type for representing constraints and equalities\nthat should be propagated to core.\nRecall that we cannot compute proofs until the short-distance\ndata-structures have been fully updated when a new edge is inserted.\nThus, we store the information to be propagated into a list.\nSee field `propagate` in `State`.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate","kind":"inductive","line":25,"name":"Lean.Meta.Grind.Arith.Offset.ToPropagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L25-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedProofInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo","kind":"instance","line":23,"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedProofInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo.default","kind":"def","line":23,"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.proof","kind":"def","line":22,"name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.k","kind":"def","line":21,"name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.w\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.w","kind":"def","line":20,"name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.w","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.mk","kind":"ctor","line":19,"name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary structure used for proof extraction.  ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo","kind":"structure","line":18,"name":"Lean.Meta.Grind.Arith.Offset.ProofInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L18-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instToMessageDataCnstrNodeId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId","kind":"instance","line":15,"name":"Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L15-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">NodeId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId","kind":"def","line":13,"name":"Lean.Meta.Grind.Arith.Offset.NodeId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L13-L13"}}],"imports":["Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Arith.Offset.Util"],"instances":[{"className":"Lean.ToMessageData","name":"Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId","typeNames":["Lean.Meta.Grind.Arith.Offset.Cnstr"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo","typeNames":["Lean.Meta.Grind.Arith.Offset.ProofInfo"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate","typeNames":["Lean.Meta.Grind.Arith.Offset.ToPropagate"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Arith.Offset.instInhabitedState","typeNames":["Lean.Meta.Grind.Arith.Offset.State"]}],"name":"Lean.Meta.Tactic.Grind.Arith.Offset.Types"}