{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.instIteratorSizePartialTakeWhileOfIteratorLoopPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorSizePartialTakeWhileOfIteratorLoopPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSizePartial\">IteratorSizePartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.instIteratorSizePartialTakeWhileOfIteratorLoopPartial","kind":"instance","line":251,"name":"Std.Iterators.instIteratorSizePartialTakeWhileOfIteratorLoopPartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L251-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.instIteratorSizeTakeWhileOfFiniteOfIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorSizeTakeWhileOfFiniteOfIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.instIteratorSizeTakeWhileOfFiniteOfIteratorLoop","kind":"instance","line":247,"name":"Std.Iterators.instIteratorSizeTakeWhileOfFiniteOfIteratorLoop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L247-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorForPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instIteratorForPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorForPartial","kind":"instance","line":242,"name":"Std.Iterators.TakeWhile.instIteratorForPartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L242-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorLoop","kind":"instance","line":237,"name":"Std.Iterators.TakeWhile.instIteratorLoop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L237-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorCollectPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instIteratorCollectPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorCollectPartial","kind":"instance","line":233,"name":"Std.Iterators.TakeWhile.instIteratorCollectPartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L233-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorCollect\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instIteratorCollect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIteratorCollect","kind":"instance","line":229,"name":"Std.Iterators.TakeWhile.instIteratorCollect","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L229-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instProductive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instProductive","kind":"instance","line":225,"name":"Std.Iterators.TakeWhile.instProductive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L225-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instFinite","kind":"instance","line":210,"name":"Std.Iterators.TakeWhile.instFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L210-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">instIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.instIterator","kind":"instance","line":177,"name":"Std.Iterators.TakeWhile.instIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L177-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.rejected\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">rejected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.inner\">inner</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">out</span>)</span>.<a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT.Property\">Property</a></span> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.rejected","kind":"ctor","line":174,"name":"Std.Iterators.TakeWhile.PlausibleStep.rejected","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L174-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.inner\">inner</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.done","kind":"ctor","line":173,"name":"Std.Iterators.TakeWhile.PlausibleStep.done","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L173-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.inner\">inner</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span> →\n  <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhileWithPostcondition\">IterM.takeWhileWithPostcondition</a> <span class=\"fn\">P</span> <span class=\"fn\">it'</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.skip","kind":"ctor","line":171,"name":"Std.Iterators.TakeWhile.PlausibleStep.skip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L171-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">PlausibleStep</span>.<span class=\"name\">yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.inner\">inner</a></span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">out</span>)</span>.<a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT.Property\">Property</a></span> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span> → <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep\">PlausibleStep</a> <span class=\"fn\">it</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhileWithPostcondition\">IterM.takeWhileWithPostcondition</a> <span class=\"fn\">P</span> <span class=\"fn\">it'</span>)</span> <span class=\"fn\">out</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep.yield","kind":"ctor","line":169,"name":"Std.Iterators.TakeWhile.PlausibleStep.yield","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L169-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">PlausibleStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`it.PlausibleStep step` is the proposition that `step` is a possible next step from the\n`takeWhile` iterator `it`. This is mostly internally relevant, except if one needs to manually\nprove termination (`Finite` or `Productive` instances, for example) of a `takeWhile` iterator.\n","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.PlausibleStep","kind":"inductive","line":162,"name":"Std.Iterators.TakeWhile.PlausibleStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L162-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Given an iterator `it` and a predicate `P`, `it.takeWhile P` is an iterator that outputs\nthe values emitted by `it` until one of those values is rejected by `P`.\nIf some emitted value is rejected by `P`, the value is dropped and the iterator terminates.\n\nIn situations where `P` is monadic, use `takeWhileM` instead.\n\n**Marble diagram (ignoring monadic effects):**\n\nAssuming that the predicate `P` accepts `a` and `b` but rejects `c`:\n\n```text\nit               ---a----b---c--d-e--⊥\nit.takeWhile P   ---a----b---⊥\n\nit               ---a----⊥\nit.takeWhile P   ---a----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` is finite\n* `Productive` instance: only if `it` is productive\n\nDepending on `P`, it is possible that `it.takeWhile P` is finite (or productive) although `it` is not.\nIn this case, the `Finite` (or `Productive`) instance needs to be proved manually.\n\n**Performance:**\n\nThis combinator calls `P` on each output of `it` until the predicate evaluates to false. Then\nit terminates.\n","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhile","kind":"def","line":126,"name":"Std.Iterators.IterM.takeWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L126-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhileM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">takeWhileM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Given an iterator `it` and a monadic predicate `P`, `it.takeWhileM P` is an iterator that outputs\nthe values emitted by `it` until one of those values is rejected by `P`.\nIf some emitted value is rejected by `P`, the value is dropped and the iterator terminates.\n\nIf `P` is pure, then the simpler variant `takeWhile` can be used instead.\n\n**Marble diagram (ignoring monadic effects):**\n\nAssuming that the predicate `P` accepts `a` and `b` but rejects `c`:\n\n```text\nit                ---a----b---c--d-e--⊥\nit.takeWhileM P   ---a----b---⊥\n\nit                ---a----⊥\nit.takeWhileM P   ---a----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` is finite\n* `Productive` instance: only if `it` is productive\n\nDepending on `P`, it is possible that `it.takeWhileM P` is finite (or productive) although `it` is not.\nIn this case, the `Finite` (or `Productive`) instance needs to be proved manually.\n\n**Performance:**\n\nThis combinator calls `P` on each output of `it` until the predicate evaluates to false. Then\nit terminates.\n","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhileM","kind":"def","line":90,"name":"Std.Iterators.IterM.takeWhileM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L90-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhileWithPostcondition\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">takeWhileWithPostcondition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"*Note: This is a very general combinator that requires an advanced understanding of monads,\ndependent types and termination proofs. The variants `takeWhile` and `takeWhileM` are easier to use\nand sufficient for most use cases.*\n\nGiven an iterator `it` and a monadic predicate `P`, `it.takeWhileWithPostcondition P` is an iterator\nthat emits the values emitted by `it` until one of those values is rejected by `P`.\nIf some emitted value is rejected by `P`, the value is dropped and the iterator terminates.\n\n`P` is expected to return `PostconditionT m (ULift Bool)`. The `PostconditionT` transformer allows\nthe caller to intrinsically prove properties about `P`'s return value in the monad `m`, enabling\ntermination proofs depending on the specific behavior of `P`.\n\n**Marble diagram (ignoring monadic effects):**\n\nAssuming that the predicate `P` accepts `a` and `b` but rejects `c`:\n\n```text\nit                                ---a----b---c--d-e--⊥\nit.takeWhileWithPostcondition P   ---a----b---⊥\n\nit                                ---a----⊥\nit.takeWhileWithPostcondition P   ---a----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` is finite\n* `Productive` instance: only if `it` is productive\n\nDepending on `P`, it is possible that `it.takeWhileWithPostcondition P` is finite (or productive)\nalthough `it` is not. In this case, the `Finite` (or `Productive`) instance needs to be proved\nmanually.\n\n**Performance:**\n\nThis combinator calls `P` on each output of `it` until the predicate evaluates to false. Then\nit terminates.\n","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.IterM.takeWhileWithPostcondition","kind":"def","line":47,"name":"Std.Iterators.IterM.takeWhileWithPostcondition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L47-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.inner\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Internal implementation detail of the iterator library. ","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.inner","kind":"def","line":45,"name":"Std.Iterators.TakeWhile.inner","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\">TakeWhile</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile.mk","kind":"ctor","line":42,"name":"Std.Iterators.TakeWhile.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">TakeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/PostconditionMonad.html#Std.Iterators.PostconditionT\">PostconditionT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>","info":{"doc":"Internal state of the `takeWhile` combinator. Do not depend on its internals.\n","docLink":"./Std/Data/Iterators/Combinators/Monadic/TakeWhile.html#Std.Iterators.TakeWhile","kind":"structure","line":38,"name":"Std.Iterators.TakeWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Monadic/TakeWhile.lean#L38-L45"}}],"imports":["Init.Data.Nat.Lemmas","Init.Data.Iterators.Consumers.Monadic.Collect","Init.Data.Iterators.Consumers.Monadic.Loop","Init.Data.Iterators.Internal.Termination","Init.Data.Iterators.PostconditionMonad"],"instances":[{"className":"Std.Iterators.Iterator","name":"Std.Iterators.TakeWhile.instIterator","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.Finite","name":"Std.Iterators.TakeWhile.instFinite","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.Productive","name":"Std.Iterators.TakeWhile.instProductive","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.IteratorCollect","name":"Std.Iterators.TakeWhile.instIteratorCollect","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"Std.Iterators.TakeWhile.instIteratorCollectPartial","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.IteratorLoop","name":"Std.Iterators.TakeWhile.instIteratorLoop","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"Std.Iterators.TakeWhile.instIteratorForPartial","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.IteratorSize","name":"Std.Iterators.instIteratorSizeTakeWhileOfFiniteOfIteratorLoop","typeNames":["Std.Iterators.TakeWhile"]},{"className":"Std.Iterators.IteratorSizePartial","name":"Std.Iterators.instIteratorSizePartialTakeWhileOfIteratorLoopPartial","typeNames":["Std.Iterators.TakeWhile"]}],"name":"Std.Data.Iterators.Combinators.Monadic.TakeWhile"}