{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.addForallSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addForallSimproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Simprocs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simprocs\">Simprocs</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.addForallSimproc","kind":"def","line":294,"name":"Lean.Meta.Grind.addForallSimproc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L294-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.simpExists\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">simpExists</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Simp.Simproc</a></div></div>","info":{"doc":"Applies the following rewriting rules:\n- `Grind.exists_or`\n- `Grind.exists_and_left`\n- `Grind.exists_and_right`\n- `Grind.exists_prop`\n- `Grind.exists_const`\n","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.simpExists","kind":"def","line":247,"name":"Lean.Meta.Grind.simpExists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L247-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.simpForall\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">simpForall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Simp.Simproc</a></div></div>","info":{"doc":"Applies the following rewriting rules:\n- `Grind.imp_true_eq`\n- `Grind.imp_false_eq`\n- `Grind.forall_imp_eq_or`\n- `Grind.true_imp_eq`\n- `Grind.false_imp_eq`\n- `Grind.imp_self_eq`\n- `forall_true`\n- `forall_false`\n- `Grind.forall_or_forall`\n- `Grind.forall_forall_or`\n- `Grind.forall_and`\n","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.simpForall","kind":"def","line":165,"name":"Lean.Meta.Grind.simpForall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L165-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateExistsDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateExistsDown</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateExistsDown","kind":"def","line":148,"name":"Lean.Meta.Grind.propagateExistsDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L148-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateForallPropDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropDown","kind":"def","line":109,"name":"Lean.Meta.Grind.propagateForallPropDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L109-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateForallPropUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If `parent` is a projection-application `proj_i c`,\ncheck whether the root of the equivalence class containing `c` is a constructor-application `ctor ... a_i ...`.\nIf so, internalize the term `proj_i (ctor ... a_i ...)` and add the equality `proj_i (ctor ... a_i ...) = a_i`.\n","docLink":"./Lean/Meta/Tactic/Grind/ForallProp.html#Lean.Meta.Grind.propagateForallPropUp","kind":"def","line":20,"name":"Lean.Meta.Grind.propagateForallPropUp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/ForallProp.lean#L20-L57"}}],"imports":["Lean.Meta.Tactic.Grind.Types","Init.Grind.Propagator","Init.Simproc","Init.Grind.Norm","Lean.Meta.Tactic.Grind.PropagatorAttr","Lean.Meta.Tactic.Grind.Propagate","Lean.Meta.Tactic.Grind.Internalize","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.EqResolution","Lean.Meta.Tactic.Grind.SynthInstance"],"instances":[],"name":"Lean.Meta.Tactic.Grind.ForallProp"}