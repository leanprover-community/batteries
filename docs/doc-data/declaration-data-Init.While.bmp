{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.doElemRepeat__Until_\"><span class=\"name\">Lean</span>.<span class=\"name\">doElemRepeat__Until_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.doElemRepeat__Until_","kind":"def","line":50,"name":"Lean.doElemRepeat__Until_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.doElemWhile_Do_\"><span class=\"name\">Lean</span>.<span class=\"name\">doElemWhile_Do_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.doElemWhile_Do_","kind":"def","line":45,"name":"Lean.doElemWhile_Do_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.«doElemWhile_:_Do_»\"><span class=\"name\">Lean</span>.<span class=\"name\">«doElemWhile_:_Do_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.«doElemWhile_:_Do_»","kind":"def","line":40,"name":"Lean.«doElemWhile_:_Do_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.doElemRepeat_\"><span class=\"name\">Lean</span>.<span class=\"name\">doElemRepeat_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.doElemRepeat_","kind":"def","line":35,"name":"Lean.doElemRepeat_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.instForInLoopUnit\"><span class=\"name\">Lean</span>.<span class=\"name\">instForInLoopUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Init/While.html#Lean.Loop\">Loop</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.instForInLoopUnit","kind":"instance","line":32,"name":"Lean.instForInLoopUnit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.Loop.forIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Loop</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/While.html#Lean.Loop\">Loop</a> → <span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>) → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.Loop.forIn","kind":"def","line":24,"name":"Lean.Loop.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L24-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.Loop.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Loop</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/While.html#Lean.Loop\">Loop</a></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.Loop.mk","kind":"ctor","line":22,"name":"Lean.Loop.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/While.html#Lean.Loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/While.html#Lean.Loop","kind":"inductive","line":21,"name":"Lean.Loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/While.lean#L21-L22"}}],"imports":["Init.Core"],"instances":[{"className":"ForIn","name":"Lean.instForInLoopUnit","typeNames":["Lean.Loop","Unit"]}],"name":"Init.While"}