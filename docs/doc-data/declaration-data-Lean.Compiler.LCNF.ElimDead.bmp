{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Decl.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Decl.elimDead","kind":"def","line":90,"name":"Lean.Compiler.LCNF.Decl.elimDead","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L90-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Code.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.Code.elimDead","kind":"def","line":87,"name":"Lean.Compiler.LCNF.Code.elimDead","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L87-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ElimDead</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.elimDead","kind":"opaque","line":56,"name":"Lean.Compiler.LCNF.ElimDead.elimDead","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L56-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.visitFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ElimDead</span>.<span class=\"name\">visitFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.visitFunDecl","kind":"opaque","line":52,"name":"Lean.Compiler.LCNF.ElimDead.visitFunDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ElimDead</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.ElimDead.M","kind":"def","line":40,"name":"Lean.Compiler.LCNF.ElimDead.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">UsedLocalDecls</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsLetValue","kind":"def","line":31,"name":"Lean.Compiler.LCNF.collectLocalDeclsLetValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L31-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">UsedLocalDecls</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArgs","kind":"def","line":28,"name":"Lean.Compiler.LCNF.collectLocalDeclsArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectLocalDeclsArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">UsedLocalDecls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\">UsedLocalDecls</a></div></div>","info":{"doc":"Collect set of (let) free variables in a LCNF value.\nThis code exploits the LCNF property that local declarations do not occur in types.\n","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.collectLocalDeclsArg","kind":"def","line":17,"name":"Lean.Compiler.LCNF.collectLocalDeclsArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L17-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UsedLocalDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDead.html#Lean.Compiler.LCNF.UsedLocalDecls","kind":"def","line":15,"name":"Lean.Compiler.LCNF.UsedLocalDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ElimDead.lean#L15-L15"}}],"imports":["Lean.Compiler.LCNF.CompilerM"],"instances":[],"name":"Lean.Compiler.LCNF.ElimDead"}