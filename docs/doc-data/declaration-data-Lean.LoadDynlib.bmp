{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.loadPlugin\"><span class=\"name\">Lean</span>.<span class=\"name\">loadPlugin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Loads a Lean plugin and runs its initializers.\n\nA Lean plugin is a shared library built from a Lean module.\nThis means it has an `initialize_<module-name>` symbol that runs the\nmodule's initializers (including its imports' initializers). Initializers\nare declared with the `initialize` or `builtin_initialize` commands.\n\nThis is similar to passing `--plugin=path` to `lean`.\nLean environment initializers, such as definitions calling\n`registerEnvExtension`, also require `Lean.initializing` to be `true`.\nTo enable them, use `loadPlugin` within a `withImporting` block. This will\nset  `Lean.initializing` (but not `IO.initializing`).\n\n**Lean never unloads plugins.** Attempting to load a plugin that defines\nsymbols shared with a previously loaded plugin (including itself) will error.\nIf multiple plugins share common symbols (e.g., imports), those symbols\nshould be linked and loaded separately.\n","docLink":"./Lean/LoadDynlib.html#Lean.loadPlugin","kind":"def","line":71,"name":"Lean.loadPlugin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L71-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.loadDynlib\"><span class=\"name\">Lean</span>.<span class=\"name\">loadDynlib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Dynamically loads a shared library so that its symbols can be used by\nthe Lean interpreter (e.g., for interpreting `@[extern]` declarations).\nEquivalent to passing `--load-dynlib=path` to `lean`.\n\n**Lean never unloads libraries.** Attempting to load a library that defines\nsymbols shared with a previously loaded library (including itself) will error.\nIf multiple libraries share common symbols, those symbols should be linked\nand loaded as separate libraries.\n","docLink":"./Lean/LoadDynlib.html#Lean.loadDynlib","kind":"def","line":54,"name":"Lean.loadDynlib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L54-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol.runAsInit\"><span class=\"name\">Lean</span>.<span class=\"name\">Dynlib</span>.<span class=\"name\">Symbol</span>.<span class=\"name\">runAsInit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">dynlib</span> : <a href=\"./Lean/LoadDynlib.html#Lean.Dynlib\">Dynlib</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <span class=\"fn\"><span class=\"fn\">dynlib</span>.<a href=\"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol\">Symbol</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Runs a module initializer function.\nThe symbol should have the signature `(builtin : Bool) â†’ IO Unit`\n(e.g., `initialize_Foo(uint8_t builtin, obj_arg)`).\n\nThis function is unsafe because there is no guarantee the symbol has the\nexpected signature. An invalid symbol can thus produce undefined behavior.\nFurthermore, if the initializer introduces pointers (e.g., function closures)\nfrom the dynamic library into the global state, future garbage collection of\nthe library will produce undefined behavior. In such cases, garbage collection\nof the dynamic library can be prevented via `Runtime.markPersistent` or\n`Runtime.forget`.\n","docLink":"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol.runAsInit","kind":"opaque","line":38,"name":"Lean.Dynlib.Symbol.runAsInit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L38-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.Dynlib.get?\"><span class=\"name\">Lean</span>.<span class=\"name\">Dynlib</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dynlib</span> : <a href=\"./Lean/LoadDynlib.html#Lean.Dynlib\">Dynlib</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">dynlib</span>.<a href=\"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol\">Symbol</a></span></span></div></div>","info":{"doc":"Returns the symbol of the dynamic library with the specified name (if any).  ","docLink":"./Lean/LoadDynlib.html#Lean.Dynlib.get?","kind":"opaque","line":34,"name":"Lean.Dynlib.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L34-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.Dynlib.load\"><span class=\"name\">Lean</span>.<span class=\"name\">Dynlib</span>.<span class=\"name\">load</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/LoadDynlib.html#Lean.Dynlib\">Dynlib</a></span></div></div>","info":{"doc":"Dynamically loads a shared library.\n\nThe path may also be used perform a system-dependent search for library.\nTo avoid this, use an absolute path (e.g., from `IO.FS.realPath`).\n","docLink":"./Lean/LoadDynlib.html#Lean.Dynlib.load","kind":"opaque","line":25,"name":"Lean.Dynlib.load","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L25-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.instNonemptySymbol\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptySymbol</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">dynlib</span> : <a href=\"./Lean/LoadDynlib.html#Lean.Dynlib\">Dynlib</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\"><span class=\"fn\">dynlib</span>.<a href=\"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol\">Symbol</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/LoadDynlib.html#Lean.instNonemptySymbol","kind":"instance","line":23,"name":"Lean.instNonemptySymbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Dynlib</span>.<span class=\"name\">Symbol</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dynlib</span> : <a href=\"./Lean/LoadDynlib.html#Lean.Dynlib\">Dynlib</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A reference to a symbol within a dynamic library. ","docLink":"./Lean/LoadDynlib.html#Lean.Dynlib.Symbol","kind":"def","line":21,"name":"Lean.Dynlib.Symbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L21-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.instNonemptyDynlib\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyDynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/LoadDynlib.html#Lean.Dynlib\">Dynlib</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LoadDynlib.html#Lean.instNonemptyDynlib","kind":"instance","line":18,"name":"Lean.instNonemptyDynlib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LoadDynlib.html#Lean.Dynlib\"><span class=\"name\">Lean</span>.<span class=\"name\">Dynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A dynamic library handle. ","docLink":"./Lean/LoadDynlib.html#Lean.Dynlib","kind":"def","line":16,"name":"Lean.Dynlib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LoadDynlib.lean#L16-L17"}}],"imports":["Init.System.IO"],"instances":[{"className":"Nonempty","name":"Lean.instNonemptyDynlib","typeNames":["Lean.Dynlib"]},{"className":"Nonempty","name":"Lean.instNonemptySymbol","typeNames":["Lean.Dynlib.Symbol"]}],"name":"Lean.LoadDynlib"}