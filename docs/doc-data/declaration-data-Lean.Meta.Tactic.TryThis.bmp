{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addRewriteSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addRewriteSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rules</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Lean/Data/LOption.html#Lean.LOption\">LOption</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Lean/Data/LOption.html#Lean.LOption.undef\">LOption.undef</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkState?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Tactic.SavedState\">Elab.Tactic.SavedState</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a suggestion for `rw [h₁, ← h₂] at loc`.\n\nParameters:\n* `ref`: the span of the widget diagnostic\n* `rules`: a list of arguments to `rw`, with the second component `true` if the rewrite is reversed\n* `type?`: the goal after the suggested rewrite, `.none` if the rewrite closes the goal, or `.undef`\n  if the resulting goal is unknown\n* `loc?`: the hypothesis at which the rewrite is performed, or `none` if the goal is targeted\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `checkState?`: if passed, the tactic state in which the generated tactic will be validated,\n  inserting `expose_names` if necessary\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addRewriteSuggestion","kind":"def","line":377,"name":"Lean.Meta.Tactic.TryThis.addRewriteSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L377-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addHaveSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addHaveSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkState?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Tactic.SavedState\">Elab.Tactic.SavedState</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a suggestion for `have h : t := e`. ","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addHaveSuggestion","kind":"def","line":341,"name":"Lean.Meta.Tactic.TryThis.addHaveSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L341-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addTermSuggestions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addTermSuggestions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;Try these:&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add term suggestions.\n\nThe parameters are:\n* `ref`: the span of the widget diagnostic\n* `es`: an array of the replacement expressions\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string which precedes the list of suggestions. By default, it's `\"Try these:\"`.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text for all\n  suggestions which do not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is\n  used.\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addTermSuggestions","kind":"def","line":321,"name":"Lean.Meta.Tactic.TryThis.addTermSuggestions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L321-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addTermSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addTermSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;Try this:&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a term suggestion.\n\nThe parameters are:\n* `ref`: the span of the widget diagnostic\n* `e`: the replacement expression\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string which precedes the suggestion. By default, it's `\"Try this:\"`.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text if the\n  suggestion does not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is used.\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addTermSuggestion","kind":"def","line":304,"name":"Lean.Meta.Tactic.TryThis.addTermSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L304-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addExactSuggestions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addExactSuggestions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addSubgoalsMsg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkState?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Tactic.SavedState\">Elab.Tactic.SavedState</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticErrorAsInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add `exact e` or `refine e` suggestions if they can be successfully generated; for those that\ncannot, display messages indicating the invalid generated tactics.\n\nThe parameters are:\n* `ref`: the span of the widget diagnostic\n* `es`: the array of replacement expressions\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `addSubgoalsMsg`: if true (default false), any remaining subgoals will be shown after\n  `Remaining subgoals:`\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text for all\n  suggestions which do not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is\n  used.\n* `checkState?`: if passed, the tactic state in which the generated tactics will be validated,\n  inserting `expose_names` if necessary.\n* `tacticErrorAsInfo`: if true (default true), invalid generated tactics will log info messages\n  instead of throwing an error. The default behavior differs from `addExactSuggestion` because\n  throwing an error means that any subsequent suggestions will not be displayed. Has no effect if\n  `checkState?` is `none`.\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addExactSuggestions","kind":"def","line":266,"name":"Lean.Meta.Tactic.TryThis.addExactSuggestions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L266-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addExactSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addExactSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addSubgoalsMsg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkState?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Tactic.SavedState\">Elab.Tactic.SavedState</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticErrorAsInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add an `exact e` or `refine e` suggestion.\n\nThe parameters are:\n* `ref`: the span of the widget diagnostic\n* `e`: the replacement expression\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `addSubgoalsMsg`: if true (default false), any remaining subgoals will be shown after\n  `Remaining subgoals:`\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text if the\n  suggestion does not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is used.\n* `checkState?`: if passed, the tactic state in which the generated tactic will be validated,\n  inserting `expose_names` if necessary.\n* `tacticErrorAsInfo`: if true (default false), if a generated tactic is invalid (e.g., due to a\n   pretty-printing issue), the resulting error message will be logged as an info message instead of\n   being thrown as an error. Has no effect if `checkState?` is `none`.\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addExactSuggestion","kind":"def","line":236,"name":"Lean.Meta.Tactic.TryThis.addExactSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L236-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addSuggestions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addSuggestions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Suggestion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;Try these:&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">style?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.SuggestionStyle\">SuggestionStyle</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diffGranularity</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">Hint.DiffGranularity</a> := <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.none\">Hint.DiffGranularity.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a list of \"try this\" suggestions as a single \"try these\" suggestion. This has two effects:\n\n* A widget diagnostic is displayed, saying `Try these: <list of suggestions>` with a link on\n  each suggestion in `<list of suggestions>` to apply each suggestion\n* A code action for each suggestion is added, which will apply the suggestion.\n\nThe parameters are:\n* `ref`: the span of the widget diagnostic\n* `suggestions`: an array of `Suggestion`s, which each contain\n  * `suggestion`: the replacement text\n  * `preInfo?`: an optional string shown immediately before the replacement text in the widget\n    message (only)\n  * `postInfo?`: an optional string shown immediately after the replacement text in the widget\n    message (only)\n  * `messageData?`: an optional `MessageData` displayed instead of `suggestion`.\n    If set, implies `diffGranularity = .none`.\n  * `toCodeActionTitle?`: an optional function `String → String` describing how to transform the\n    pretty-printed suggestion text into the code action text which appears in the lightbulb menu.\n    If `none`, we simply prepend `\"Try this: \"` to the suggestion text.\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string that precedes the list. By default, it is `\"Try these:\"`.\n* `style?` (**deprecated**): unused.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text for all\n  suggestions which do not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is\n  used.\n* `diffGranularity`: How to compute the diff display in the suggestion. Defaults to only displaying\n  the inserted string.\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addSuggestions","kind":"def","line":106,"name":"Lean.Meta.Tactic.TryThis.addSuggestions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L106-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">addSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;Try this:&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diffGranularity</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">Hint.DiffGranularity</a> := <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.none\">Hint.DiffGranularity.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a \"try this\" suggestion. This has two effects:\n\n* A widget diagnostic is displayed, saying `Try this: <suggestion>` with a link on `<suggestion>`\n  to apply the suggestion\n* A code action is added, which will apply the suggestion.\n\nThe parameters are:\n* `ref`: the span of the widget diagnostic\n* `s`: a `Suggestion`, which contains\n  * `suggestion`: the replacement text\n  * `preInfo?`: an optional string shown immediately before the replacement text in the widget\n    message (only)\n  * `postInfo?`: an optional string shown immediately after the replacement text in the widget\n    message (only)\n  * `messageData?`: an optional `MessageData` displayed instead of `suggestion`.\n    If set, implies `diffGranularity = .none`.\n  * `toCodeActionTitle?`: an optional function `String → String` describing how to transform the\n    pretty-printed suggestion text into the code action text which appears in the lightbulb menu.\n    If `none`, we simply prepend `\"Try This: \"` to the suggestion text.\n* `origSpan?`: a syntax object whose span is the actual text to be replaced by `suggestion`.\n  If not provided it defaults to `ref`.\n* `header`: a string that begins the display. By default, it is `\"Try this:\"`.\n* `codeActionPrefix?`: an optional string to be used as the prefix of the replacement text if the\n  suggestion does not have a custom `toCodeActionTitle?`. If not provided, `\"Try this: \"` is used.\n* `diffGranularity`: How to compute the diff display in the suggestion. Defaults to only displaying\n  the inserted string.\n","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.addSuggestion","kind":"def","line":67,"name":"Lean.Meta.Tactic.TryThis.addSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L67-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.delabToRefinableSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">delabToRefinableSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Suggestion</a></span></div></div>","info":{"doc":"Delaborate `e` into a suggestion suitable for use by `refine`. ","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.delabToRefinableSuggestion","kind":"def","line":63,"name":"Lean.Meta.Tactic.TryThis.delabToRefinableSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.delabToRefinableSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TryThis</span>.<span class=\"name\">delabToRefinableSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"Delaborate `e` into syntax suitable for use by `refine`. ","docLink":"./Lean/Meta/Tactic/TryThis.html#Lean.Meta.Tactic.TryThis.delabToRefinableSyntax","kind":"def","line":59,"name":"Lean.Meta.Tactic.TryThis.delabToRefinableSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/TryThis.lean#L59-L61"}}],"imports":["Lean.Elab.Tactic.Basic","Lean.Server.CodeActions","Lean.Widget.UserWidget","Lean.Meta.Tactic.ExposeNames","Lean.Meta.Hint","Lean.Meta.Hint"],"instances":[],"name":"Lean.Meta.Tactic.TryThis"}