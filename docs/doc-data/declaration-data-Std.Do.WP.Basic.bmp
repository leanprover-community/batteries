{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.EStateM.of_wp_run_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">EStateM</span>.<span class=\"name\">of_wp_run_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">prog</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">EStateM.Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a>     <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n      <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.ok\">EStateM.Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span>)</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.error\">EStateM.Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s'</span>)</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a>\n      <span class=\"fn\">s</span></span>) →\n  <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Adequacy lemma for `EStateM.run`.\nUseful if you want to prove a property about an expression `x` defined as `EStateM.run prog s` and\nyou want to use `mvcgen` to reason about `prog`.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.EStateM.of_wp_run_eq","kind":"theorem","line":153,"name":"Std.Do.EStateM.of_wp_run_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L153-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Except.of_wp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Except</span>.<span class=\"name\">of_wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span>)</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>) → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">prog</span></span></span></div></div>","info":{"doc":"Adequacy lemma for `Except`.\nUseful if you want to prove a property about an expression `prog : Except ε α` and you want to use\n`mvcgen` to reason about `prog`.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.Except.of_wp","kind":"theorem","line":140,"name":"Std.Do.Except.of_wp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L140-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.ReaderM.of_wp_run_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ReaderM</span>.<span class=\"name\">of_wp_run_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Control/Reader.html#ReaderM\">ReaderM</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT.run\">ReaderT.run</a> <span class=\"fn\">prog</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow\">PostCond.noThrow</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> <span class=\"fn\">r</span></span>) → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Adequacy lemma for `ReaderM.run`.\nUseful if you want to prove a property about an expression `x` defined as `ReaderM.run prog r` and\nyou want to use `mvcgen` to reason about `prog`.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.ReaderM.of_wp_run_eq","kind":"theorem","line":132,"name":"Std.Do.ReaderM.of_wp_run_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L132-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.StateM.of_wp_run'_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">StateM</span>.<span class=\"name\">of_wp_run'_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT.run'\">StateT.run'</a> <span class=\"fn\">prog</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow\">PostCond.noThrow</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> <span class=\"fn\">s</span></span>) → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Adequacy lemma for `StateM.run'`.\nUseful if you want to prove a property about an expression `x` defined as `StateM.run' prog s` and\nyou want to use `mvcgen` to reason about `prog`.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.StateM.of_wp_run'_eq","kind":"theorem","line":124,"name":"Std.Do.StateM.of_wp_run'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L124-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.StateM.of_wp_run_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">StateM</span>.<span class=\"name\">of_wp_run_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT.run\">StateT.run</a> <span class=\"fn\">prog</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow\">PostCond.noThrow</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> <span class=\"fn\">s</span></span>) → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Adequacy lemma for `StateM.run`.\nUseful if you want to prove a property about an expression `x` defined as `StateM.run prog s` and\nyou want to use `mvcgen` to reason about `prog`.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.StateM.of_wp_run_eq","kind":"theorem","line":116,"name":"Std.Do.StateM.of_wp_run_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L116-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Id.of_wp_run_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Id</span>.<span class=\"name\">of_wp_run_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prog</span> : <span class=\"fn\"><a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">prog</span>.<a href=\"./Init/Control/Id.html#Id.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">prog</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostCond.noThrow\">PostCond.noThrow</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Adequacy lemma for `Id.run`.\nUseful if you want to prove a property about an expression `x` defined as `Id.run prog` and you\nwant to use `mvcgen` to reason about `prog`.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.Id.of_wp_run_eq","kind":"theorem","line":108,"name":"Std.Do.Id.of_wp_run_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L108-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Option.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Option</span>.<span class=\"name\">instWP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.Option.instWP","kind":"instance","line":105,"name":"Std.Do.Option.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L105-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Except.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Except</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.Except.instWP","kind":"instance","line":103,"name":"Std.Do.Except.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Reader.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Reader</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/Reader.html#ReaderM\">ReaderM</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.Reader.instWP","kind":"instance","line":101,"name":"Std.Do.Reader.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L101-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.State.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">State</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.State.instWP","kind":"instance","line":99,"name":"Std.Do.State.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L99-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.EStateM.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">EStateM</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.EStateM.instWP","kind":"instance","line":86,"name":"Std.Do.EStateM.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L86-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.OptionT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">OptionT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.OptionT.instWP","kind":"instance","line":83,"name":"Std.Do.OptionT.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.ExceptT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.ExceptT.instWP","kind":"instance","line":80,"name":"Std.Do.ExceptT.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L80-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.ReaderT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ReaderT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.ReaderT.instWP","kind":"instance","line":77,"name":"Std.Do.ReaderT.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.StateT.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">StateT</span>.<span class=\"name\">instWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.StateT.instWP","kind":"instance","line":74,"name":"Std.Do.StateT.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.Id.instWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Id</span>.<span class=\"name\">instWP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.Id.instWP","kind":"instance","line":71,"name":"Std.Do.Id.instWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.unexpandWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">unexpandWP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.unexpandWP","kind":"def","line":63,"name":"Std.Do.unexpandWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L63-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.«termWp⟦_:_⟧»\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">«termWp⟦_:_⟧»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`wp⟦x⟧ Q` is defined as `(WP.wp x).apply Q`. ","docLink":"./Std/Do/WP/Basic.html#Std.Do.«termWp⟦_:_⟧»","kind":"def","line":57,"name":"Std.Do.«termWp⟦_:_⟧»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Interpret a monadic program `x : m α` in terms of a predicate transformer `PredTrans ps α`. ","docLink":"./Std/Do/WP/Basic.html#Std.Do.WP.wp","kind":"def","line":53,"name":"Std.Do.WP.wp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.WP.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wp</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Basic.html#Std.Do.WP.mk","kind":"ctor","line":51,"name":"Std.Do.WP.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Basic.html#Std.Do.WP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>","info":{"doc":"A weakest precondition interpretation of a monadic program `x : m α` in terms of a\npredicate transformer `PredTrans ps α`.\nThe monad `m` determines `ps : PostShape`. See the module comment for more details.\n","docLink":"./Std/Do/WP/Basic.html#Std.Do.WP","kind":"class","line":46,"name":"Std.Do.WP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Basic.lean#L46-L53"}}],"imports":["Std.Do.PredTrans"],"instances":[{"className":"Std.Do.WP","name":"Std.Do.Id.instWP","typeNames":["Id","Std.Do.PostShape.pure"]},{"className":"Std.Do.WP","name":"Std.Do.StateT.instWP","typeNames":["StateT","Std.Do.PostShape.arg"]},{"className":"Std.Do.WP","name":"Std.Do.ReaderT.instWP","typeNames":["ReaderT","Std.Do.PostShape.arg"]},{"className":"Std.Do.WP","name":"Std.Do.ExceptT.instWP","typeNames":["ExceptT","Std.Do.PostShape.except"]},{"className":"Std.Do.WP","name":"Std.Do.OptionT.instWP","typeNames":["OptionT","Std.Do.PostShape.except"]},{"className":"Std.Do.WP","name":"Std.Do.EStateM.instWP","typeNames":["EStateM","Std.Do.PostShape.except"]},{"className":"Std.Do.WP","name":"Std.Do.State.instWP","typeNames":["StateM","Std.Do.PostShape.arg"]},{"className":"Std.Do.WP","name":"Std.Do.Reader.instWP","typeNames":["ReaderM","Std.Do.PostShape.arg"]},{"className":"Std.Do.WP","name":"Std.Do.Except.instWP","typeNames":["Except","Std.Do.PostShape.except"]},{"className":"Std.Do.WP","name":"Std.Do.Option.instWP","typeNames":["Option","Std.Do.PostShape.except"]}],"name":"Std.Do.WP.Basic"}