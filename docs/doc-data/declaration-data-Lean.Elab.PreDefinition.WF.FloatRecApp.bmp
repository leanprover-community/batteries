{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/FloatRecApp.html#Lean.Elab.WF.floatRecApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">floatRecApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Preprocesses the expressions to improve the effectiveness of `wfRecursion`.\n\n* Floats out the RecApp markers.\n  Example:\n  ```\n  def f : Nat â†’ Nat\n    | 0 => 1\n    | i+1 => (f x) i\n  ```\n\nUnlike `Lean.Elab.Structural.preprocess`, do _not_ beta-reduce, as it could\nremove `let_fun`-lambdas that contain explicit termination proofs.\n(Note(kmill): this last statement no longer affects `let_fun`/`have`.)\n","docLink":"./Lean/Elab/PreDefinition/WF/FloatRecApp.html#Lean.Elab.WF.floatRecApp","kind":"def","line":17,"name":"Lean.Elab.WF.floatRecApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/FloatRecApp.lean#L17-L39"}}],"imports":["Lean.Meta.Transform","Lean.Elab.RecAppSyntax"],"instances":[],"name":"Lean.Elab.PreDefinition.WF.FloatRecApp"}