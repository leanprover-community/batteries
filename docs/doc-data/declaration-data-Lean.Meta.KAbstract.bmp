{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/KAbstract.html#Lean.Meta.kabstract\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occs</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.all\">Occurrences.all</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Abstract occurrences of `p` in `e`. We detect subterms equivalent to `p` using key-matching.\nThat is, only perform `isDefEq` tests when the head symbol of subterm is equivalent to head symbol of `p`.\n\nBy default, all occurrences are abstracted,\nbut this behavior can be controlled using the `occs` parameter.\n\nAll matches of `p` in `e` are considered for occurrences,\nbut for each match that is included by the `occs` parameter,\nmetavariables appearing in `p` (or `e`) may become instantiated,\naffecting the possibility of subsequent matches.\nFor matches that are not included in the `occs` parameter, the metavariable context is rolled back\nto prevent blocking subsequent matches which require different instantiations.\n","docLink":"./Lean/Meta/KAbstract.html#Lean.Meta.kabstract","kind":"def","line":16,"name":"Lean.Meta.kabstract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/KAbstract.lean#L16-L67"}}],"imports":["Lean.HeadIndex","Lean.Meta.Basic"],"instances":[],"name":"Lean.Meta.KAbstract"}