{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.ConstantInfo.getUsedConstantsAsSet\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">getUsedConstantsAsSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"Return all names appearing in the type or value of a `ConstantInfo`. ","docLink":"./Lean/Util/FoldConsts.html#Lean.ConstantInfo.getUsedConstantsAsSet","kind":"def","line":65,"name":"Lean.ConstantInfo.getUsedConstantsAsSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L65-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstantsAsSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getUsedConstantsAsSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"Like `Expr.getUsedConstants`, but produce a `NameSet`. ","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstantsAsSet","kind":"def","line":57,"name":"Lean.Expr.getUsedConstantsAsSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L57-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getUsedConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.getUsedConstants","kind":"def","line":54,"name":"Lean.Expr.getUsedConstants","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L54-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.foldConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">foldConsts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Apply `f` to every constant occurring in `e` once. ","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.foldConsts","kind":"opaque","line":50,"name":"Lean.Expr.foldConsts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L50-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.foldUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">foldUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.foldUnsafe","kind":"def","line":45,"name":"Lean.Expr.FoldConstsImpl.foldUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\">FoldM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.fold","kind":"def","line":24,"name":"Lean.Expr.FoldConstsImpl.fold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L24-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">FoldM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.FoldM","kind":"def","line":22,"name":"Lean.Expr.FoldConstsImpl.FoldM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">visitedConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameHashSet\">NameHashSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visitedConsts","kind":"def","line":20,"name":"Lean.Expr.FoldConstsImpl.State.visitedConsts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">PtrSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.visited","kind":"def","line":19,"name":"Lean.Expr.FoldConstsImpl.State.visited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visited</span> : <span class=\"fn\"><a href=\"./Lean/Util/PtrSet.html#Lean.PtrSet\">PtrSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visitedConsts</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameHashSet\">NameHashSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State.mk","kind":"ctor","line":18,"name":"Lean.Expr.FoldConstsImpl.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">FoldConstsImpl</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/FoldConsts.html#Lean.Expr.FoldConstsImpl.State","kind":"structure","line":18,"name":"Lean.Expr.FoldConstsImpl.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/FoldConsts.lean#L18-L20"}}],"imports":["Lean.Util.PtrSet","Lean.Declaration"],"instances":[],"name":"Lean.Util.FoldConsts"}