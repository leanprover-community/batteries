{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.selector\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">selector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter\">Waiter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Create a `Selector` that resolves once `s` has received the signal. Note that calling this function\ndoes not start the signal waiter.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.selector","kind":"def","line":240,"name":"Std.Internal.IO.Async.Signal.Waiter.selector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L240-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.stop\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter\">Waiter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If:\n- `s` is still running this stops `s` without resolving any remaining `AsyncTask`s that were created\n  through `wait`. Note that if another `AsyncTask` is binding on any of these it is going hang\n  forever without further intervention.\n- `s` is not yet or not anymore running this is a no-op.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.stop","kind":"def","line":229,"name":"Std.Internal.IO.Async.Signal.Waiter.stop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L229-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.wait\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">wait</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter\">Waiter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span></div></div>","info":{"doc":"If:\n- `s` is not yet running start listening and return an `AsyncTask` that will resolve once the\n   previously configured signal is received.\n- `s` is already or not anymore running return the same `AsyncTask` as the first call to `wait`.\n\nThe resolved `AsyncTask` contains the signal number that was received.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.wait","kind":"def","line":216,"name":"Std.Internal.IO.Async.Signal.Waiter.wait","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L216-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">signum</span> : <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">repeating</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter\">Waiter</a></span></div></div>","info":{"doc":"Set up a `Signal.Waiter` that waits for the specified `signum`.\nThis function only initializes but does not yet start listening for the signal.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.mk","kind":"def","line":207,"name":"Std.Internal.IO.Async.Signal.Waiter.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L207-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.native\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">native</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter\">Waiter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/UV/Signal.html#Std.Internal.UV.Signal\">UV.Signal</a></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter.native","kind":"def","line":203,"name":"Std.Internal.IO.Async.Signal.Waiter.native","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L203-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">Waiter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Signal.Waiter` can be used to handle a specific signal once.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.Waiter","kind":"structure","line":198,"name":"Std.Internal.IO.Async.Signal.Waiter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L198-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.toInt32\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a> → <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>","info":{"doc":"Converts a `Signal` to its corresponding `Int32` value as defined in the libc `signal.h`.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.toInt32","kind":"def","line":169,"name":"Std.Internal.IO.Async.Signal.toInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L169-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instBEqSignal.beq\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">instBEqSignal</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a> → <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instBEqSignal.beq","kind":"def","line":165,"name":"Std.Internal.IO.Async.instBEqSignal.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instBEqSignal\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">instBEqSignal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instBEqSignal","kind":"instance","line":165,"name":"Std.Internal.IO.Async.instBEqSignal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instDecidableEqSignal\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">instDecidableEqSignal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instDecidableEqSignal","kind":"instance","line":165,"name":"Std.Internal.IO.Async.instDecidableEqSignal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instReprSignal\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">instReprSignal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instReprSignal","kind":"instance","line":165,"name":"Std.Internal.IO.Async.instReprSignal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instReprSignal.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">instReprSignal</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.instReprSignal.repr","kind":"def","line":165,"name":"Std.Internal.IO.Async.instReprSignal.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigusr2\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigusr2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"User-defined signal 2.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigusr2","kind":"ctor","line":160,"name":"Std.Internal.IO.Async.Signal.sigusr2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L160-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigusr1\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigusr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"User-defined signal 1.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigusr1","kind":"ctor","line":155,"name":"Std.Internal.IO.Async.Signal.sigusr1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L155-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.siginfo\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">siginfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Status request from keyboard.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.siginfo","kind":"ctor","line":150,"name":"Std.Internal.IO.Async.Signal.siginfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L150-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigwinch\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigwinch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Window size change.\n\nNotes:\n- SIGWINCH is raised whenever the runtime detects the console has been resized.\n- Under console emulators, or on 32-bit apps on 64-bit systems, SIGWINCH is emulated.\n- In these cases, signals may not be delivered timely.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigwinch","kind":"ctor","line":140,"name":"Std.Internal.IO.Async.Signal.sigwinch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L140-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigprof\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigprof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Profiling timer expired.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigprof","kind":"ctor","line":135,"name":"Std.Internal.IO.Async.Signal.sigprof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L135-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigvtalrm\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigvtalrm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Virtual alarm clock.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigvtalrm","kind":"ctor","line":130,"name":"Std.Internal.IO.Async.Signal.sigvtalrm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L130-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigxfsz\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigxfsz</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"File size limit exceeded.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigxfsz","kind":"ctor","line":125,"name":"Std.Internal.IO.Async.Signal.sigxfsz","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L125-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigxcpu\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigxcpu</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"CPU time limit exceeded.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigxcpu","kind":"ctor","line":120,"name":"Std.Internal.IO.Async.Signal.sigxcpu","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L120-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigio\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"I/O now possible.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigio","kind":"ctor","line":115,"name":"Std.Internal.IO.Async.Signal.sigio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L115-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigttou\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigttou</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Background write attempted to control terminal\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigttou","kind":"ctor","line":110,"name":"Std.Internal.IO.Async.Signal.sigttou","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L110-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigttin\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigttin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Background read attempted from control terminal.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigttin","kind":"ctor","line":105,"name":"Std.Internal.IO.Async.Signal.sigttin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L105-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigchld\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigchld</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Child status has changed.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigchld","kind":"ctor","line":100,"name":"Std.Internal.IO.Async.Signal.sigchld","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L100-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigcont\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigcont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Continue after stop.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigcont","kind":"ctor","line":95,"name":"Std.Internal.IO.Async.Signal.sigcont","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L95-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigtstp\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigtstp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Stop typed at tty.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigtstp","kind":"ctor","line":90,"name":"Std.Internal.IO.Async.Signal.sigtstp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L90-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigurg\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigurg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Urgent condition on socket.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigurg","kind":"ctor","line":85,"name":"Std.Internal.IO.Async.Signal.sigurg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L85-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigterm\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigterm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Termination signal.\n\nNotes:\n- On Windows, watchers can be created for SIGTERM, but they never receive the signal.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigterm","kind":"ctor","line":77,"name":"Std.Internal.IO.Async.Signal.sigterm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L77-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigalrm\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigalrm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Real-time timer expired.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigalrm","kind":"ctor","line":72,"name":"Std.Internal.IO.Async.Signal.sigalrm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L72-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigsys\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigsys</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Bad system call.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigsys","kind":"ctor","line":67,"name":"Std.Internal.IO.Async.Signal.sigsys","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L67-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigemt\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigemt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Emulate instruction executed\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigemt","kind":"ctor","line":62,"name":"Std.Internal.IO.Async.Signal.sigemt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L62-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigabrt\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigabrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Abort signal.\n\nNotes:\n- SIGABRT is not catchable if generated by certain runtime functions, such as abort or assertion failure.\n- On Windows, watchers can be created for SIGABRT, but they never receive the signal.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigabrt","kind":"ctor","line":53,"name":"Std.Internal.IO.Async.Signal.sigabrt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L53-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigtrap\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigtrap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Trace/breakpoint trap.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigtrap","kind":"ctor","line":48,"name":"Std.Internal.IO.Async.Signal.sigtrap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L48-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigquit\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigquit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Quit program.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigquit","kind":"ctor","line":43,"name":"Std.Internal.IO.Async.Signal.sigquit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L43-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigint\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sigint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Interrupt program.\n\n* Normally delivered when the user presses CTRL+C. Not generated when terminal raw mode is enabled (like Unix).\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sigint","kind":"ctor","line":36,"name":"Std.Internal.IO.Async.Signal.sigint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L36-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sighup\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span>.<span class=\"name\">sighup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\">Signal</a></div></div>","info":{"doc":"Hangup detected on controlling terminal or death of controlling process. SIGHUP is not\ngenerated when terminal raw mode is enabled.\n\nOn Windows:\n* SIGHUP is generated when the user closes the console window. The program is given ~10 seconds to\n  cleanup before Windows unconditionally terminates it.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal.sighup","kind":"ctor","line":26,"name":"Std.Internal.IO.Async.Signal.sighup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L26-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Signal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Unix style signals for Unix and Windows. SIGKILL and SIGSTOP are missing because they cannot be caught.\nSIGPIPE is not present because the runtime ignores the signal.\n","docLink":"./Std/Internal/Async/Signal.html#Std.Internal.IO.Async.Signal","kind":"inductive","line":20,"name":"Std.Internal.IO.Async.Signal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Signal.lean#L20-L165"}}],"imports":["Std.Time","Std.Internal.UV.Signal","Std.Internal.Async.Select"],"instances":[{"className":"Repr","name":"Std.Internal.IO.Async.instReprSignal","typeNames":["Std.Internal.IO.Async.Signal"]},{"className":"Decidable","name":"Std.Internal.IO.Async.instDecidableEqSignal","typeNames":["Eq"]},{"className":"BEq","name":"Std.Internal.IO.Async.instBEqSignal","typeNames":["Std.Internal.IO.Async.Signal"]}],"name":"Std.Internal.Async.Signal"}