{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastShiftLeft\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">denote_blastShiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w0</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ArbitraryShiftTarget\">ArbitraryShiftTarget</a></span> <span class=\"fn\">w0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ArbitraryShiftTarget.n\">n</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hleft</span> : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w0</span>), <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ArbitraryShiftTarget.target\">target</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hright</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ArbitraryShiftTarget.n\">n</a></span>),\n    <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ArbitraryShiftTarget.distance\">distance</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft\">blastShiftLeft</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft\">blastShiftLeft</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">rhs</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastShiftLeft","kind":"theorem","line":273,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastShiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L273-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.go_denote_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastShiftLeft</span>.<span class=\"name\">go_denote_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distance</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hacc</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>),\n    <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hright</span> : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>), <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">distance</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">acc</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">acc</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">rhs</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.go_denote_eq","kind":"theorem","line":236,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.go_denote_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L236-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.twoPowShift_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastShiftLeft</span>.<span class=\"name\">twoPowShift_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget\">TwoPowShiftTarget</a> <span class=\"fn\">aig</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget.n\">n</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hleft</span> : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>), <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget.lhs\">lhs</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hright</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget.n\">n</a></span>), <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget.rhs\">rhs</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.twoPowShift\">twoPowShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.twoPowShift\">twoPowShift</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">BitVec.twoPow</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget.n\">n</a></span> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.TwoPowShiftTarget.pow\">pow</a></span></span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">idx</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.twoPowShift_eq","kind":"theorem","line":174,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeft.twoPowShift_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L174-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastShiftLeftConst\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">denote_blastShiftLeftConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ShiftTarget\">ShiftTarget</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst\">blastShiftLeftConst</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst\">blastShiftLeftConst</a> <span class=\"fn\">aig</span> <span class=\"fn\">target</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if hidx : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ShiftTarget.distance\">distance</a></span> then <a href=\"./Init/Prelude.html#Bool.false\">false</a>\n  else <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ShiftTarget.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> (<span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">target</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.ShiftTarget.distance\">distance</a></span>) <span class=\"fn\">⋯</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastShiftLeftConst","kind":"theorem","line":152,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.denote_blastShiftLeftConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L152-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_denote_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastShiftLeftConst</span>.<span class=\"name\">go_denote_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distance</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx1</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">idx</span> →\n  <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a>       <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>,\n        <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx1</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">if hidx : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">distance</span> then <a href=\"./Init/Prelude.html#Bool.false\">false</a> else <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">input</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> (<span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">distance</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_denote_eq","kind":"theorem","line":84,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_denote_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L84-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_denote_mem_prefix\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastShiftLeftConst</span>.<span class=\"name\">go_denote_mem_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distance</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hstart</span> : <span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>, <span class=\"fn\">ref</span> := <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">{</a> <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">invert</span> := <span class=\"fn\">inv</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">}</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">{</a> <span class=\"fn\">gate</span> := <span class=\"fn\">start</span>, <span class=\"fn\">invert</span> := <span class=\"fn\">inv</span>, <span class=\"fn\">hgate</span> := <span class=\"fn\">hstart</span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">}</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_denote_mem_prefix","kind":"theorem","line":68,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_denote_mem_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L68-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_get\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastShiftLeftConst</span>.<span class=\"name\">go_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distance</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">curr</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.cast\">cast</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_get","kind":"theorem","line":59,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L59-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_get_aux\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastShiftLeftConst</span>.<span class=\"name\">go_get_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distance</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">curr</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfoo</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">input</span> <span class=\"fn\">distance</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.vec\">vec</a></span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.RefVec.get\">get</a></span> <span class=\"fn\">idx</span> <span class=\"fn\">hidx</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.cast\">cast</a></span> <span class=\"fn\">hfoo</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_get_aux","kind":"theorem","line":32,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastShiftLeftConst.go_get_aux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Lemmas/Operations/ShiftLeft.lean#L32-L57"}}],"imports":["Init.Data.BitVec.Bitblast","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Basic","Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Operations.ShiftLeft"],"instances":[],"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Lemmas.Operations.ShiftLeft"}