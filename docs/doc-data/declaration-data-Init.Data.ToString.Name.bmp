{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ToString/Name.html#Lean.Name.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ToString/Name.html#Lean.Name.instToString","kind":"instance","line":124,"name":"Lean.Name.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ToString/Name.lean#L124-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ToString/Name.html#Lean.Name.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">escape</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Converts a name to a string.\n\n- If `escape` is `true`, then escapes name components using `«` and `»` to ensure that\nthose names that can appear in source files round trip.\nNames with number components, anonymous names, and names containing `»` might not round trip.\nFurthermore, \"pseudo-syntax\" produced by the delaborator, such as `_`, `#0` or `?u`, is not escaped.\n","docLink":"./Init/Data/ToString/Name.html#Lean.Name.toString","kind":"def","line":112,"name":"Lean.Name.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ToString/Name.lean#L112-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ToString/Name.html#Lean.Name.toStringWithToken\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toStringWithToken</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">escape</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isToken</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Converts a name to a string.\n\n- If `escape` is `true`, then escapes name components using `«` and `»` to ensure that\n  those names that can appear in source files round trip.\n  Names with number components, anonymous names, and names containing `»` might not round trip.\n  Furthermore, \"pseudo-syntax\" produced by the delaborator, such as `_`, `#0` or `?u`, is not escaped.\n- The optional `isToken` function is used when `escape` is `true` to determine whether more\n  escaping is necessary to avoid parser tokens.\n  The insertion algorithm works so long as parser tokens do not themselves contain `«` or `»`.\n","docLink":"./Init/Data/ToString/Name.html#Lean.Name.toStringWithToken","kind":"def","line":85,"name":"Lean.Name.toStringWithToken","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ToString/Name.lean#L85-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ToString/Name.html#Lean.Name.toStringWithSep\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">toStringWithSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">escape</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isToken</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Uses the separator `sep` (usually `\".\"`) to combine the components of the `Name` into a string.\nSee the documentation for `Name.toStringWithToken` for an explanation of `escape` and `isToken`.\n","docLink":"./Init/Data/ToString/Name.html#Lean.Name.toStringWithSep","kind":"def","line":65,"name":"Lean.Name.toStringWithSep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ToString/Name.lean#L65-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ToString/Name.html#Lean.Name.escapePart\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">escapePart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">force</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Creates a round-trippable string name component if possible, otherwise returns `none`.\nNames that are valid identifiers are not escaped, and otherwise, if they do not contain `»`, they are escaped.\n- If `force` is `true`, then even valid identifiers are escaped.\n","docLink":"./Init/Data/ToString/Name.html#Lean.Name.escapePart","kind":"def","line":46,"name":"Lean.Name.escapePart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ToString/Name.lean#L46-L62"}}],"imports":["Init.Data.String.Extra"],"instances":[{"className":"ToString","name":"Lean.Name.instToString","typeNames":["Lean.Name"]}],"name":"Init.Data.ToString.Name"}