{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Bitwise/Basic.html#Int.instHShiftLeftNat\"><span class=\"name\">Int</span>.<span class=\"name\">instHShiftLeftNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Bitwise/Basic.html#Int.instHShiftLeftNat","kind":"instance","line":68,"name":"Int.instHShiftLeftNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Bitwise/Basic.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Bitwise/Basic.html#Int.shiftLeft\"><span class=\"name\">Int</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></span></div></div>","info":{"doc":"Bitwise left shift, usually accessed via the `<<<` operator.\n\nExamples:\n* `1 <<< 2 = 4`\n* `1 <<< 3 = 8`\n* `0 <<< 3 = 0`\n* `0xf1 <<< 4 = 0xf10`\n* `(-1) <<< 3 = -8`\n","docLink":"./Init/Data/Int/Bitwise/Basic.html#Int.shiftLeft","kind":"def","line":53,"name":"Int.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Bitwise/Basic.lean#L53-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Bitwise/Basic.html#Int.instHShiftRightNat\"><span class=\"name\">Int</span>.<span class=\"name\">instHShiftRightNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Bitwise/Basic.html#Int.instHShiftRightNat","kind":"instance","line":51,"name":"Int.instHShiftRightNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Bitwise/Basic.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Bitwise/Basic.html#Int.shiftRight\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></span></div></div>","info":{"doc":"Bitwise right shift, usually accessed via the `>>>` operator.\n\nInterprets the integer as an infinite sequence of bits in two's complement and shifts the value to\nthe right.\n\nExamples:\n* `( 0b0111 : Int) >>> 1 =  0b0011`\n* `( 0b1000 : Int) >>> 1 =  0b0100`\n* `(-0b1000 : Int) >>> 1 = -0b0100`\n* `(-0b0111 : Int) >>> 1 = -0b0100`\n","docLink":"./Init/Data/Int/Bitwise/Basic.html#Int.shiftRight","kind":"def","line":34,"name":"Int.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Bitwise/Basic.lean#L34-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Bitwise/Basic.html#Int.instComplement\"><span class=\"name\">Int</span>.<span class=\"name\">instComplement</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Bitwise/Basic.html#Int.instComplement","kind":"instance","line":32,"name":"Int.instComplement","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Bitwise/Basic.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Bitwise/Basic.html#Int.not\"><span class=\"name\">Int</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"Bitwise not, usually accessed via the `~~~` prefix operator.\n\nInterprets the integer as an infinite sequence of bits in two's complement and complements each bit.\n\nExamples:\n* `~~~(0 : Int) = -1`\n* `~~~(1 : Int) = -2`\n* `~~~(-1 : Int) = 0`\n","docLink":"./Init/Data/Int/Bitwise/Basic.html#Int.not","kind":"def","line":18,"name":"Int.not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Bitwise/Basic.lean#L18-L30"}}],"imports":["Init.Data.Int.Basic","Init.Data.Nat.Bitwise.Basic"],"instances":[{"className":"Complement","name":"Int.instComplement","typeNames":["Int"]},{"className":"HShiftRight","name":"Int.instHShiftRightNat","typeNames":["Int","Nat","Int"]},{"className":"HShiftLeft","name":"Int.instHShiftLeftNat","typeNames":["Int","Nat","Int"]}],"name":"Init.Data.Int.Bitwise.Basic"}