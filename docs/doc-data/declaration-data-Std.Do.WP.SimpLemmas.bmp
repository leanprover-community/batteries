{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.orElse_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">orElse_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse.orElse\">OrElse.orElse</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.orElse_ExceptT","kind":"theorem","line":492,"name":"Std.Do.WP.orElse_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L492-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.orElse_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">orElse_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse.orElse\">OrElse.orElse</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.orElse_Except","kind":"theorem","line":487,"name":"Std.Do.WP.orElse_Except","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L487-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.orElse_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">orElse_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">δ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">EStateM.Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse.orElse\">OrElse.orElse</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">ε</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">EStateM.Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">EStateM.Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>\n    <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.orElse_EStateM","kind":"theorem","line":480,"name":"Std.Do.WP.orElse_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L480-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_lift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_lift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">ε' </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_lift_ExceptT","kind":"theorem","line":451,"name":"Std.Do.WP.tryCatch_lift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L451-L457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">xs</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_StateT","kind":"theorem","line":446,"name":"Std.Do.WP.tryCatch_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L446-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ReaderT","kind":"theorem","line":441,"name":"Std.Do.WP.tryCatch_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L441-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">δ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">EStateM.Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">EStateM.Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">EStateM.Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>\n    <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_EStateM","kind":"theorem","line":434,"name":"Std.Do.WP.tryCatch_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L434-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ExceptT","kind":"theorem","line":425,"name":"Std.Do.WP.tryCatch_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L425-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_Except","kind":"theorem","line":418,"name":"Std.Do.WP.tryCatch_Except","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L418-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatchThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatchThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#tryCatchThe\">_root_.tryCatchThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatchThe","kind":"theorem","line":414,"name":"Std.Do.WP.tryCatchThe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L414-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_MonadExcept","kind":"theorem","line":410,"name":"Std.Do.WP.tryCatch_MonadExcept","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L410-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_lift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_lift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">ε' </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_lift_ExceptT","kind":"theorem","line":402,"name":"Std.Do.WP.throw_lift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L402-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_StateT","kind":"theorem","line":396,"name":"Std.Do.WP.throw_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L396-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ReaderT","kind":"theorem","line":392,"name":"Std.Do.WP.throw_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L392-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_EStateM","kind":"theorem","line":387,"name":"Std.Do.WP.throw_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L387-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ExceptT","kind":"theorem","line":382,"name":"Std.Do.WP.throw_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L382-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_Except","kind":"theorem","line":377,"name":"Std.Do.WP.throw_Except","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L377-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throwThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throwThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#throwThe\">_root_.throwThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throwThe","kind":"theorem","line":373,"name":"Std.Do.WP.throwThe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L373-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_MonadExcept","kind":"theorem","line":369,"name":"Std.Do.WP.throw_MonadExcept","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L369-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.control_MonadControlT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">control_MonadControlT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#control\">control</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.liftWith\">liftWith</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <a href=\"./Init/Control/Basic.html#MonadControlT.restoreM\">restoreM</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.control_MonadControlT","kind":"theorem","line":351,"name":"Std.Do.WP.control_MonadControlT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L351-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.controlAt_MonadControlT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">controlAt_MonadControlT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#controlAt\">controlAt</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.liftWith\">liftWith</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <a href=\"./Init/Control/Basic.html#MonadControlT.restoreM\">restoreM</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.controlAt_MonadControlT","kind":"theorem","line":346,"name":"Std.Do.WP.controlAt_MonadControlT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L346-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">restoreM_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.restoreM\">restoreM</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_refl","kind":"theorem","line":342,"name":"Std.Do.WP.restoreM_refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L342-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">restoreM_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl\">MonadControl</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">o</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.restoreM\">restoreM</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.restoreM\">MonadControl.restoreM</a> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.restoreM\">restoreM</a> <span class=\"fn\">x</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_trans","kind":"theorem","line":338,"name":"Std.Do.WP.restoreM_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L338-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">restoreM_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.restoreM\">MonadControl.restoreM</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_ExceptT","kind":"theorem","line":330,"name":"Std.Do.WP.restoreM_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L330-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">restoreM_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.restoreM\">MonadControl.restoreM</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_ReaderT","kind":"theorem","line":325,"name":"Std.Do.WP.restoreM_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L325-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">restoreM_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.restoreM\">MonadControl.restoreM</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.restoreM_StateT","kind":"theorem","line":320,"name":"Std.Do.WP.restoreM_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L320-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">liftWith_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.liftWith\">liftWith</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">x</span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_refl","kind":"theorem","line":315,"name":"Std.Do.WP.liftWith_refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L315-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">liftWith_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl\">MonadControl</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">o</span> <span class=\"fn\">β</span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.liftWith\">liftWith</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.liftWith\">MonadControl.liftWith</a> <span class=\"fn\">fun (<span class=\"fn\">x₂</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControl.stM\">MonadControl.stM</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span> <span class=\"fn\">β</span>)</span></span></span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT.liftWith\">liftWith</a> <span class=\"fn\">fun (<span class=\"fn\">x₁</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Control/Basic.html#MonadControlT.stM\">stM</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span>)</span></span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">x₂</span></span></span></span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_trans","kind":"theorem","line":310,"name":"Std.Do.WP.liftWith_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L310-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">liftWith_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span>)</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.liftWith\">MonadControl.liftWith</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_ExceptT","kind":"theorem","line":303,"name":"Std.Do.WP.liftWith_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L303-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">liftWith_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.liftWith\">MonadControl.liftWith</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_ReaderT","kind":"theorem","line":297,"name":"Std.Do.WP.liftWith_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L297-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">liftWith_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">({<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>)</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControl.liftWith\">MonadControl.liftWith</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.liftWith_StateT","kind":"theorem","line":291,"name":"Std.Do.WP.liftWith_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L291-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withTheReader_MonadWithReaderOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withTheReader_MonadWithReaderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#withTheReader\">withTheReader</a> <span class=\"fn\">ρ</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withTheReader_MonadWithReaderOf","kind":"theorem","line":277,"name":"Std.Do.WP.withTheReader_MonadWithReaderOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L277-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReader\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withReader_MonadWithReader</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReader.withReader\">withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReader","kind":"theorem","line":273,"name":"Std.Do.WP.withReader_MonadWithReader","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L273-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReaderOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withReader_MonadWithReaderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">nsh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">nsh</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">nsh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReaderOf","kind":"theorem","line":269,"name":"Std.Do.WP.withReader_MonadWithReaderOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L269-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withReader_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">r</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_ReaderT","kind":"theorem","line":265,"name":"Std.Do.WP.withReader_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L265-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_refl","kind":"theorem","line":261,"name":"Std.Do.WP.monadMap_refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L261-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">o</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_trans","kind":"theorem","line":257,"name":"Std.Do.WP.monadMap_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L257-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ExceptT","kind":"theorem","line":250,"name":"Std.Do.WP.monadMap_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L250-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ReaderT","kind":"theorem","line":244,"name":"Std.Do.WP.monadMap_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L244-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_StateT","kind":"theorem","line":238,"name":"Std.Do.WP.monadMap_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L238-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.adaptExcept_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">adaptExcept_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">ε' </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">ε'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.adaptExcept\">EStateM.adaptExcept</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.adaptExcept_EStateM","kind":"theorem","line":214,"name":"Std.Do.WP.adaptExcept_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L214-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_EStateM","kind":"theorem","line":209,"name":"Std.Do.WP.modifyGet_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L209-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_EStateM","kind":"theorem","line":204,"name":"Std.Do.WP.set_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L204-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_EStateM","kind":"theorem","line":199,"name":"Std.Do.WP.get_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L199-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.adapt_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">adapt_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">ε' </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">ε'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT.adapt\">ExceptT.adapt</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.adapt_ExceptT","kind":"theorem","line":191,"name":"Std.Do.WP.adapt_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L191-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_StateT","kind":"theorem","line":186,"name":"Std.Do.WP.modifyGet_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L186-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_StateT","kind":"theorem","line":181,"name":"Std.Do.WP.set_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L181-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_StateT","kind":"theorem","line":176,"name":"Std.Do.WP.get_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L176-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.adapt_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">adapt_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">ρ' </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT.adapt\">ReaderT.adapt</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ'</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">r</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.adapt_ReaderT","kind":"theorem","line":172,"name":"Std.Do.WP.adapt_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L172-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">read_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">r</span> <span class=\"fn\">r</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_ReaderT","kind":"theorem","line":167,"name":"Std.Do.WP.read_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L167-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.getModify_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">getModify_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#getModify\">getModify</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.getModify_MonadStateOf","kind":"theorem","line":161,"name":"Std.Do.WP.getModify_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L161-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyThe_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyThe_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#modifyThe\">modifyThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyThe_MonadStateOf","kind":"theorem","line":157,"name":"Std.Do.WP.modifyThe_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L157-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modify_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modify_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#modify\">modify</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modify_MonadStateOf","kind":"theorem","line":153,"name":"Std.Do.WP.modify_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L153-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGetThe_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGetThe_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#modifyGetThe\">modifyGetThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGetThe_MonadStateOf","kind":"theorem","line":149,"name":"Std.Do.WP.modifyGetThe_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L149-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadState\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_MonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadState","kind":"theorem","line":145,"name":"Std.Do.WP.modifyGet_MonadState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L145-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadStateOf","kind":"theorem","line":140,"name":"Std.Do.WP.modifyGet_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L140-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadState\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_MonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.set\">MonadState.set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadState","kind":"theorem","line":136,"name":"Std.Do.WP.set_MonadState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L136-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadStateOf","kind":"theorem","line":132,"name":"Std.Do.WP.set_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L132-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.getThe_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">getThe_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#getThe\">getThe</a> <span class=\"fn\">σ</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.getThe_MonadStateOf","kind":"theorem","line":128,"name":"Std.Do.WP.getThe_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L128-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadState\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_MonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadState.get\">get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadState","kind":"theorem","line":124,"name":"Std.Do.WP.get_MonadState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L124-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadStateOf","kind":"theorem","line":120,"name":"Std.Do.WP.get_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L120-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReader\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">read_MonadReader</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReader.read\">read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReader","kind":"theorem","line":114,"name":"Std.Do.WP.read_MonadReader","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.readThe_MonadReaderOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">readThe_MonadReaderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#readThe\">readThe</a> <span class=\"fn\">ρ</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.readThe_MonadReaderOf","kind":"theorem","line":110,"name":"Std.Do.WP.readThe_MonadReaderOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L110-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReaderOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">read_MonadReaderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <a href=\"./Init/Prelude.html#MonadReader.read\">read</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReaderOf","kind":"theorem","line":106,"name":"Std.Do.WP.read_MonadReaderOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">lift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT.lift\">ExceptT.lift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_ExceptT","kind":"theorem","line":99,"name":"Std.Do.WP.lift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L99-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">lift_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT.lift\">StateT.lift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_StateT","kind":"theorem","line":95,"name":"Std.Do.WP.lift_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT.monadLift\">monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_refl","kind":"theorem","line":89,"name":"Std.Do.WP.monadLift_refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L89-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT.monadLift\">monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadLiftT.monadLift\">monadLift</a> <span class=\"fn\">x</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_trans","kind":"theorem","line":85,"name":"Std.Do.WP.monadLift_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L85-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ExceptT","kind":"theorem","line":80,"name":"Std.Do.WP.monadLift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L80-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ReaderT","kind":"theorem","line":76,"name":"Std.Do.WP.monadLift_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L76-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_StateT","kind":"theorem","line":72,"name":"Std.Do.WP.monadLift_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L72-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.seq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">f</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.seq","kind":"theorem","line":60,"name":"Std.Do.WP.seq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.map\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.map","kind":"theorem","line":56,"name":"Std.Do.WP.map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L56-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.bind","kind":"theorem","line":52,"name":"Std.Do.WP.bind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.pure","kind":"theorem","line":48,"name":"Std.Do.WP.pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L48-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ExceptT_run\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">ExceptT_run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ExceptT_run","kind":"theorem","line":39,"name":"Std.Do.WP.ExceptT_run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L39-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.StateT_run\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">StateT_run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.StateT_run","kind":"theorem","line":35,"name":"Std.Do.WP.StateT_run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ReaderT_run\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">ReaderT_run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ReaderT_run","kind":"theorem","line":31,"name":"Std.Do.WP.ReaderT_run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/SimpLemmas.lean#L31-L33"}}],"imports":["Std.Do.WP.Monad"],"instances":[],"name":"Std.Do.WP.SimpLemmas"}