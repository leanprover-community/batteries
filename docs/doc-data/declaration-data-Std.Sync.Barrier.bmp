{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Barrier.html#Std.Barrier.wait\"><span class=\"name\">Std</span>.<span class=\"name\">Barrier</span>.<span class=\"name\">wait</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">barrier</span> : <a href=\"./Std/Sync/Barrier.html#Std.Barrier\">Barrier</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Blocks the current thread until all threads have rendezvoused here.\n\nBarriers are re-usable after all threads have rendezvoused once, and can be used continuously.\n\nA single (arbitrary) thread will receive `true` when returning from this function, and all other\nthreads will receive `false`.\n","docLink":"./Std/Sync/Barrier.html#Std.Barrier.wait","kind":"def","line":43,"name":"Std.Barrier.wait","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Barrier.lean#L43-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Barrier.html#Std.Barrier.new\"><span class=\"name\">Std</span>.<span class=\"name\">Barrier</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numThreads</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Std/Sync/Barrier.html#Std.Barrier\">Barrier</a></span></div></div>","info":{"doc":"Creates a new barrier that can block a given number of threads.\n","docLink":"./Std/Sync/Barrier.html#Std.Barrier.new","kind":"def","line":33,"name":"Std.Barrier.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Barrier.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Barrier.html#Std.Barrier.numThreads\"><span class=\"name\">Std</span>.<span class=\"name\">Barrier</span>.<span class=\"name\">numThreads</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Sync/Barrier.html#Std.Barrier\">Barrier</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Std/Sync/Barrier.html#Std.Barrier.numThreads","kind":"def","line":31,"name":"Std.Barrier.numThreads","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Barrier.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Barrier.html#Std.Barrier\"><span class=\"name\">Std</span>.<span class=\"name\">Barrier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Barrier` will block `n - 1` threads which call `Barrier.wait` and then wake up all threads at\nonce when the `n`-th thread calls `Barrier.wait`.\n","docLink":"./Std/Sync/Barrier.html#Std.Barrier","kind":"structure","line":24,"name":"Std.Barrier","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Barrier.lean#L24-L31"}}],"imports":["Std.Sync.Mutex"],"instances":[],"name":"Std.Sync.Barrier"}