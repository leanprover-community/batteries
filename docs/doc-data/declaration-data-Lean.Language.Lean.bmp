{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">waitForFinalCmdState?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snap</span> : <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">InitialSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a></span></div></div>","info":{"doc":"Waits for and returns final command state, if importing was successful. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?","kind":"def","line":794,"name":"Lean.Language.Lean.waitForFinalCmdState?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L794-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.processCommands\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">processCommands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputCtx</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Parser.InputContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parserState</span> : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commandState</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Parser.InputContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a>)</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a>)</span></span></div></div>","info":{"doc":"Convenience function for tool uses of the language processor that skips header handling.\n","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.processCommands","kind":"def","line":780,"name":"Lean.Language.Lean.processCommands","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L780-L792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setupImports</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Import.html#Lean.Elab.HeaderSyntax\">Elab.HeaderSyntax</a> → <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">InitialSnapshot</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">ProcessingM</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">InitialSnapshot</a></span></div></div>","info":{"doc":"Entry point of the Lean language processor.\n\nThe `setupImports` function is called after the header has been parsed and before the first command\nis parsed in order to supply additional file metadata (or abort with a given terminal snapshot); see\n`SetupImportsResult`.\n\n`old?` is a previous resulting snapshot, if any, to be reused for incremental processing.\n","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process","kind":"def","line":355,"name":"Lean.Language.Lean.process","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L355-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.experimental.module\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">experimental</span>.<span class=\"name\">module</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Allow use of module system ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.experimental.module","kind":"opaque","line":349,"name":"Lean.Language.Lean.experimental.module","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L349-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.reparseOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">reparseOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></span></div></div>","info":{"doc":"Parses values of options registered during import and left by the C++ frontend as strings.\nRemoves `weak` prefixes from both parsed and unparsed options and fails if any option names remain\nunknown.\n","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.reparseOptions","kind":"def","line":301,"name":"Lean.Language.Lean.reparseOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L301-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.plugins\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">plugins</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Lean plugins to load as part of the environment setup. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.plugins","kind":"def","line":299,"name":"Lean.Language.Lean.SetupImportsResult.plugins","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.importArts\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">importArts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <a href=\"./Lean/Setup.html#Lean.ImportArtifacts\">ImportArtifacts</a></span></div></div>","info":{"doc":"Pre-resolved artifacts of transitively imported modules. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.importArts","kind":"def","line":297,"name":"Lean.Language.Lean.SetupImportsResult.importArts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L297-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.trustLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">trustLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Kernel trust level. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.trustLevel","kind":"def","line":295,"name":"Lean.Language.Lean.SetupImportsResult.trustLevel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L295-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>","info":{"doc":"Options provided outside of the file content, e.g. on the cmdline or in the lakefile. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.opts","kind":"def","line":293,"name":"Lean.Language.Lean.SetupImportsResult.opts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.imports\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">imports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Setup.html#Lean.Import\">Import</a></span></div></div>","info":{"doc":"Direct imports of the file being processed. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.imports","kind":"def","line":291,"name":"Lean.Language.Lean.SetupImportsResult.imports","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L291-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.isModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">isModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the file is participating in the module system. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.isModule","kind":"def","line":289,"name":"Lean.Language.Lean.SetupImportsResult.isModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L289-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mainModuleName\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">mainModuleName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Module name of the file being processed. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mainModuleName","kind":"def","line":287,"name":"Lean.Language.Lean.SetupImportsResult.mainModuleName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L287-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModuleName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isModule</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Setup.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">importArts</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <a href=\"./Lean/Setup.html#Lean.ImportArtifacts\">ImportArtifacts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">plugins</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mk","kind":"ctor","line":285,"name":"Lean.Language.Lean.SetupImportsResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L285-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result of retrieving additional metadata about the current file after parsing imports. In the\nlanguage server, these are derived from the `lake setup-file` result. On the cmdline and for similar\nsimple uses, these can be computed eagerly without looking at the imports.\n","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult","kind":"structure","line":280,"name":"Lean.Language.Lean.SetupImportsResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L280-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.isBeforeEditPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">isBeforeEditPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns true if there was a previous run and the given position is before any textual change\ncompared to it.\n","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.isBeforeEditPos","kind":"def","line":264,"name":"Lean.Language.Lean.isBeforeEditPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L264-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldInputCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Parser.InputContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">ProcessingM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Embeds a `LeanProcessingM` action into `ProcessingM`, optionally using the old input string to speed\nup reuse analysis and supplying a cancellation token that should be triggered as soon as reuse is\nruled out.\n","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM.run","kind":"def","line":253,"name":"Lean.Language.Lean.LeanProcessingM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L253-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftProcessingTLeanProcessingT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">ProcessingT</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\">LeanProcessingT</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","kind":"instance","line":250,"name":"Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L250-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftLeanProcessingMLeanProcessingTIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <span class=\"fn\">(<a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\">LeanProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","kind":"instance","line":247,"name":"Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L247-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Monad holding all relevant data for Lean processing. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM","kind":"def","line":244,"name":"Lean.Language.Lean.LeanProcessingM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L244-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"Monad transformer holding all relevant data for Lean processing. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT","kind":"def","line":242,"name":"Lean.Language.Lean.LeanProcessingT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L242-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.firstDiffPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">firstDiffPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></div></div>","info":{"doc":"Position of the first file difference if there was a previous invocation. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.firstDiffPos?","kind":"def","line":240,"name":"Lean.Language.Lean.LeanProcessingContext.firstDiffPos?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toProcessingContext</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">ProcessingContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">firstDiffPos?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">LeanProcessingContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.mk","kind":"ctor","line":238,"name":"Lean.Language.Lean.LeanProcessingContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.toProcessingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">toProcessingContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">ProcessingContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.toProcessingContext","kind":"def","line":238,"name":"Lean.Language.Lean.LeanProcessingContext.toProcessingContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L238-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">Lean.Language.ProcessingContext</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Lean-specific processing context. ","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext","kind":"structure","line":237,"name":"Lean.Language.Lean.LeanProcessingContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Language/Lean.lean#L237-L240"}}],"imports":["Lean.Language.Util","Lean.Language.Lean.Types","Lean.Elab.Import"],"instances":[{"className":"MonadLift","name":"Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","typeNames":["Lean.Language.Lean.LeanProcessingM","Lean.Language.Lean.LeanProcessingT"]},{"className":"MonadLift","name":"Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","typeNames":["Lean.Language.ProcessingT","Lean.Language.Lean.LeanProcessingT"]}],"name":"Lean.Language.Lean"}