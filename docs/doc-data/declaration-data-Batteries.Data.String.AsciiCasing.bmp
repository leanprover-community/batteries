{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/AsciiCasing.html#String.cmpCaseInsensitiveAsciiOnly\"><span class=\"name\">String</span>.<span class=\"name\">cmpCaseInsensitiveAsciiOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"ASCII-case insensitive implementation comparison returning an `Ordering`. Useful for sorting.\n\n```\n#eval cmpCaseInsensitiveAsciiOnly \"a\" \"A\" -- eq\n#eval cmpCaseInsensitiveAsciiOnly \"a\" \"a\" -- eq\n#eval cmpCaseInsensitiveAsciiOnly \"$\" \"$\" -- eq\n#eval cmpCaseInsensitiveAsciiOnly \"a\" \"b\" -- lt\n#eval cmpCaseInsensitiveAsciiOnly \"γ\" \"Γ\" -- gt\n```\n","docLink":"./Batteries/Data/String/AsciiCasing.html#String.cmpCaseInsensitiveAsciiOnly","kind":"def","line":73,"name":"String.cmpCaseInsensitiveAsciiOnly","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/String/AsciiCasing.lean#L73-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly.isSetoid\"><span class=\"name\">String</span>.<span class=\"name\">beqCaseInsensitiveAsciiOnly</span>.<span class=\"name\">isSetoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Setoid structure on `String` usig `beqCaseInsensitiveAsciiOnly`\n","docLink":"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly.isSetoid","kind":"def","line":57,"name":"String.beqCaseInsensitiveAsciiOnly.isSetoid","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/String/AsciiCasing.lean#L57-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly.eqv\"><span class=\"name\">String</span>.<span class=\"name\">beqCaseInsensitiveAsciiOnly</span>.<span class=\"name\">eqv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x1</span>.<a href=\"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly\">beqCaseInsensitiveAsciiOnly</a></span> <span class=\"fn\">x2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly.eqv","kind":"theorem","line":51,"name":"String.beqCaseInsensitiveAsciiOnly.eqv","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/String/AsciiCasing.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly\"><span class=\"name\">String</span>.<span class=\"name\">beqCaseInsensitiveAsciiOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Bool-valued comparison of two `String`s for *ASCII*-case insensitive equality.\n\n#eval \"abc\".beqCaseInsensitiveAsciiOnly \"ABC\" -- true\n#eval \"cba\".beqCaseInsensitiveAsciiOnly \"ABC\" -- false\n#eval \"$\".beqCaseInsensitiveAsciiOnly \"$\" -- true\n#eval \"a\".beqCaseInsensitiveAsciiOnly \"b\" -- false\n#eval \"γ\".beqCaseInsensitiveAsciiOnly \"Γ\" -- false\n","docLink":"./Batteries/Data/String/AsciiCasing.html#String.beqCaseInsensitiveAsciiOnly","kind":"def","line":38,"name":"String.beqCaseInsensitiveAsciiOnly","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/String/AsciiCasing.lean#L38-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/AsciiCasing.html#String.caseFoldAsciiOnly\"><span class=\"name\">String</span>.<span class=\"name\">caseFoldAsciiOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Case folding for ASCII characters only.\n\nAlphabetic ASCII characters are mapped to their lowercase form, all other characters are left\nunchanged. This agrees with the Unicode case folding algorithm for ASCII characters.\n\n```\n#eval \"ABC\".caseFoldAsciiOnly == \"abc\" -- true\n#eval \"x\".caseFoldAsciiOnly == \"y\" -- false\n#eval \"Àà\".caseFoldAsciiOnly == \"Àà\" -- true\n#eval \"1$#!\".caseFoldAsciiOnly == \"1$#!\" -- true\n```\n","docLink":"./Batteries/Data/String/AsciiCasing.html#String.caseFoldAsciiOnly","kind":"def","line":15,"name":"String.caseFoldAsciiOnly","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/String/AsciiCasing.lean#L15-L27"}}],"imports":["Init","Batteries.Data.Char","Batteries.Data.Char.AsciiCasing"],"instances":[],"name":"Batteries.Data.String.AsciiCasing"}