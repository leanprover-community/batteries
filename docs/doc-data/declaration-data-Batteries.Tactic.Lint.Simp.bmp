{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpComm\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpComm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for commutativity lemmas that are marked simp. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpComm","kind":"def","line":261,"name":"Batteries.Tactic.Lint.simpComm","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L261-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpVarHead\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpVarHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for simp lemmas whose lhs has a variable as head symbol,\nand which hence never fire.\n","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpVarHead","kind":"def","line":238,"name":"Batteries.Tactic.Lint.simpVarHead","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L238-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpNF\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpNF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>","info":{"doc":"A linter for simp lemmas whose lhs is not in simp-normal form, and which hence never fire. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpNF","kind":"def","line":101,"name":"Batteries.Tactic.Lint.simpNF","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L101-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.formatLemmas\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">formatLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">higherOrder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>","info":{"doc":"Render the list of simp lemmas. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.formatLemmas","kind":"def","line":89,"name":"Batteries.Tactic.Lint.formatLemmas","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L89-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.decorateError\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">decorateError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Add message `msg` to any errors thrown inside `k`. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.decorateError","kind":"def","line":85,"name":"Batteries.Tactic.Lint.decorateError","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L85-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns the list of elements in the discrimination tree. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements","kind":"def","line":76,"name":"Lean.Meta.DiscrTree.elements","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L76-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpTheorem\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns true if this is a `@[simp]` declaration. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpTheorem","kind":"def","line":71,"name":"Batteries.Tactic.Lint.isSimpTheorem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L71-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.checkAllSimpTheoremInfos\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">checkAllSimpTheoremInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>","info":{"doc":"Constructs a message from all the simp theorems encoded in the given type. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.checkAllSimpTheoremInfos","kind":"def","line":62,"name":"Batteries.Tactic.Lint.checkAllSimpTheoremInfos","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L62-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isSimpEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">whnfFirst</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether two expressions are equal for the simplifier. That is,\nthey are reducibly-definitional equal, and they have the same head symbol. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpEq","kind":"def","line":54,"name":"Batteries.Tactic.Lint.isSimpEq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L54-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.withSimpTheoremInfos\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">withSimpTheoremInfos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Runs the continuation on all the simp theorems encoded in the given type. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.withSimpTheoremInfos","kind":"def","line":45,"name":"Batteries.Tactic.Lint.withSimpTheoremInfos","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L45-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isCondition\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isCondition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Is this hypothesis a condition that might turn into a `simp` side-goal?\ni.e. is it a proposition that isn't marked as instance implicit? ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isCondition","kind":"def","line":38,"name":"Batteries.Tactic.Lint.isCondition","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L38-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.rhs\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"The result of replacement ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.rhs","kind":"def","line":36,"name":"Batteries.Tactic.Lint.SimpTheoremInfo.rhs","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.lhs\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>","info":{"doc":"The thing to replace ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.lhs","kind":"def","line":34,"name":"Batteries.Tactic.Lint.SimpTheoremInfo.lhs","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.hyps\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"The hypotheses of the theorem ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.hyps","kind":"def","line":32,"name":"Batteries.Tactic.Lint.SimpTheoremInfo.hyps","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a></div></div>","info":{"doc":"","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.mk","kind":"ctor","line":30,"name":"Batteries.Tactic.Lint.SimpTheoremInfo.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The data associated to a simp theorem. ","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo","kind":"structure","line":29,"name":"Batteries.Tactic.Lint.SimpTheoremInfo","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Lint/Simp.lean#L29-L36"}}],"imports":["Init","Lean.Meta.Tactic.Simp.Main","Batteries.Tactic.Lint.Basic","Batteries.Tactic.OpenPrivate","Batteries.Util.LibraryNote","Lean.Meta.Tactic.Simp.SimpTheorems"],"instances":[],"name":"Batteries.Tactic.Lint.Simp"}