{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStore1OfOfMonadDStoreOfFamilyOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">κ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <span class=\"fn\">β</span> <span class=\"fn\">k</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1Of\">MonadStore1Of</a> <span class=\"fn\">k</span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut","kind":"instance","line":42,"name":"Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L42-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad","kind":"instance","line":38,"name":"Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L38-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateTNameMapOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreNameStateTNameMapOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateTNameMapOfMonad","kind":"instance","line":34,"name":"Lake.instMonadStoreNameStateTNameMapOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L34-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Lake/Util/RBArray.html#Lake.RBArray\">RBArray</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad","kind":"instance","line":30,"name":"Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L30-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateTRBArrayOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreStateTRBArrayOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2) → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Lake/Util/RBArray.html#Lake.RBArray\">RBArray</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateTRBArrayOfMonad","kind":"instance","line":26,"name":"Lake.instMonadStoreStateTRBArrayOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L26-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateRefT'DTreeMapOfMonadLiftTSTOfMonadOfLawfulEqCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadDStoreStateRefT'DTreeMapOfMonadLiftTSTOfMonadOfLawfulEqCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ </span><span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">Std.LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">Std.DTreeMap</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateRefT'DTreeMapOfMonadLiftTSTOfMonadOfLawfulEqCmp","kind":"instance","line":22,"name":"Lake.instMonadDStoreStateRefT'DTreeMapOfMonadLiftTSTOfMonadOfLawfulEqCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L22-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateTDTreeMapOfMonadOfLawfulEqCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadDStoreStateTDTreeMapOfMonadOfLawfulEqCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2) → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">Std.LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">Std.DTreeMap</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateTDTreeMapOfMonadOfLawfulEqCmp","kind":"instance","line":18,"name":"Lake.instMonadDStoreStateTDTreeMapOfMonadOfLawfulEqCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/StoreInsts.lean#L18-L20"}}],"imports":["Init.Data.Order","Lean.Data.NameMap.Basic","Lake.Util.RBArray","Lake.Util.Family","Lake.Util.Store"],"instances":[{"className":"Lake.MonadDStore","name":"Lake.instMonadDStoreStateTDTreeMapOfMonadOfLawfulEqCmp","typeNames":["StateT"]},{"className":"Lake.MonadDStore","name":"Lake.instMonadDStoreStateRefT'DTreeMapOfMonadLiftTSTOfMonadOfLawfulEqCmp","typeNames":["StateRefT'"]},{"className":"Lake.MonadDStore","name":"Lake.instMonadStoreStateTRBArrayOfMonad","typeNames":["StateT"]},{"className":"Lake.MonadDStore","name":"Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad","typeNames":["StateRefT'"]},{"className":"Lake.MonadDStore","name":"Lake.instMonadStoreNameStateTNameMapOfMonad","typeNames":["Lean.Name","StateT"]},{"className":"Lake.MonadDStore","name":"Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad","typeNames":["Lean.Name","StateRefT'"]},{"className":"Lake.MonadStore1Of","name":"Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut","typeNames":[]}],"name":"Lake.Util.StoreInsts"}