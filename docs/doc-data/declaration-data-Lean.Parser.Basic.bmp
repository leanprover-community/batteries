{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Syntax.forArgsM\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">forArgsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Syntax.forArgsM","kind":"def","line":2011,"name":"Lean.Syntax.forArgsM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L2011-L2012"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Syntax.foldArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">foldArgs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Syntax.foldArgs","kind":"def","line":2008,"name":"Lean.Syntax.foldArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L2008-L2009"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Syntax.foldArgsM\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">foldArgsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Syntax.foldArgsM","kind":"def","line":2005,"name":"Lean.Syntax.foldArgsM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L2005-L2006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.skip\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">skip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.skip","kind":"def","line":1993,"name":"Lean.Parser.skip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1993-L1996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.fieldIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">fieldIdx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.fieldIdx","kind":"def","line":1987,"name":"Lean.Parser.fieldIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1987-L1991"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.fieldIdxFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">fieldIdxFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.fieldIdxFn","kind":"def","line":1977,"name":"Lean.Parser.fieldIdxFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1977-L1985"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.prattParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">prattParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tables</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">behavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquotParser</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Implements a variant of Pratt's algorithm. In Pratt's algorithms tokens have a right and left binding power.\nIn our implementation, parsers have precedence instead. This method selects a parser (or more, via\n`longestMatchFn`) from `leadingTable` based on the current token. Note that the unindexed `leadingParsers` parsers\nare also tried. We have the unindexed `leadingParsers` because some parsers do not have a \"first token\". Example:\n```\nsyntax term:51 \"≤\" ident \"<\" term \"|\" term : index\n```\nExample, in principle, the set of first tokens for this parser is any token that can start a term, but this set\nis always changing. Thus, this parsing rule is stored as an unindexed leading parser at `leadingParsers`.\nAfter processing the leading parser, we chain with parsers from `trailingTable`/`trailingParsers` that have precedence\nat least `c.prec` where `c` is the `ParsingContext`. Recall that `c.prec` is set by `categoryParser`.\n\nNote that in the original Pratt's algorithm, precedences are only checked before calling trailing parsers. In our\nimplementation, leading *and* trailing parsers check the precedence. We claim our algorithm is more flexible,\nmodular and easier to understand.\n\n`antiquotParser` should be a `mkAntiquot` parser (or always fail) and is tried before all other parsers.\nIt should not be added to the regular leading parsers because it would heavily\noverlap with antiquotation parsers nested inside them. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.prattParser","kind":"def","line":1949,"name":"Lean.Parser.prattParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1949-L1975"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.trailingLoop\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">trailingLoop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tables</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.trailingLoop","kind":"opaque","line":1929,"name":"Lean.Parser.trailingLoop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1929-L1947"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.trailingLoopStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">trailingLoopStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tables</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.trailingLoopStep","kind":"def","line":1926,"name":"Lean.Parser.trailingLoopStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1926-L1927"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.leadingParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">leadingParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tables</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">behavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquotParser</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.leadingParser","kind":"def","line":1923,"name":"Lean.Parser.leadingParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1923-L1924"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.leadingParserAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">leadingParserAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tables</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">behavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.leadingParserAux","kind":"def","line":1908,"name":"Lean.Parser.leadingParserAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1908-L1921"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepBy1\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepBy1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">psep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> := <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.symbol\">symbol</a> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowTrailingSep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepBy1","kind":"def","line":1901,"name":"Lean.Parser.sepBy1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1901-L1902"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">psep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> := <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.symbol\">symbol</a> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowTrailingSep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepBy","kind":"def","line":1898,"name":"Lean.Parser.sepBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1898-L1899"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepByElemParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepByElemParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepByElemParser","kind":"def","line":1895,"name":"Lean.Parser.sepByElemParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1895-L1896"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nodeWithAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nodeWithAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">anonymous</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nodeWithAntiquot","kind":"def","line":1888,"name":"Lean.Parser.nodeWithAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1888-L1889"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withAntiquotSpliceAndSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withAntiquotSpliceAndSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">suffix</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withAntiquotSpliceAndSuffix","kind":"def","line":1884,"name":"Lean.Parser.withAntiquotSpliceAndSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1884-L1886"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withAntiquotSuffixSplice\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withAntiquotSuffixSplice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">suffix</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Parse `suffix` after an antiquotation, e.g. `$x,*`, and put both into a new node. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withAntiquotSuffixSplice","kind":"def","line":1873,"name":"Lean.Parser.withAntiquotSuffixSplice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1873-L1882"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mkAntiquotSplice\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mkAntiquotSplice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">suffix</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Parse `$[p]suffix`, e.g. `$[p],*`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mkAntiquotSplice","kind":"def","line":1856,"name":"Lean.Parser.mkAntiquotSplice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1856-L1863"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withoutInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withoutInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withoutInfo","kind":"def","line":1852,"name":"Lean.Parser.withoutInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1852-L1854"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquotP </span><span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Optimized version of `mkAntiquot ... <|> p`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withAntiquot","kind":"def","line":1846,"name":"Lean.Parser.withAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1846-L1850"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withAntiquotFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withAntiquotFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquotP </span><span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isCatAntiquot</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withAntiquotFn","kind":"def","line":1835,"name":"Lean.Parser.withAntiquotFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1835-L1844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mkAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mkAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">anonymous</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPseudoKind</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Define parser for `$e` (if `anonymous == true`) and `$e:name`.\n`kind` is embedded in the antiquotation's kind, and checked at syntax `match` unless `isPseudoKind` is true.\nAntiquotations can be escaped as in `$$e`, which produces the syntax tree for `$e`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mkAntiquot","kind":"def","line":1818,"name":"Lean.Parser.mkAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1818-L1833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">unicodeSymbol</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">asciiSym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveForPP</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"`unicodeSymbol sym asciiSym` parses either `sym` or `asciiSym` as a reserved symbol.\nThe `asciiSym` argument should be an ASCII alternative for `sym`.\n\n- If the `pp.unicode` option is false, then pretty prints using `asciiSym`.\n- If the `pp.unicode` option is true, then pretty prints as `sym`,\n  unless the `preserveForPP` argument is true, in which case the underlying atom\n  is used to decide whether to print using the unicode or ASCII form.\n  We take the ASCII form to be the preferred form in this case.\n  For example, `pp.unicode.fun` causes the delaborator to use `↦` instead of `=>` for the `fun` arrow.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbol","kind":"def","line":1804,"name":"Lean.Parser.unicodeSymbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1804-L1816"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nonReservedSymbol</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeIdent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbol","kind":"def","line":1801,"name":"Lean.Parser.nonReservedSymbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1801-L1802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instCoeStringParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instCoeStringParser</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instCoeStringParser","kind":"instance","line":1798,"name":"Lean.Parser.instCoeStringParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1798-L1799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.symbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">symbol</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.symbol","kind":"def","line":1795,"name":"Lean.Parser.symbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1795-L1796"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.tokenWithAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">tokenWithAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.tokenWithAntiquot","kind":"def","line":1787,"name":"Lean.Parser.tokenWithAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1787-L1793"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.tokenAntiquotFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">tokenAntiquotFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.tokenAntiquotFn","kind":"def","line":1777,"name":"Lean.Parser.tokenAntiquotFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1777-L1785"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.antiquotExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">antiquotExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.antiquotExpr","kind":"def","line":1775,"name":"Lean.Parser.antiquotExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1775-L1775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.antiquotNestedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">antiquotNestedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.antiquotNestedExpr","kind":"def","line":1774,"name":"Lean.Parser.antiquotNestedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1774-L1774"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.pushNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">pushNone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.pushNone","kind":"def","line":1769,"name":"Lean.Parser.pushNone","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1769-L1771"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.setExpected\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">setExpected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.setExpected","kind":"def","line":1767,"name":"Lean.Parser.setExpected","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1767-L1767"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.setExpectedFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">setExpectedFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.setExpectedFn","kind":"def","line":1762,"name":"Lean.Parser.setExpectedFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1762-L1765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkNoImmediateColon\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkNoImmediateColon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Fail if previous token is immediately followed by ':'. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkNoImmediateColon","kind":"def","line":1747,"name":"Lean.Parser.checkNoImmediateColon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1747-L1760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.termParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">termParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.termParser","kind":"def","line":1740,"name":"Lean.Parser.termParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1740-L1741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.categoryParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">categoryParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.categoryParser","kind":"def","line":1736,"name":"Lean.Parser.categoryParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1736-L1737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.categoryParserFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">categoryParserFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.categoryParserFn","kind":"def","line":1732,"name":"Lean.Parser.categoryParserFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1732-L1734"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.categoryParserFnExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">categoryParserFnExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.CategoryParserFn\">CategoryParserFn</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.categoryParserFnExtension","kind":"opaque","line":1730,"name":"Lean.Parser.categoryParserFnExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1730-L1730"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.categoryParserFnRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">categoryParserFnRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.CategoryParserFn\">CategoryParserFn</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.categoryParserFnRef","kind":"opaque","line":1728,"name":"Lean.Parser.categoryParserFnRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1728-L1728"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.CategoryParserFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">CategoryParserFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.CategoryParserFn","kind":"def","line":1726,"name":"Lean.Parser.CategoryParserFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1726-L1726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.indexed\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">indexed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">behavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.indexed","kind":"def","line":1697,"name":"Lean.Parser.indexed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1697-L1724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategories\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategories</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategories","kind":"def","line":1695,"name":"Lean.Parser.ParserCategories","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1695-L1695"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedParserCategory\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedParserCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedParserCategory","kind":"instance","line":1693,"name":"Lean.Parser.instInhabitedParserCategory","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1693-L1693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedParserCategory.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedParserCategory</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedParserCategory.default","kind":"def","line":1693,"name":"Lean.Parser.instInhabitedParserCategory.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1693-L1693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.behavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategory</span>.<span class=\"name\">behavior</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></div></div>","info":{"doc":"The `LeadingIdentBehavior`, which specifies how the parsing table\nlookup function behaves for the first identifier to be parsed.\nThis is used by the `tactic` parser to avoid creating a reserved\nsymbol for each builtin tactic (e.g., `apply`, `assumption`, etc.). ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.behavior","kind":"def","line":1692,"name":"Lean.Parser.ParserCategory.behavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1692-L1692"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.tables\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategory</span>.<span class=\"name\">tables</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a></div></div>","info":{"doc":"The parsing tables, which consist of a dynamic set of parser\nfunctions based on the syntaxes that have been declared so far. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.tables","kind":"def","line":1687,"name":"Lean.Parser.ParserCategory.tables","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1687-L1687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.kinds\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategory</span>.<span class=\"name\">kinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.SyntaxNodeKindSet\">SyntaxNodeKindSet</a></div></div>","info":{"doc":"The list of syntax nodes that can parse into this category.\nThis can be used to list all syntaxes in the category. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.kinds","kind":"def","line":1684,"name":"Lean.Parser.ParserCategory.kinds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1684-L1684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategory</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of a declaration which will be used as the target of\ngo-to-definition queries and from which doc strings will be extracted.\nThis is a dummy declaration of type `Lean.Parser.Category`\ncreated by `declare_syntax_cat`, but for builtin categories the declaration\nis made manually and passed to `registerBuiltinParserAttribute`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.declName","kind":"def","line":1681,"name":"Lean.Parser.ParserCategory.declName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1681-L1681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategory</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.SyntaxNodeKindSet\">SyntaxNodeKindSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tables</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">behavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\">ParserCategory</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory.mk","kind":"ctor","line":1675,"name":"Lean.Parser.ParserCategory.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1675-L1675"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Each parser category is implemented using a Pratt's parser.\nThe system comes equipped with the following categories: `level`, `term`, `tactic`, and `command`.\nUsers and plugins may define extra categories.\n\nThe method\n```\ncategoryParser `term prec\n```\nexecutes the Pratt's parser for category `term` with precedence `prec`.\nThat is, only parsers with precedence at least `prec` are considered.\nThe method `termParser prec` is equivalent to the method above.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserCategory","kind":"structure","line":1662,"name":"Lean.Parser.ParserCategory","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1662-L1693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instReprLeadingIdentBehavior.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprLeadingIdentBehavior</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instReprLeadingIdentBehavior.repr","kind":"def","line":1660,"name":"Lean.Parser.instReprLeadingIdentBehavior.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1660-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instReprLeadingIdentBehavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprLeadingIdentBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instReprLeadingIdentBehavior","kind":"instance","line":1660,"name":"Lean.Parser.instReprLeadingIdentBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1660-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instBEqLeadingIdentBehavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqLeadingIdentBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instBEqLeadingIdentBehavior","kind":"instance","line":1660,"name":"Lean.Parser.instBEqLeadingIdentBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1660-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instBEqLeadingIdentBehavior.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqLeadingIdentBehavior</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a> → <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instBEqLeadingIdentBehavior.beq","kind":"def","line":1660,"name":"Lean.Parser.instBEqLeadingIdentBehavior.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1660-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedLeadingIdentBehavior.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedLeadingIdentBehavior</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedLeadingIdentBehavior.default","kind":"def","line":1660,"name":"Lean.Parser.instInhabitedLeadingIdentBehavior.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1660-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedLeadingIdentBehavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedLeadingIdentBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedLeadingIdentBehavior","kind":"instance","line":1660,"name":"Lean.Parser.instInhabitedLeadingIdentBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1660-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior.both\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">LeadingIdentBehavior</span>.<span class=\"name\">both</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></div></div>","info":{"doc":"If the leading token is an identifier `<foo>`, then it executes the parsers associated with token\n`<foo>` and parsers associated with the auxiliary token “ident”, which parses identifiers.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior.both","kind":"ctor","line":1655,"name":"Lean.Parser.LeadingIdentBehavior.both","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1655-L1659"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior.symbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">LeadingIdentBehavior</span>.<span class=\"name\">symbol</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></div></div>","info":{"doc":"If the leading token is an identifier `<foo>`, and there are parsers `P` associated with the token\n`<foo>`, then the parser executes `P`. Otherwise, it executes only the parsers associated with the\nauxiliary token “ident”, which parses identifiers.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior.symbol","kind":"ctor","line":1649,"name":"Lean.Parser.LeadingIdentBehavior.symbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1649-L1654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">LeadingIdentBehavior</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">LeadingIdentBehavior</a></div></div>","info":{"doc":"If the leading token is an identifier, then the parser just executes the parsers associated\nwith the auxiliary token “ident”, which parses identifiers.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior.default","kind":"ctor","line":1644,"name":"Lean.Parser.LeadingIdentBehavior.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1644-L1648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">LeadingIdentBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Specifies how the parsing table lookup function behaves for identifiers.\n\nThe function `Lean.Parser.prattParser` uses two tables: one each for leading and trailing parsers.\nThese tables map tokens to parsers. Because keyword tokens are distinct from identifier tokens,\nkeywords and identifiers cannot be confused, even when they are syntactically identical.\nSpecifying an alternative leading identifier behavior allows greater flexibility and makes it\npossible to avoid reserved keywords in some situations.\n\nWhen the leading token is syntactically an identifier, the current syntax category's\n`LeadingIdentBehavior` specifies how the parsing table lookup function behaves, and allows\ncontrolled “punning” between identifiers and keywords. This feature is used to avoid creating a\nreserved symbol for each built-in tactic (e.g., `apply` or `assumption`). As a result, tactic names\ncan be used as identifiers.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior","kind":"inductive","line":1628,"name":"Lean.Parser.LeadingIdentBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1628-L1660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedPrattParsingTables\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedPrattParsingTables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instInhabitedPrattParsingTables","kind":"instance","line":1625,"name":"Lean.Parser.instInhabitedPrattParsingTables","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1625-L1626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.trailingParsers\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">PrattParsingTables</span>.<span class=\"name\">trailingParsers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.trailingParsers","kind":"def","line":1623,"name":"Lean.Parser.PrattParsingTables.trailingParsers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1623-L1623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.trailingTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">PrattParsingTables</span>.<span class=\"name\">trailingTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.trailingTable","kind":"def","line":1622,"name":"Lean.Parser.PrattParsingTables.trailingTable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1622-L1622"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.leadingParsers\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">PrattParsingTables</span>.<span class=\"name\">leadingParsers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.leadingParsers","kind":"def","line":1621,"name":"Lean.Parser.PrattParsingTables.leadingParsers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1621-L1621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.leadingTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">PrattParsingTables</span>.<span class=\"name\">leadingTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.leadingTable","kind":"def","line":1620,"name":"Lean.Parser.PrattParsingTables.leadingTable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1620-L1620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">PrattParsingTables</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leadingTable</span> : <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leadingParsers</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailingTable</span> : <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailingParsers</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\">PrattParsingTables</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables.mk","kind":"ctor","line":1619,"name":"Lean.Parser.PrattParsingTables.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1619-L1619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">PrattParsingTables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.PrattParsingTables","kind":"structure","line":1619,"name":"Lean.Parser.PrattParsingTables","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1619-L1623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.instForInProdNameList\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">TokenMap</span>.<span class=\"name\">instForInProdNameList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> <span class=\"fn\">α</span>)</span> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.instForInProdNameList","kind":"instance","line":1615,"name":"Lean.Parser.TokenMap.instForInProdNameList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1615-L1615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.instEmptyCollection\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">TokenMap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.instEmptyCollection","kind":"instance","line":1613,"name":"Lean.Parser.TokenMap.instEmptyCollection","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1613-L1613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">TokenMap</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.instInhabited","kind":"instance","line":1610,"name":"Lean.Parser.TokenMap.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1610-L1611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">TokenMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\">TokenMap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.TokenMap.insert","kind":"def","line":1605,"name":"Lean.Parser.TokenMap.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1605-L1608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.TokenMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">TokenMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multimap indexed by tokens. Used for indexing parsers by their leading token. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.TokenMap","kind":"def","line":1600,"name":"Lean.Parser.TokenMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1600-L1601"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.eoi\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">eoi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.eoi","kind":"def","line":1596,"name":"Lean.Parser.eoi","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1596-L1598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.eoiFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">eoiFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.eoiFn","kind":"def","line":1591,"name":"Lean.Parser.eoiFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1591-L1594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withoutForbidden\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withoutForbidden</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"`withoutForbidden(p)` runs `p` disabling the \"forbidden token\" (see `withForbidden`), if any.\nThis is usually used by bracketing constructs like `(...)` because there is no parsing ambiguity\ninside these nested constructs.\n\nThis parser has the same arity as `p` - it just forwards the results of `p`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withoutForbidden","kind":"def","line":1583,"name":"Lean.Parser.withoutForbidden","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1583-L1589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withForbidden\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withForbidden</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Token\">Token</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"`withForbidden tk p` runs `p` with `tk` as a \"forbidden token\". This means that if the token\nappears anywhere in `p` (unless it is nested in `withoutForbidden`), parsing will immediately\nstop there, making `tk` effectively a lowest-precedence operator. This is used for parsers like\n`for x in arr do ...`: `arr` is parsed as `withForbidden \"do\" term` because otherwise `arr do ...`\nwould be treated as an application.\n\nThis parser has the same arity as `p` - it just forwards the results of `p`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withForbidden","kind":"def","line":1573,"name":"Lean.Parser.withForbidden","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1573-L1581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withoutPosition\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withoutPosition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"`withoutPosition(p)` runs `p` without the saved position, meaning that position-checking\nparsers like `colGt` will have no effect. This is usually used by bracketing constructs like\n`(...)` so that the user can locally override whitespace sensitivity.\n\nThis parser has the same arity as `p` - it just forwards the results of `p`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withoutPosition","kind":"def","line":1565,"name":"Lean.Parser.withoutPosition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1565-L1571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withPositionAfterLinebreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withPositionAfterLinebreak</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withPositionAfterLinebreak","kind":"def","line":1561,"name":"Lean.Parser.withPositionAfterLinebreak","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1561-L1563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withPosition\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withPosition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"`withPosition(p)` runs `p` while setting the \"saved position\" to the current position.\nThis has no effect on its own, but various other parsers access this position to achieve some\ncomposite effect:\n\n* `colGt`, `colGe`, `colEq` compare the column of the saved position to the current position,\n  used to implement Python-style indentation sensitive blocks\n* `lineEq` ensures that the current position is still on the same line as the saved position,\n  used to implement composite tokens\n\nThe saved position is only available in the read-only state, which is why this is a scoping parser:\nafter the `withPosition(..)` block the saved position will be restored to its original value.\n\nThis parser has the same arity as `p` - it just forwards the results of `p`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withPosition","kind":"def","line":1545,"name":"Lean.Parser.withPosition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1545-L1559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkLineEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkLineEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;checkLineEq&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `lineEq` parser requires that the current token is on the same line as the saved position\n(see `withPosition`). This can be used to ensure that composite tokens are not \"broken up\" across\ndifferent lines. For example, `else if` is parsed using `lineEq` to ensure that the two tokens\nare on the same line.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkLineEq","kind":"def","line":1536,"name":"Lean.Parser.checkLineEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1536-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkLineEqFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkLineEqFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkLineEqFn","kind":"def","line":1527,"name":"Lean.Parser.checkLineEqFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1527-L1534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkColGt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkColGt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;checkColGt&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `colGt` parser requires that the next token starts a strictly greater column than the saved\nposition (see `withPosition`). This can be used for whitespace sensitive syntax for the arguments\nto a tactic, to ensure that the following tactic is not interpreted as an argument.\n```\nexample (x : False) : False := by\n  revert x\n  exact id\n```\nHere, the `revert` tactic is followed by a list of `colGt ident`, because otherwise it would\ninterpret `exact` as an identifier and try to revert a variable named `exact`.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkColGt","kind":"def","line":1512,"name":"Lean.Parser.checkColGt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1512-L1525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkColGtFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkColGtFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkColGtFn","kind":"def","line":1503,"name":"Lean.Parser.checkColGtFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1503-L1510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkColGe\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkColGe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;checkColGe&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `colGe` parser requires that the next token starts from at least the column of the saved\nposition (see `withPosition`), but allows it to be more indented.\nThis can be used for whitespace sensitive syntax to ensure that a block does not go outside a\ncertain indentation scope. For example it is used in the lean grammar for `else if`, to ensure\nthat the `else` is not less indented than the `if` it matches with.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkColGe","kind":"def","line":1492,"name":"Lean.Parser.checkColGe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1492-L1501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkColGeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkColGeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkColGeFn","kind":"def","line":1483,"name":"Lean.Parser.checkColGeFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1483-L1490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkColEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkColEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;checkColEq&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `colEq` parser ensures that the next token starts at exactly the column of the saved\nposition (see `withPosition`). This can be used to do whitespace sensitive syntax like\na `by` block or `do` block, where all the lines have to line up.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkColEq","kind":"def","line":1475,"name":"Lean.Parser.checkColEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1475-L1481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkColEqFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkColEqFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkColEqFn","kind":"def","line":1466,"name":"Lean.Parser.checkColEqFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1466-L1473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.anyOfFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">anyOfFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.anyOfFn","kind":"def","line":1461,"name":"Lean.Parser.anyOfFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1461-L1464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.longestMatchFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">longestMatchFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.longestMatchFn","kind":"def","line":1451,"name":"Lean.Parser.longestMatchFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1451-L1459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.longestMatchFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">longestMatchFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startSize </span><span class=\"fn\">startLhsPrec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prevPrio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.longestMatchFnAux","kind":"def","line":1442,"name":"Lean.Parser.longestMatchFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1442-L1449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.longestMatchMkResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">longestMatchMkResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.longestMatchMkResult","kind":"def","line":1439,"name":"Lean.Parser.longestMatchMkResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1439-L1440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.longestMatchStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">longestMatchStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startSize </span><span class=\"fn\">startLhsPrec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prevPrio </span><span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a> → <span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.longestMatchStep","kind":"def","line":1418,"name":"Lean.Parser.longestMatchStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1418-L1437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.runLongestMatchParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">runLongestMatchParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startLhsPrec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Auxiliary function used to execute parsers provided to `longestMatchFn`.\nPush `left?` into the stack if it is not `none`, and execute `p`.\n\nRemark: `p` must produce exactly one syntax node.\nRemark: the `left?` is not none when we are processing trailing parsers. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.runLongestMatchParser","kind":"def","line":1386,"name":"Lean.Parser.runLongestMatchParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1386-L1416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.invalidLongestMatchParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">invalidLongestMatchParser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.invalidLongestMatchParser","kind":"def","line":1383,"name":"Lean.Parser.invalidLongestMatchParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1383-L1384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserState.replaceLongest\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserState</span>.<span class=\"name\">replaceLongest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startStackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserState.replaceLongest","kind":"def","line":1378,"name":"Lean.Parser.ParserState.replaceLongest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1378-L1379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepLatest\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserState</span>.<span class=\"name\">keepLatest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startStackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepLatest","kind":"def","line":1373,"name":"Lean.Parser.ParserState.keepLatest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1373-L1376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserState.mergeErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserState</span>.<span class=\"name\">mergeErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldStackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldError</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Error\">Error</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserState.mergeErrors","kind":"def","line":1366,"name":"Lean.Parser.ParserState.mergeErrors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1366-L1371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepPrevError\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserState</span>.<span class=\"name\">keepPrevError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldStackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldStopPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldError</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Error\">Error</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldLhsPrec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepPrevError","kind":"def","line":1361,"name":"Lean.Parser.ParserState.keepPrevError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1361-L1364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepNewError\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserState</span>.<span class=\"name\">keepNewError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldStackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepNewError","kind":"def","line":1357,"name":"Lean.Parser.ParserState.keepNewError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1357-L1359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserState</span>.<span class=\"name\">keepTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.SyntaxStack\">SyntaxStack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startStackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.SyntaxStack\">SyntaxStack</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserState.keepTop","kind":"def","line":1353,"name":"Lean.Parser.ParserState.keepTop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1353-L1355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.hygieneInfoNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">hygieneInfoNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.hygieneInfoNoAntiquot","kind":"def","line":1346,"name":"Lean.Parser.hygieneInfoNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1346-L1349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.hygieneInfoFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">hygieneInfoFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.hygieneInfoFn","kind":"def","line":1322,"name":"Lean.Parser.hygieneInfoFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1322-L1344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.identEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">identEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.identEq","kind":"def","line":1317,"name":"Lean.Parser.identEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1317-L1320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.identEqFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">identEqFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.identEqFn","kind":"def","line":1309,"name":"Lean.Parser.identEqFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1309-L1315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.rawIdentNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">rawIdentNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.rawIdentNoAntiquot","kind":"def","line":1305,"name":"Lean.Parser.rawIdentNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1305-L1307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.identNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">identNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.identNoAntiquot","kind":"def","line":1300,"name":"Lean.Parser.identNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1300-L1303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.identFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">identFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.identFn","kind":"def","line":1298,"name":"Lean.Parser.identFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1298-L1298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nameLitNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nameLitNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nameLitNoAntiquot","kind":"def","line":1293,"name":"Lean.Parser.nameLitNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1293-L1296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nameLitFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nameLitFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nameLitFn","kind":"def","line":1291,"name":"Lean.Parser.nameLitFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1291-L1291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.charLitNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">charLitNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.charLitNoAntiquot","kind":"def","line":1286,"name":"Lean.Parser.charLitNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1286-L1289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.charLitFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">charLitFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.charLitFn","kind":"def","line":1284,"name":"Lean.Parser.charLitFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1284-L1284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.strLitNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">strLitNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.strLitNoAntiquot","kind":"def","line":1279,"name":"Lean.Parser.strLitNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1279-L1282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.strLitFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">strLitFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.strLitFn","kind":"def","line":1277,"name":"Lean.Parser.strLitFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1277-L1277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.scientificLitNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">scientificLitNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.scientificLitNoAntiquot","kind":"def","line":1272,"name":"Lean.Parser.scientificLitNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1272-L1275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.scientificLitFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">scientificLitFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.scientificLitFn","kind":"def","line":1270,"name":"Lean.Parser.scientificLitFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1270-L1270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.hexnumNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">hexnumNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.hexnumNoAntiquot","kind":"def","line":1265,"name":"Lean.Parser.hexnumNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1265-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.hexnumFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">hexnumFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Parses an hexadecimal numeral without the `0x` prefix. It is not a literal. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.hexnumFn","kind":"def","line":1261,"name":"Lean.Parser.hexnumFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1261-L1263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.numLitNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">numLitNoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.numLitNoAntiquot","kind":"def","line":1256,"name":"Lean.Parser.numLitNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1256-L1259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.numLitFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">numLitFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.numLitFn","kind":"def","line":1254,"name":"Lean.Parser.numLitFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1254-L1254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.expectTokenFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">expectTokenFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Parses a token and asserts the result is of the given kind.\n`desc` is used in error messages as the token kind. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.expectTokenFn","kind":"def","line":1247,"name":"Lean.Parser.expectTokenFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1247-L1252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mkAtomicInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mkAtomicInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mkAtomicInfo","kind":"def","line":1244,"name":"Lean.Parser.mkAtomicInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1244-L1245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">unicodeSymbolNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">asciiSym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveForPP</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolNoAntiquot","kind":"def","line":1238,"name":"Lean.Parser.unicodeSymbolNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1238-L1242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">unicodeSymbolFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">asciiSym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolFn","kind":"def","line":1234,"name":"Lean.Parser.unicodeSymbolFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1234-L1235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">unicodeSymbolInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">asciiSym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolInfo","kind":"def","line":1229,"name":"Lean.Parser.unicodeSymbolInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1229-L1232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">unicodeSymbolFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">asciiSym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.unicodeSymbolFnAux","kind":"def","line":1226,"name":"Lean.Parser.unicodeSymbolFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1226-L1227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkNoWsBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkNoWsBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;no space before&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `noWs` parser requires that there is *no* whitespace between the preceding and following\nparsers. For example, the parser `\"foo\" noWs \"+\"` parses `foo+` but not `foo +`.\n\nThis is almost the same as `\"foo+\"`, but using this parser will make `foo+` a token, which may cause\nproblems for the use of `\"foo\"` and `\"+\"` as separate tokens in other parsers.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkNoWsBefore","kind":"def","line":1214,"name":"Lean.Parser.checkNoWsBefore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1214-L1224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkNoWsBeforeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkNoWsBeforeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkNoWsBeforeFn","kind":"def","line":1210,"name":"Lean.Parser.checkNoWsBeforeFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1210-L1212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkLinebreakBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkLinebreakBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;line break&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `linebreak` parser requires that there is at least one line break at this location.\n(The line break may be inside a comment.)\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkLinebreakBefore","kind":"def","line":1197,"name":"Lean.Parser.checkLinebreakBefore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1197-L1203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkLinebreakBeforeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkLinebreakBeforeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkLinebreakBeforeFn","kind":"def","line":1193,"name":"Lean.Parser.checkLinebreakBeforeFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1193-L1195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkTailLinebreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkTailLinebreak</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prev</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkTailLinebreak","kind":"def","line":1188,"name":"Lean.Parser.checkTailLinebreak","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1188-L1191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkWsBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkWsBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;space before&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `ws` parser requires that there is some whitespace at this location.\nFor example, the parser `\"foo\" ws \"+\"` parses `foo +` or `foo/- -/+` but not `foo+`.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkWsBefore","kind":"def","line":1180,"name":"Lean.Parser.checkWsBefore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1180-L1186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkWsBeforeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkWsBeforeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkWsBeforeFn","kind":"def","line":1176,"name":"Lean.Parser.checkWsBeforeFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1176-L1178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkTailWs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkTailWs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prev</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkTailWs","kind":"def","line":1171,"name":"Lean.Parser.checkTailWs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1171-L1174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.strAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">strAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.strAux","kind":"def","line":1161,"name":"Lean.Parser.strAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1161-L1169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nonReservedSymbolNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeIdent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolNoAntiquot","kind":"def","line":1156,"name":"Lean.Parser.nonReservedSymbolNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1156-L1159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nonReservedSymbolInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeIdent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolInfo","kind":"def","line":1148,"name":"Lean.Parser.nonReservedSymbolInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1148-L1154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nonReservedSymbolFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolFn","kind":"def","line":1145,"name":"Lean.Parser.nonReservedSymbolFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1145-L1146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nonReservedSymbolFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Check if the following token is the symbol _or_ identifier `sym`. Useful for\nparsing local tokens that have not been added to the token table (but may have\nbeen so by some unrelated code).\n\nFor example, the universe `max` Function is parsed using this combinator so that\nit can still be used as an identifier outside of universe (but registering it\nas a token in a Term Syntax would not break the universe Parser). ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nonReservedSymbolFnAux","kind":"def","line":1123,"name":"Lean.Parser.nonReservedSymbolFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1123-L1143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkTailNoWs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkTailNoWs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prev</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkTailNoWs","kind":"def","line":1118,"name":"Lean.Parser.checkTailNoWs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1118-L1121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.symbolNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">symbolNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.symbolNoAntiquot","kind":"def","line":1113,"name":"Lean.Parser.symbolNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1113-L1116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.symbolFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">symbolFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.symbolFn","kind":"def","line":1110,"name":"Lean.Parser.symbolFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1110-L1111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.symbolInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">symbolInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.symbolInfo","kind":"def","line":1105,"name":"Lean.Parser.symbolInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1105-L1108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.symbolFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">symbolFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym </span><span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.symbolFnAux","kind":"def","line":1102,"name":"Lean.Parser.symbolFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1102-L1103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.satisfySymbolFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">satisfySymbolFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.satisfySymbolFn","kind":"def","line":1091,"name":"Lean.Parser.satisfySymbolFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1091-L1100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.rawIdentFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">rawIdentFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Treat keywords as identifiers. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.rawIdentFn","kind":"def","line":1085,"name":"Lean.Parser.rawIdentFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1085-L1089"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.peekToken\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">peekToken</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.peekToken","kind":"def","line":1078,"name":"Lean.Parser.peekToken","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1078-L1083"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.peekTokenAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">peekTokenAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.peekTokenAux","kind":"def","line":1069,"name":"Lean.Parser.peekTokenAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1069-L1076"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.tokenFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">tokenFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.tokenFn","kind":"def","line":1057,"name":"Lean.Parser.tokenFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L1057-L1067"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.identFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">identFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Token\">Token</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.identFnAux","kind":"def","line":975,"name":"Lean.Parser.identFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L975-L1010"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mkIdResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mkIdResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Token\">Token</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mkIdResult","kind":"def","line":959,"name":"Lean.Parser.mkIdResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L959-L973"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mkTokenAndFixPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mkTokenAndFixPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Token\">Token</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mkTokenAndFixPos","kind":"def","line":943,"name":"Lean.Parser.mkTokenAndFixPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L943-L957"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.isIdCont\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">isIdCont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a> → <span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.isIdCont","kind":"def","line":921,"name":"Lean.Parser.isIdCont","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L921-L932"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.numberFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">numberFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.numberFnAux","kind":"def","line":900,"name":"Lean.Parser.numberFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L900-L919"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.hexNumberFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">hexNumberFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a> := <a href=\"./Init/Prelude.html#Lean.numLitKind\">numLitKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.hexNumberFn","kind":"def","line":896,"name":"Lean.Parser.hexNumberFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L896-L898"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.octalNumberFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">octalNumberFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.octalNumberFn","kind":"def","line":888,"name":"Lean.Parser.octalNumberFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L888-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.binNumberFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">binNumberFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.binNumberFn","kind":"def","line":884,"name":"Lean.Parser.binNumberFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L884-L886"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.decimalNumberFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">decimalNumberFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.decimalNumberFn","kind":"def","line":831,"name":"Lean.Parser.decimalNumberFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L831-L882"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.takeDigitsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">takeDigitsFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isDigit</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expecting</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">needDigit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Parses a sequence of the form `many (many '_' >> many1 digit)`, but if `needDigit` is true the parsed result must be nonempty.\n\nNote: this does not report that it is expecting `_` if we reach EOI or an unexpected character.\nRationale: this error happens if there is already a `_`, and while sequences of `_` are allowed, it's a bit perverse to suggest extending the sequence.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.takeDigitsFn","kind":"opaque","line":811,"name":"Lean.Parser.takeDigitsFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L811-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.rawStrLitFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">rawStrLitFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Parses a raw string literal assuming `isRawStrLitStart` has returned true.\nThe `startPos` is the start of the raw string (at the `r`).\nThe parser state is assumed to be immediately after the `r`.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.rawStrLitFnAux","kind":"def","line":745,"name":"Lean.Parser.rawStrLitFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L745-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.isRawStrLitStart\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">isRawStrLitStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Raw strings have the syntax `r##...#\"...\"#...##` with zero or more `#`'s.\nIf we are looking at a valid start to a raw string (`r##...#\"`),\nreturns true.\nWe assume `i` begins at the position immediately after `r`.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.isRawStrLitStart","kind":"opaque","line":730,"name":"Lean.Parser.isRawStrLitStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L730-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.strLitFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">strLitFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.strLitFnAux","kind":"opaque","line":719,"name":"Lean.Parser.strLitFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L719-L728"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.charLitFnAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">charLitFnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.charLitFnAux","kind":"def","line":704,"name":"Lean.Parser.charLitFnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L704-L717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mkNodeToken\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mkNodeToken</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeWhitespace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Push `(Syntax.node tk <new-atom>)` onto syntax stack if parse was successful.\n\nIf `includeWhitespace` is `false`, trailing whitespace is left behind.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mkNodeToken","kind":"def","line":686,"name":"Lean.Parser.mkNodeToken","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L686-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.quotedStringFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">quotedStringFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Like `quotedCharFn` but enables escapes that are only valid inside strings.\nIn particular, string gaps (`\"\\\" newline whitespace*`).\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.quotedStringFn","kind":"def","line":679,"name":"Lean.Parser.quotedStringFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L679-L684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.quotedCharFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">quotedCharFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.quotedCharFn","kind":"def","line":676,"name":"Lean.Parser.quotedCharFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L676-L677"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.isQuotableCharDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">isQuotableCharDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.isQuotableCharDefault","kind":"def","line":673,"name":"Lean.Parser.isQuotableCharDefault","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L673-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.quotedCharCoreFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">quotedCharCoreFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isQuotable</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inString</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Parses a string quotation after a `\\`.\n- `isQuotable` determines which characters are valid escapes\n- `inString` enables features that are only valid within strings,\n  in particular `\"\\\" newline whitespace*` gaps.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.quotedCharCoreFn","kind":"def","line":651,"name":"Lean.Parser.quotedCharCoreFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L651-L671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.stringGapFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">stringGapFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seenNewline</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Parses the whitespace after the `\\` when there is a string gap.\nRaises an error if the whitespace does not contain exactly one newline character.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.stringGapFn","kind":"opaque","line":629,"name":"Lean.Parser.stringGapFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L629-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.hexDigitFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">hexDigitFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.hexDigitFn","kind":"def","line":620,"name":"Lean.Parser.hexDigitFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L620-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.rawCh\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">rawCh</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailingWs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.rawCh","kind":"def","line":616,"name":"Lean.Parser.rawCh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L616-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.chFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">chFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailingWs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.chFn","kind":"def","line":613,"name":"Lean.Parser.chFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L613-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.rawFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">rawFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailingWs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Match an arbitrary Parser and return the consumed String in a `Syntax.atom`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.rawFn","kind":"def","line":607,"name":"Lean.Parser.rawFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L607-L611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.ParserContext.mkEmptySubstringAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ParserContext</span>.<span class=\"name\">mkEmptySubstringAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.ParserContext.mkEmptySubstringAt","kind":"def","line":589,"name":"Lean.Parser.ParserContext.mkEmptySubstringAt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L589-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.whitespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">whitespace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Consume whitespace and comments ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.whitespace","kind":"opaque","line":562,"name":"Lean.Parser.whitespace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L562-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.finishCommentBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">finishCommentBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushMissingOnError</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nesting</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.finishCommentBlock","kind":"opaque","line":537,"name":"Lean.Parser.finishCommentBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L537-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.takeWhile1Fn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">takeWhile1Fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.takeWhile1Fn","kind":"def","line":533,"name":"Lean.Parser.takeWhile1Fn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L533-L534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.takeWhileFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">takeWhileFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.takeWhileFn","kind":"def","line":530,"name":"Lean.Parser.takeWhileFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L530-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.takeUntilFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">takeUntilFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.takeUntilFn","kind":"opaque","line":524,"name":"Lean.Parser.takeUntilFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L524-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.satisfyFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">satisfyFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsg</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;unexpected character&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.satisfyFn","kind":"def","line":518,"name":"Lean.Parser.satisfyFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L518-L522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.many1Unbox\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">many1Unbox</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.many1Unbox","kind":"def","line":515,"name":"Lean.Parser.many1Unbox","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L515-L516"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withResultOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withResultOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withResultOf","kind":"def","line":510,"name":"Lean.Parser.withResultOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L510-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withResultOfInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withResultOfInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withResultOfInfo","kind":"def","line":505,"name":"Lean.Parser.withResultOfInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L505-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.withResultOfFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">withResultOfFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Apply `f` to the syntax object produced by `p` ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.withResultOfFn","kind":"def","line":497,"name":"Lean.Parser.withResultOfFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L497-L503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepBy1NoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepBy1NoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">sep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowTrailingSep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepBy1NoAntiquot","kind":"def","line":492,"name":"Lean.Parser.sepBy1NoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L492-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepByNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepByNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">sep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowTrailingSep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepByNoAntiquot","kind":"def","line":487,"name":"Lean.Parser.sepByNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L487-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepBy1Info\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepBy1Info</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">sep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepBy1Info","kind":"def","line":481,"name":"Lean.Parser.sepBy1Info","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L481-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepByInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepByInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">sep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepByInfo","kind":"def","line":476,"name":"Lean.Parser.sepByInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L476-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepBy1Fn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepBy1Fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowTrailingSep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">sep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepBy1Fn","kind":"def","line":472,"name":"Lean.Parser.sepBy1Fn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L472-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.sepByFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">sepByFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowTrailingSep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">sep</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.sepByFn","kind":"def","line":468,"name":"Lean.Parser.sepByFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L468-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.many1NoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">many1NoAntiquot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.many1NoAntiquot","kind":"def","line":438,"name":"Lean.Parser.many1NoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L438-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.many1Fn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">many1Fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.many1Fn","kind":"def","line":433,"name":"Lean.Parser.many1Fn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L433-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.manyNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">manyNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.manyNoAntiquot","kind":"def","line":428,"name":"Lean.Parser.manyNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L428-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.manyFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">manyFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.manyFn","kind":"def","line":423,"name":"Lean.Parser.manyFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L423-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.manyAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">manyAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.manyAux","kind":"opaque","line":411,"name":"Lean.Parser.manyAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L411-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.notFollowedBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">notFollowedBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"`notFollowedBy(p, \"foo\")` succeeds iff `p` fails;\nif `p` succeeds then it fails with the message `\"unexpected foo\"`.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.notFollowedBy","kind":"def","line":404,"name":"Lean.Parser.notFollowedBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L404-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.notFollowedByFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">notFollowedByFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.notFollowedByFn","kind":"def","line":394,"name":"Lean.Parser.notFollowedByFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L394-L402"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.lookahead\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">lookahead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"`lookahead(p)` runs `p` and fails if `p` does, but it produces no parse nodes and rewinds the\nposition to the original state on success. So for example `lookahead(\"=>\")` will ensure that the\nnext token is `\"=>\"`, without actually consuming this token.\n\nThis parser has arity 0 - it does not capture anything. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.lookahead","kind":"def","line":387,"name":"Lean.Parser.lookahead","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L387-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.lookaheadFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">lookaheadFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.lookaheadFn","kind":"def","line":381,"name":"Lean.Parser.lookaheadFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L381-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.optionalNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">optionalNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.optionalNoAntiquot","kind":"def","line":376,"name":"Lean.Parser.optionalNoAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L376-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.optionalInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">optionalInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.optionalInfo","kind":"def","line":370,"name":"Lean.Parser.optionalInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L370-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.optionalFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">optionalFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.optionalFn","kind":"def","line":363,"name":"Lean.Parser.optionalFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L363-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.recover\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">recover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parser </span><span class=\"fn\">handler</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Recover from errors in `parser` using `handler` to consume input until a known-good state has appeared.\nIf `handler` fails itself, then no recovery is performed.\n\n`handler` is run in the state immediately after the failure.\n\nThe interactions between <|> and `recover` are subtle, especially for syntactic\ncategories that admit user extension. Consider avoiding it in these cases. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.recover","kind":"def","line":353,"name":"Lean.Parser.recover","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L353-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.recover'\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">recover'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parser</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Recover from errors in `parser` using `handler` to consume input until a known-good state has appeared.\nIf `handler` fails itself, then no recovery is performed.\n\n`handler` is provided with information about the failing parser's effects , and it is run in the\nstate immediately after the failure.\n\nThe interactions between <|> and `recover'` are subtle, especially for syntactic\ncategories that admit user extension. Consider avoiding it in these cases. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.recover'","kind":"def","line":340,"name":"Lean.Parser.recover'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L340-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.recoverFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">recoverFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recover</span> : <span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Recover from errors in `p` using `recover` to consume input until a known-good state has appeared.\nIf `recover` fails itself, then no recovery is performed.\n\n`recover` is provided with information about the failing parser's effects , and it is run in the\nstate immediately after the failure.\n","docLink":"./Lean/Parser/Basic.html#Lean.Parser.recoverFn","kind":"def","line":318,"name":"Lean.Parser.recoverFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L318-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instReprRecoveryContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprRecoveryContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instReprRecoveryContext","kind":"instance","line":316,"name":"Lean.Parser.instReprRecoveryContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instReprRecoveryContext.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprRecoveryContext</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instReprRecoveryContext.repr","kind":"def","line":316,"name":"Lean.Parser.instReprRecoveryContext.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instDecidableEqRecoveryContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instDecidableEqRecoveryContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instDecidableEqRecoveryContext","kind":"instance","line":316,"name":"Lean.Parser.instDecidableEqRecoveryContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instDecidableEqRecoveryContext.decEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instDecidableEqRecoveryContext</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instDecidableEqRecoveryContext.decEq","kind":"def","line":316,"name":"Lean.Parser.instDecidableEqRecoveryContext.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instBEqRecoveryContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqRecoveryContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instBEqRecoveryContext","kind":"instance","line":316,"name":"Lean.Parser.instBEqRecoveryContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instBEqRecoveryContext.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqRecoveryContext</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a> → <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instBEqRecoveryContext.beq","kind":"def","line":316,"name":"Lean.Parser.instBEqRecoveryContext.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext.initialSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">RecoveryContext</span>.<span class=\"name\">initialSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The syntax stack height prior to the failing parser's execution ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext.initialSize","kind":"def","line":315,"name":"Lean.Parser.RecoveryContext.initialSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L315-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext.initialPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">RecoveryContext</span>.<span class=\"name\">initialPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></div></div>","info":{"doc":"The position prior to the failing parser ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext.initialPos","kind":"def","line":313,"name":"Lean.Parser.RecoveryContext.initialPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">RecoveryContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initialPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initialSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\">RecoveryContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext.mk","kind":"ctor","line":311,"name":"Lean.Parser.RecoveryContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L311-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">RecoveryContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Information about the state of the parse prior to the failing parser's execution ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.RecoveryContext","kind":"structure","line":310,"name":"Lean.Parser.RecoveryContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L310-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.atomic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">atomic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"The `atomic(p)` parser parses `p`, returns the same result as `p` and fails iff `p` fails,\nbut if `p` fails after consuming some tokens `atomic(p)` will fail without consuming tokens.\nThis is important for the `p <|> q` combinator, because it is not backtracking, and will fail if\n`p` fails after consuming some tokens. To get backtracking behavior, use `atomic(p) <|> q` instead.\n\nThis parser has the same arity as `p` - it produces the same result as `p`. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.atomic","kind":"def","line":302,"name":"Lean.Parser.atomic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L302-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.atomicFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">atomicFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.atomicFn","kind":"def","line":296,"name":"Lean.Parser.atomicFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L296-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.noFirstTokenInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">noFirstTokenInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.noFirstTokenInfo","kind":"def","line":291,"name":"Lean.Parser.noFirstTokenInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L291-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instOrElseParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instOrElseParser</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse\">OrElse</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instOrElseParser","kind":"instance","line":288,"name":"Lean.Parser.instOrElseParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L288-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.orelse\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">orelse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Run `p`, falling back to `q` if `p` failed without consuming any input.\n\nNOTE: In order for the pretty printer to retrace an `orelse`, `p` must be a call to `node` or some other parser\nproducing a single node kind. Nested `orelse` calls are flattened for this, i.e. `(node k1 p1 <|> node k2 p2) <|> ...`\nis fine as well. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.orelse","kind":"def","line":278,"name":"Lean.Parser.orelse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L278-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instOrElseParserFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instOrElseParserFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse\">OrElse</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instOrElseParserFn","kind":"instance","line":275,"name":"Lean.Parser.instOrElseParserFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L275-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.orelseInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">orelseInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.orelseInfo","kind":"def","line":269,"name":"Lean.Parser.orelseInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L269-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.orelseFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">orelseFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.orelseFn","kind":"def","line":266,"name":"Lean.Parser.orelseFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L266-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.orelseFnCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">orelseFnCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquotBehavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a> := <a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.merge\">OrElseOnAntiquotBehavior.merge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.orelseFnCore","kind":"def","line":226,"name":"Lean.Parser.orelseFnCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L226-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instBEqOrElseOnAntiquotBehavior.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqOrElseOnAntiquotBehavior</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a> → <a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instBEqOrElseOnAntiquotBehavior.beq","kind":"def","line":224,"name":"Lean.Parser.instBEqOrElseOnAntiquotBehavior.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L224-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instBEqOrElseOnAntiquotBehavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqOrElseOnAntiquotBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instBEqOrElseOnAntiquotBehavior","kind":"instance","line":224,"name":"Lean.Parser.instBEqOrElseOnAntiquotBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L224-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrElseOnAntiquotBehavior</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.merge","kind":"ctor","line":223,"name":"Lean.Parser.OrElseOnAntiquotBehavior.merge","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.takeLongest\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrElseOnAntiquotBehavior</span>.<span class=\"name\">takeLongest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.takeLongest","kind":"ctor","line":222,"name":"Lean.Parser.OrElseOnAntiquotBehavior.takeLongest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.acceptLhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrElseOnAntiquotBehavior</span>.<span class=\"name\">acceptLhs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\">OrElseOnAntiquotBehavior</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior.acceptLhs","kind":"ctor","line":221,"name":"Lean.Parser.OrElseOnAntiquotBehavior.acceptLhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrElseOnAntiquotBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.OrElseOnAntiquotBehavior","kind":"inductive","line":220,"name":"Lean.Parser.OrElseOnAntiquotBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L220-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.mergeOrElseErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">mergeOrElseErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">error1</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Error\">Error</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iniPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mergeErrors</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.mergeOrElseErrors","kind":"def","line":211,"name":"Lean.Parser.mergeOrElseErrors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L211-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.trailingNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">trailingNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec </span><span class=\"fn\">lhsPrec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.TrailingParser\">TrailingParser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.trailingNode","kind":"def","line":208,"name":"Lean.Parser.trailingNode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L208-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.trailingNodeAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">trailingNodeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.TrailingParser\">TrailingParser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.trailingNodeAux","kind":"def","line":203,"name":"Lean.Parser.trailingNodeAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L203-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.leadingNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">leadingNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.leadingNode","kind":"def","line":200,"name":"Lean.Parser.leadingNode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L200-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.suppressInsideQuot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">suppressInsideQuot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.suppressInsideQuot","kind":"def","line":195,"name":"Lean.Parser.suppressInsideQuot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L195-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.decQuotDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">decQuotDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.decQuotDepth","kind":"def","line":193,"name":"Lean.Parser.decQuotDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.incQuotDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">incQuotDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.incQuotDepth","kind":"def","line":191,"name":"Lean.Parser.incQuotDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.setLhsPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">setLhsPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.setLhsPrec","kind":"def","line":183,"name":"Lean.Parser.setLhsPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L183-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.setLhsPrecFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">setLhsPrecFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.setLhsPrecFn","kind":"def","line":179,"name":"Lean.Parser.setLhsPrecFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L179-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkLhsPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkLhsPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkLhsPrec","kind":"def","line":174,"name":"Lean.Parser.checkLhsPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L174-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkLhsPrecFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkLhsPrecFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Succeeds if `c.lhsPrec >= prec` ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkLhsPrecFn","kind":"def","line":169,"name":"Lean.Parser.checkLhsPrecFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L169-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkPrec","kind":"def","line":164,"name":"Lean.Parser.checkPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L164-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkPrecFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkPrecFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"Succeeds if `c.prec <= prec` ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkPrecFn","kind":"def","line":159,"name":"Lean.Parser.checkPrecFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L159-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.errorAtSavedPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">errorAtSavedPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">delta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"Generate an error at the position saved with the `withPosition` combinator.\nIf `delta == true`, then it reports at saved position+1.\nThis useful to make sure a parser consumed at least one character.  ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.errorAtSavedPos","kind":"def","line":152,"name":"Lean.Parser.errorAtSavedPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L152-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.errorAtSavedPosFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">errorAtSavedPosFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">delta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.errorAtSavedPosFn","kind":"def","line":145,"name":"Lean.Parser.errorAtSavedPosFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L145-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.error\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.error","kind":"def","line":140,"name":"Lean.Parser.error","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L140-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.errorFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">errorFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.errorFn","kind":"def","line":137,"name":"Lean.Parser.errorFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.node\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">node</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.node","kind":"def","line":132,"name":"Lean.Parser.node","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L132-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nodeInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nodeInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nodeInfo","kind":"def","line":126,"name":"Lean.Parser.nodeInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L126-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.trailingNodeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">trailingNodeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.trailingNodeFn","kind":"def","line":121,"name":"Lean.Parser.trailingNodeFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L121-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.nodeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nodeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.nodeFn","kind":"def","line":116,"name":"Lean.Parser.nodeFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L116-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instAndThenParser\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instAndThenParser</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndThen\">AndThen</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instAndThenParser","kind":"instance","line":113,"name":"Lean.Parser.instAndThenParser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L113-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.andthen\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">andthen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"The `andthen(p, q)` combinator, usually written as adjacency in syntax declarations (`p q`),\nparses `p` followed by `q`.\n\nThe arity of this parser is the sum of the arities of `p` and `q`:\nthat is, it accumulates all the nodes produced by `p` followed by the nodes from `q` into the list\nof arguments to the surrounding parse node. ","docLink":"./Lean/Parser/Basic.html#Lean.Parser.andthen","kind":"def","line":103,"name":"Lean.Parser.andthen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L103-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.instAndThenParserFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instAndThenParserFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndThen\">AndThen</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.instAndThenParserFn","kind":"instance","line":100,"name":"Lean.Parser.instAndThenParserFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L100-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.andthenInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">andthenInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.andthenInfo","kind":"def","line":94,"name":"Lean.Parser.andthenInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L94-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.andthenFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">andthenFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.andthenFn","kind":"def","line":90,"name":"Lean.Parser.andthenFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L90-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkStackTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkStackTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkStackTop","kind":"def","line":85,"name":"Lean.Parser.checkStackTop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L85-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.checkStackTopFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">checkStackTopFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.checkStackTopFn","kind":"def","line":81,"name":"Lean.Parser.checkStackTopFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L81-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.epsilonInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">epsilonInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserInfo\">ParserInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.epsilonInfo","kind":"def","line":78,"name":"Lean.Parser.epsilonInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.dbgTraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">dbgTraceState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">label</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.dbgTraceState","kind":"def","line":76,"name":"Lean.Parser.dbgTraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Basic.html#Lean.Parser.dbgTraceStateFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">dbgTraceStateFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">label</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>","info":{"doc":"","docLink":"./Lean/Parser/Basic.html#Lean.Parser.dbgTraceStateFn","kind":"def","line":66,"name":"Lean.Parser.dbgTraceStateFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Parser/Basic.lean#L66-L74"}}],"imports":["Lean.Parser.Types"],"instances":[{"className":"AndThen","name":"Lean.Parser.instAndThenParserFn","typeNames":["Lean.Parser.ParserFn"]},{"className":"AndThen","name":"Lean.Parser.instAndThenParser","typeNames":["Lean.Parser.Parser"]},{"className":"BEq","name":"Lean.Parser.instBEqOrElseOnAntiquotBehavior","typeNames":["Lean.Parser.OrElseOnAntiquotBehavior"]},{"className":"OrElse","name":"Lean.Parser.instOrElseParserFn","typeNames":["Lean.Parser.ParserFn"]},{"className":"OrElse","name":"Lean.Parser.instOrElseParser","typeNames":["Lean.Parser.Parser"]},{"className":"BEq","name":"Lean.Parser.instBEqRecoveryContext","typeNames":["Lean.Parser.RecoveryContext"]},{"className":"Decidable","name":"Lean.Parser.instDecidableEqRecoveryContext","typeNames":["Eq"]},{"className":"Repr","name":"Lean.Parser.instReprRecoveryContext","typeNames":["Lean.Parser.RecoveryContext"]},{"className":"Inhabited","name":"Lean.Parser.TokenMap.instInhabited","typeNames":["Lean.Parser.TokenMap"]},{"className":"EmptyCollection","name":"Lean.Parser.TokenMap.instEmptyCollection","typeNames":["Lean.Parser.TokenMap"]},{"className":"ForIn","name":"Lean.Parser.TokenMap.instForInProdNameList","typeNames":["Lean.Parser.TokenMap","Prod"]},{"className":"Inhabited","name":"Lean.Parser.instInhabitedPrattParsingTables","typeNames":["Lean.Parser.PrattParsingTables"]},{"className":"Inhabited","name":"Lean.Parser.instInhabitedLeadingIdentBehavior","typeNames":["Lean.Parser.LeadingIdentBehavior"]},{"className":"BEq","name":"Lean.Parser.instBEqLeadingIdentBehavior","typeNames":["Lean.Parser.LeadingIdentBehavior"]},{"className":"Repr","name":"Lean.Parser.instReprLeadingIdentBehavior","typeNames":["Lean.Parser.LeadingIdentBehavior"]},{"className":"Inhabited","name":"Lean.Parser.instInhabitedParserCategory","typeNames":["Lean.Parser.ParserCategory"]},{"className":"Coe","name":"Lean.Parser.instCoeStringParser","typeNames":["String","Lean.Parser.Parser"]}],"name":"Lean.Parser.Basic"}