{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.listVariablesLinter\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">listVariablesLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a></div></div>","info":{"doc":"A linter which validates that all `List`/`Array`/`Vector` variables use allowed names.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.listVariablesLinter","kind":"def","line":230,"name":"Lean.Linter.List.listVariablesLinter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L230-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>","info":{"doc":"Find all binders appearing in the given info tree. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.binders","kind":"def","line":210,"name":"Lean.Linter.List.binders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L210-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedVectorNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedVectorNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Allowed names for `Vector` variables. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedVectorNames","kind":"def","line":207,"name":"Lean.Linter.List.allowedVectorNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L207-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedArrayNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedArrayNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Allowed names for `Array` variables. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedArrayNames","kind":"def","line":204,"name":"Lean.Linter.List.allowedArrayNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L204-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedListNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedListNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Allowed names for `List` variables. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedListNames","kind":"def","line":201,"name":"Lean.Linter.List.allowedListNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L201-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.indexLinter\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">indexLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a></div></div>","info":{"doc":"A linter which validates that the only variables used as \"indices\" (e.g. in `xs[i]` or `xs.take i`)\nare `i`, `j`, or `k`.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.indexLinter","kind":"def","line":171,"name":"Lean.Linter.List.indexLinter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L171-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedBitVecWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedBitVecWidths</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Allowed names for BitVec width variables. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedBitVecWidths","kind":"def","line":168,"name":"Lean.Linter.List.allowedBitVecWidths","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L168-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedWidths</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Allowed names for width variables. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedWidths","kind":"def","line":165,"name":"Lean.Linter.List.allowedWidths","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L165-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedIndices</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Allowed names for index variables. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedIndices","kind":"def","line":162,"name":"Lean.Linter.List.allowedIndices","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L162-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.stripBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">stripBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Strip optional suffixes from a binder name. ","docLink":"./Lean/Linter/List.html#Lean.Linter.List.stripBinderName","kind":"def","line":158,"name":"Lean.Linter.List.stripBinderName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L158-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.bitVecWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">bitVecWidths</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>","info":{"doc":"Return the syntax for all expressions in which an `fvarId` appears as a \"BitVec width\", along with the user name of that `fvarId`.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.bitVecWidths","kind":"def","line":136,"name":"Lean.Linter.List.bitVecWidths","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L136-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.numericalWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">numericalWidths</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>","info":{"doc":"Return the syntax for all expressions in which an `fvarId` appears as a \"numerical width\", along with the user name of that `fvarId`.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.numericalWidths","kind":"def","line":105,"name":"Lean.Linter.List.numericalWidths","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L105-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.numericalIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">numericalIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>","info":{"doc":"Return the syntax for all expressions in which an `fvarId` appears as a \"numerical index\", along with the user name of that `fvarId`.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.numericalIndices","kind":"def","line":47,"name":"Lean.Linter.List.numericalIndices","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L47-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.linter.listVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">linter</span>.<span class=\"name\">listVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`set_option linter.listVariables true` enables a strict linter that\nvalidates that all `List`/`Array`/`Vector` variables use standardized names.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.linter.listVariables","kind":"opaque","line":36,"name":"Lean.Linter.List.linter.listVariables","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L36-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.linter.indexVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">linter</span>.<span class=\"name\">indexVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`set_option linter.indexVariables true` enables a strict linter that\nvalidates that the only variables appearing as an index (e.g. in `xs[i]` or `xs.take i`)\nare `i`, `j`, or `k`,\nand similarly that the only variables appearing as a width (e.g. in `List.replicate n a` or `Vector α n`)\nare `n` or `m`.\n","docLink":"./Lean/Linter/List.html#Lean.Linter.List.linter.indexVariables","kind":"opaque","line":24,"name":"Lean.Linter.List.linter.indexVariables","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Linter/List.lean#L24-L34"}}],"imports":["Lean.Elab.Command","Lean.Server.InfoUtils","Lean.Linter.Basic"],"instances":[],"name":"Lean.Linter.List"}