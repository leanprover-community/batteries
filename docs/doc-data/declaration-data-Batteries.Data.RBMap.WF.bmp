{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.mapVal\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"`O(n)`. Map a function on the values in the map. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.mapVal","kind":"def","line":593,"name":"Batteries.RBMap.mapVal","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L593-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.Imp.instIsMonotoneProdByKeyFstMapSnd\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instIsMonotoneProdByKeyFstMapSnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone\">IsMonotone</a> <span class=\"fn\">(<a href=\"./Batteries/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.Imp.mapSnd\">mapSnd</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.Imp.instIsMonotoneProdByKeyFstMapSnd","kind":"instance","line":581,"name":"Batteries.RBMap.Imp.instIsMonotoneProdByKeyFstMapSnd","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L581-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.Imp.mapSnd\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">mapSnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"Applies `f` to the second component.\nWe extract this as a function so that `IsMonotone (mapSnd f)` can be an instance.\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBMap.Imp.mapSnd","kind":"def","line":573,"name":"Batteries.RBMap.Imp.mapSnd","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L573-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBSet.mapMonotone\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mapMonotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpα</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpβ</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone\">IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span></div></div>","info":{"doc":"`O(n)`. Map a function on every value in the set.\nThis requires `IsMonotone` on the function in order to preserve the order invariant.\nIf the function is not monotone, use `RBSet.map` instead.\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBSet.mapMonotone","kind":"def","line":558,"name":"Batteries.RBSet.mapMonotone","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L558-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.map\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpα</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpβ</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone\">IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmpβ</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span></span></span></div></div>","info":{"doc":"The `map` function preserves the order invariants if `f` is monotone. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.map","kind":"theorem","line":546,"name":"Batteries.RBNode.Ordered.map","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L546-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.map\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">q</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span></span></span></div></div>","info":{"doc":"Sufficient condition for `map` to preserve an `All` quantifier. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.map","kind":"theorem","line":540,"name":"Batteries.RBNode.All.map","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L540-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone.lt_mono\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsMonotone</span>.<span class=\"name\">lt_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpα</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpβ</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone\">IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmpβ</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></div></div>","info":{"doc":"If `x < y` then `f x < f y`. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone.lt_mono","kind":"theorem","line":538,"name":"Batteries.RBNode.IsMonotone.lt_mono","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L538-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsMonotone</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpα</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmpβ</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt_mono</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmpβ</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone\">IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone.mk","kind":"ctor","line":536,"name":"Batteries.RBNode.IsMonotone.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L536-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsMonotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmpα</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmpβ</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The property of a map function `f` which ensures the `map` operation is valid. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.IsMonotone","kind":"class","line":535,"name":"Batteries.RBNode.IsMonotone","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L535-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.map\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"The `map` function preserves the balance invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.map","kind":"theorem","line":529,"name":"Batteries.RBNode.Balanced.map","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L529-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.WF_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The well-formedness invariant for a red-black tree is exactly the `mk` constructor,\nbecause the other constructors of `WF` are redundant.\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.WF_iff","kind":"theorem","line":522,"name":"Batteries.RBNode.WF_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L522-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.WF.out\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The well-formedness invariant implies the ordering and balance properties. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.WF.out","kind":"theorem","line":515,"name":"Batteries.RBNode.WF.out","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L515-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.erase\">erase</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The `erase` function preserves the balance invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.erase","kind":"theorem","line":510,"name":"Batteries.RBNode.Balanced.erase","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L510-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.erase\">erase</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"The `erase` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.erase","kind":"theorem","line":506,"name":"Batteries.RBNode.Ordered.erase","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L506-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp\">DelProp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isBlack\">isBlack</a></span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.del\">del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The `del` function has the `DelProp` property. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.del","kind":"theorem","line":481,"name":"Batteries.RBNode.Balanced.del","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L481-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.del\">del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span></span></span></div></div>","info":{"doc":"The `del` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.del","kind":"theorem","line":468,"name":"Batteries.RBNode.Ordered.del","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L468-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.del\">del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.del","kind":"theorem","line":456,"name":"Batteries.RBNode.All.del","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L456-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp.redred\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">DelProp</span>.<span class=\"name\">redred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp\">DelProp</a> <span class=\"fn\">c</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n'</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a>) <span class=\"fn\">t</span> <span class=\"fn\">n'</span></span></div></div>","info":{"doc":"The `DelProp` property is a strengthened version of the red-red invariant. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp.redred","kind":"theorem","line":449,"name":"Batteries.RBNode.DelProp.redred","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L449-L454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">DelProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The invariant of the `del` function.\n* If the input tree is black, then the result of deletion is a red-red tree with\n  black-height lowered by 1.\n* If the input tree is red or nil, then the result of deletion is a balanced tree with\n  some color and the same black-height.\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp","kind":"def","line":437,"name":"Batteries.RBNode.DelProp","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L437-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.append\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₂</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">(<span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> → <span class=\"fn\">c₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.append\">append</a></span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The balance properties of the `append` function. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.append","kind":"theorem","line":396,"name":"Batteries.RBNode.Balanced.append","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L396-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.append\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lv</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.append\">append</a></span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"The `append` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.append","kind":"theorem","line":363,"name":"Batteries.RBNode.Ordered.append","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L363-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.append\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.append\">append</a></span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.append","kind":"theorem","line":353,"name":"Batteries.RBNode.All.append","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L353-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.balRight\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cl</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">cl</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <a href=\"./Init/Prelude.html#True\">True</a> <span class=\"fn\">r</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> (<span class=\"fn\">cl</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\">balRight</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"The balancing properties of the `balRight` function. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.balRight","kind":"theorem","line":345,"name":"Batteries.RBNode.Balanced.balRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L345-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balRight\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lv</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\">balRight</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"The `balRight` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balRight","kind":"theorem","line":337,"name":"Batteries.RBNode.Ordered.balRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L337-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.balRight\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\">balRight</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.balRight","kind":"theorem","line":333,"name":"Batteries.RBNode.All.balRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L333-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.balLeft\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cr</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <a href=\"./Init/Prelude.html#True\">True</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">cr</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> (<span class=\"fn\">cr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\">balLeft</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"The balancing properties of the `balLeft` function. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.balLeft","kind":"theorem","line":316,"name":"Batteries.RBNode.Balanced.balLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L316-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balLeft\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lv</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\">balLeft</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"The `balLeft` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balLeft","kind":"theorem","line":303,"name":"Batteries.RBNode.Ordered.balLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L303-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.balLeft\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\">balLeft</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.balLeft","kind":"theorem","line":299,"name":"Batteries.RBNode.All.balLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L299-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balRight\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\">balRight</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\">balLeft</a></span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balRight","kind":"theorem","line":295,"name":"Batteries.RBNode.reverse_balRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L295-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balLeft\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\">balLeft</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\">balRight</a></span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balLeft","kind":"theorem","line":287,"name":"Batteries.RBNode.reverse_balLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L287-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.setRed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed\">setRed</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"The `setRed` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.setRed","kind":"theorem","line":283,"name":"Batteries.RBNode.Ordered.setRed","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L283-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.setRed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed\">setRed</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.setRed","kind":"theorem","line":280,"name":"Batteries.RBNode.All.setRed","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L280-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_setRed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed\">setRed</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed\">setRed</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_setRed","kind":"theorem","line":277,"name":"Batteries.RBNode.reverse_setRed","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L277-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c'</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n'</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c'</span> <span class=\"fn\">n'</span></span></div></div>","info":{"doc":"The `insert` function is balanced if the input is balanced.\n(We lose track of both the color and the black-height of the result,\nso this is only suitable for use on the root of the tree.)\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.insert","kind":"theorem","line":265,"name":"Batteries.RBNode.Balanced.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L265-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> (<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isRed\">isRed</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a>) <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The balance invariant of the `ins` function.\nThe result of inserting into the tree either yields a balanced tree,\nor a tree which is almost balanced except that it has a red-red violation at the root.\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.ins","kind":"theorem","line":237,"name":"Batteries.RBNode.Balanced.ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L237-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance2_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"The `balance2` function does nothing if the second argument is already balanced. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance2_eq","kind":"theorem","line":230,"name":"Batteries.RBNode.balance2_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L230-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance1_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"The `balance1` function does nothing if the first argument is already balanced. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance1_eq","kind":"theorem","line":225,"name":"Batteries.RBNode.balance1_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L225-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.balance2\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"The `balance2` function repairs the balance invariant when the second argument is red-red. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.balance2","kind":"theorem","line":220,"name":"Batteries.RBNode.RedRed.balance2","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L220-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.balance1\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"The `balance1` function repairs the balance invariant when the first argument is red-red. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.balance1","kind":"theorem","line":208,"name":"Batteries.RBNode.RedRed.balance1","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L208-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.setBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n'</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n'</span></span></span></div></div>","info":{"doc":"If `t` has the red-red invariant, then setting the root to black yields a balanced tree. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.setBlack","kind":"theorem","line":203,"name":"Batteries.RBNode.RedRed.setBlack","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L203-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.reverse","kind":"theorem","line":199,"name":"Batteries.RBNode.RedRed.reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L199-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.imp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">q</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"The red-red invariant is monotonic in `p`. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.imp","kind":"theorem","line":194,"name":"Batteries.RBNode.RedRed.imp","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L194-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.of_red\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">of_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">n</span></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"A `red` node with the red-red invariant has balanced children. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.of_red","kind":"theorem","line":189,"name":"Batteries.RBNode.RedRed.of_red","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L189-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.of_false\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">of_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"When `p` is false, the red-red case is impossible so the tree is balanced. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.of_false","kind":"theorem","line":184,"name":"Batteries.RBNode.RedRed.of_false","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L184-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.redred\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">redred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">x✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">x✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₂</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">x✝</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">n</span></span></span></span></span></div></div>","info":{"doc":"A red node with balanced red children has the red-red invariant (if `p` is true). ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.redred","kind":"ctor","line":181,"name":"Batteries.RBNode.RedRed.redred","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L181-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.balanced\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">x✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"A balanced tree has the red-red invariant. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed.balanced","kind":"ctor","line":179,"name":"Batteries.RBNode.RedRed.balanced","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L179-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>","info":{"doc":"The red-red invariant is a weakening of the red-black balance invariant which allows\nthe root to be red with red children, but does not allow any other violations.\nIt occurs as a temporary condition in the `insert` and `erase` functions.\n\nThe `p` parameter allows the `.redred` case to be dependent on an additional condition.\nIf it is false, then this is equivalent to the usual red-black invariant.\n","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed","kind":"inductive","line":170,"name":"Batteries.RBNode.RedRed","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L170-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span></span></div></div>","info":{"doc":"The `insert` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.insert","kind":"theorem","line":166,"name":"Batteries.RBNode.Ordered.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L166-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.insert_setBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.insert_setBlack","kind":"theorem","line":162,"name":"Batteries.RBNode.insert_setBlack","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L162-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_insert","kind":"theorem","line":158,"name":"Batteries.RBNode.reverse_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L158-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.isRed_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isRed_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isRed\">isRed</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isRed\">isRed</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.isRed_reverse","kind":"theorem","line":155,"name":"Batteries.RBNode.isRed_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L155-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span></span></span></div></div>","info":{"doc":"The `ins` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.ins","kind":"theorem","line":137,"name":"Batteries.RBNode.Ordered.ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L137-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.ins","kind":"theorem","line":132,"name":"Batteries.RBNode.All.ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L132-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">ins</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_ins","kind":"theorem","line":123,"name":"Batteries.RBNode.reverse_ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L123-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.setBlack_idem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setBlack_idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.setBlack_idem","kind":"theorem","line":121,"name":"Batteries.RBNode.setBlack_idem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.setBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n'</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n'</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.setBlack","kind":"theorem","line":117,"name":"Batteries.RBNode.Balanced.setBlack","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L117-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.setBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.setBlack","kind":"theorem","line":114,"name":"Batteries.RBNode.Ordered.setBlack","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L114-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_setBlack\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_setBlack","kind":"theorem","line":111,"name":"Batteries.RBNode.reverse_setBlack","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L111-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance2_All\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2_All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance2_All","kind":"theorem","line":107,"name":"Batteries.RBNode.balance2_All","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L107-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balance2\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lv</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"The `balance2` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balance2","kind":"theorem","line":99,"name":"Batteries.RBNode.Ordered.balance2","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L99-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance1_All\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1_All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.balance1_All","kind":"theorem","line":95,"name":"Batteries.RBNode.balance1_All","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balance1\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lv</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"The `balance1` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.balance1","kind":"theorem","line":82,"name":"Batteries.RBNode.Ordered.balance1","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L82-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Balanced.reverse","kind":"theorem","line":77,"name":"Batteries.RBNode.Balanced.reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L77-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span></span></div></div>","info":{"doc":"The `reverse` function reverses the ordering invariants. ","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.Ordered.reverse","kind":"theorem","line":71,"name":"Batteries.RBNode.Ordered.reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L71-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.reverse","kind":"theorem","line":68,"name":"Batteries.RBNode.All.reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L68-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balance2\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balance2","kind":"theorem","line":64,"name":"Batteries.RBNode.reverse_balance2","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L64-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balance1\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_balance1","kind":"theorem","line":58,"name":"Batteries.RBNode.reverse_balance1","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L58-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_eq_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_eq_iff","kind":"theorem","line":55,"name":"Batteries.RBNode.reverse_eq_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.reverse_reverse","kind":"theorem","line":52,"name":"Batteries.RBNode.reverse_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpEq.lt_congr_right\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span>.<span class=\"name\">lt_congr_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">z </span><span class=\"fn\">x</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpEq.lt_congr_right","kind":"theorem","line":49,"name":"Batteries.RBNode.cmpEq.lt_congr_right","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpEq.lt_congr_left\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span>.<span class=\"name\">lt_congr_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpEq.lt_congr_left","kind":"theorem","line":46,"name":"Batteries.RBNode.cmpEq.lt_congr_left","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.trans_r\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">trans_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.trans_r","kind":"theorem","line":43,"name":"Batteries.RBNode.cmpLT.trans_r","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.trans_l\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">trans_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.trans_l","kind":"theorem","line":40,"name":"Batteries.RBNode.cmpLT.trans_l","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.trans\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.trans","kind":"theorem","line":37,"name":"Batteries.RBNode.cmpLT.trans","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.flip\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.cmpLT.flip","kind":"theorem","line":34,"name":"Batteries.RBNode.cmpLT.flip","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All_and\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">q</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All_and","kind":"theorem","line":31,"name":"Batteries.RBNode.All_and","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.trivial\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">trivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.All.trivial","kind":"theorem","line":27,"name":"Batteries.RBNode.All.trivial","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/WF.lean#L27-L29"}}],"imports":["Init","Batteries.Data.RBMap.Basic","Batteries.Tactic.SeqFocus"],"instances":[{"className":"Batteries.RBNode.IsMonotone","name":"Batteries.RBMap.Imp.instIsMonotoneProdByKeyFstMapSnd","typeNames":["Ordering.byKey","Ordering.byKey","Batteries.RBMap.Imp.mapSnd"]}],"name":"Batteries.Data.RBMap.WF"}