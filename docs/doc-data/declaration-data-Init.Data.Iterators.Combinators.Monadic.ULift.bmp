{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.IterM.uLift\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">uLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">lift</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Transforms an `m`-monadic iterator with values in `β` into an `n`-monadic iterator with\nvalues in `ULift β`. Requires a `MonadLift m (ULiftT n)` instance.\n\n**Marble diagram:**\n\n```\nit            ---a    ----b    ---c    --d    ---⊥\nit.uLift n    ---.up a----.up b---.up c--.up d---⊥\n```\n\n**Termination properties:**\n\n* `Finite`: only if the original iterator is finite\n* `Productive`: only if the original iterator is productive\n","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.IterM.uLift","kind":"def","line":152,"name":"Std.Iterators.IterM.uLift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L152-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSizePartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorSizePartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSizePartial\">IteratorSizePartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSizePartial","kind":"instance","line":148,"name":"Std.Iterators.Types.ULiftIterator.instIteratorSizePartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L148-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSize\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorSize","kind":"instance","line":143,"name":"Std.Iterators.Types.ULiftIterator.instIteratorSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorCollectPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial","kind":"instance","line":139,"name":"Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L139-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollect\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorCollect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorCollect","kind":"instance","line":135,"name":"Std.Iterators.Types.ULiftIterator.instIteratorCollect","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L135-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorLoopPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> x → <a href=\"./foundational_types.html\">Type</a> x'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial","kind":"instance","line":131,"name":"Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L131-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> x → <a href=\"./foundational_types.html\">Type</a> x'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIteratorLoop","kind":"instance","line":126,"name":"Std.Iterators.Types.ULiftIterator.instIteratorLoop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L126-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductive\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductive","kind":"instance","line":122,"name":"Std.Iterators.Types.ULiftIterator.instProductive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L122-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductivenessRelation\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instProductivenessRelation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Productive</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Internal/Termination.html#Std.Iterators.ProductivenessRelation\">ProductivenessRelation</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instProductivenessRelation","kind":"def","line":112,"name":"Std.Iterators.Types.ULiftIterator.instProductivenessRelation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L112-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinite\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinite","kind":"instance","line":108,"name":"Std.Iterators.Types.ULiftIterator.instFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L108-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinitenessRelation\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instFinitenessRelation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Internal/Termination.html#Std.Iterators.FinitenessRelation\">FinitenessRelation</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instFinitenessRelation","kind":"def","line":96,"name":"Std.Iterators.Types.ULiftIterator.instFinitenessRelation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L96-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">instIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.instIterator","kind":"instance","line":85,"name":"Std.Iterators.Types.ULiftIterator.instIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L85-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.Monadic.modifyStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">modifyStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Transforms a step of the base iterator into a step of the `uLift` iterator.\n","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.Monadic.modifyStep","kind":"def","line":74,"name":"Std.Iterators.Types.ULiftIterator.Monadic.modifyStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L74-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.inner\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.inner","kind":"def","line":69,"name":"Std.Iterators.Types.ULiftIterator.inner","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\">ULiftIterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">β</span> <span class=\"fn\">lift</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator.mk","kind":"ctor","line":67,"name":"Std.Iterators.Types.ULiftIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Types</span>.<span class=\"name\">ULiftIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lift</span> : <span class=\"fn\">⦃<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u⦄ → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"Internal state of the `uLift` iterator combinator. Do not depend on its internals. ","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.Types.ULiftIterator","kind":"structure","line":65,"name":"Std.Iterators.Types.ULiftIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L65-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_map\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span>\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_map","kind":"theorem","line":57,"name":"Std.Iterators.ULiftT.run_map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L57-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_bind\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span>\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span>)</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_bind","kind":"theorem","line":51,"name":"Std.Iterators.ULiftT.run_bind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\">run</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run_pure","kind":"theorem","line":46,"name":"Std.Iterators.ULiftT.run_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L46-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instLawfulMonadULiftT\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instLawfulMonadULiftT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instLawfulMonadULiftT","kind":"instance","line":34,"name":"Std.Iterators.instLawfulMonadULiftT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L34-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instMonadULiftT\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instMonadULiftT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.instMonadULiftT","kind":"instance","line":29,"name":"Std.Iterators.instMonadULiftT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L29-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\">ULiftT</a> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Returns the underlying `n`-monadic representation of a `ULiftT n α` value. ","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT.run","kind":"def","line":24,"name":"Std.Iterators.ULiftT.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L24-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ULiftT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v'</div></div>","info":{"doc":"`ULiftT.{v, u}` shrinks a monad on `Type max u v` to a monad on `Type u`. ","docLink":"./Init/Data/Iterators/Combinators/Monadic/ULift.html#Std.Iterators.ULiftT","kind":"def","line":20,"name":"Std.Iterators.ULiftT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/Monadic/ULift.lean#L20-L22"}}],"imports":["Init.Data.Iterators.Internal.Termination","Init.Data.Iterators.Consumers.Monadic"],"instances":[{"className":"Monad","name":"Std.Iterators.instMonadULiftT","typeNames":["Std.Iterators.ULiftT"]},{"className":"LawfulMonad","name":"Std.Iterators.instLawfulMonadULiftT","typeNames":["Std.Iterators.ULiftT"]},{"className":"Std.Iterators.Iterator","name":"Std.Iterators.Types.ULiftIterator.instIterator","typeNames":["Std.Iterators.Types.ULiftIterator","ULift"]},{"className":"Std.Iterators.Finite","name":"Std.Iterators.Types.ULiftIterator.instFinite","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.Productive","name":"Std.Iterators.Types.ULiftIterator.instProductive","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"Std.Iterators.Types.ULiftIterator.instIteratorLoop","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"Std.Iterators.Types.ULiftIterator.instIteratorLoopPartial","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"Std.Iterators.Types.ULiftIterator.instIteratorCollect","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"Std.Iterators.Types.ULiftIterator.instIteratorCollectPartial","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.IteratorSize","name":"Std.Iterators.Types.ULiftIterator.instIteratorSize","typeNames":["Std.Iterators.Types.ULiftIterator"]},{"className":"Std.Iterators.IteratorSizePartial","name":"Std.Iterators.Types.ULiftIterator.instIteratorSizePartial","typeNames":["Std.Iterators.Types.ULiftIterator"]}],"name":"Init.Data.Iterators.Combinators.Monadic.ULift"}