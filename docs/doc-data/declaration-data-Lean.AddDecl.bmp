{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.addAndCompile\"><span class=\"name\">Lean</span>.<span class=\"name\">addAndCompile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">logCompileErrors</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/AddDecl.html#Lean.addAndCompile","kind":"def","line":226,"name":"Lean.addAndCompile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L226-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forceExpose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds the given declaration to the environment's private scope, deriving a suitable presentation in\nthe public scope if under the module system and if the declaration is not private. If `forceExpose`\nis true, exposes the declaration body, i.e. preserves the full representation in the public scope,\nindependently of `Environment.isExporting` and even for theorems.\n","docLink":"./Lean/AddDecl.html#Lean.addDecl","kind":"def","line":102,"name":"Lean.addDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L102-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.warnIfUsesSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">warnIfUsesSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If the `warn.sorry` option is set to true and there are no errors in the log already,\nlogs a warning if the declaration uses `sorry`.\n","docLink":"./Lean/AddDecl.html#Lean.warnIfUsesSorry","kind":"def","line":77,"name":"Lean.warnIfUsesSorry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L77-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.warn.sorry\"><span class=\"name\">Lean</span>.<span class=\"name\">warn</span>.<span class=\"name\">sorry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"If `warn.sorry` is set to true, then, so long as the message log does not already have any errors,\ndeclarations with `sorryAx` generate the \"declaration uses 'sorry'\" warning. ","docLink":"./Lean/AddDecl.html#Lean.warn.sorry","kind":"opaque","line":70,"name":"Lean.warn.sorry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L70-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.wasOriginallyTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">wasOriginallyTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the declaration was originally declared as a theorem; see also\n`Lean.getOriginalConstKind?`. Returns `false` if the declaration was not found.\n","docLink":"./Lean/AddDecl.html#Lean.wasOriginallyTheorem","kind":"def","line":63,"name":"Lean.wasOriginallyTheorem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L63-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.getOriginalConstKind?\"><span class=\"name\">Lean</span>.<span class=\"name\">getOriginalConstKind?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></span></div></div>","info":{"doc":"Returns the kind of the declaration as originally declared instead of as exported. This information\nis stored by `Lean.addDecl` and may be inaccurate if that function was circumvented. Returns `none`\nif the declaration was not found.\n","docLink":"./Lean/AddDecl.html#Lean.getOriginalConstKind?","kind":"def","line":52,"name":"Lean.getOriginalConstKind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L52-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/AddDecl.html#Lean.Kernel.Environment.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></span></div></div>","info":{"doc":"Adds given declaration to the environment, respecting `debug.skipKernelTC`. ","docLink":"./Lean/AddDecl.html#Lean.Kernel.Environment.addDecl","kind":"def","line":16,"name":"Lean.Kernel.Environment.addDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/AddDecl.lean#L16-L22"}}],"imports":["Lean.Meta.Sorry","Lean.Util.CollectAxioms"],"instances":[],"name":"Lean.AddDecl"}