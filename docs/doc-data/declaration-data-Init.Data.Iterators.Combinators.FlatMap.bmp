{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMap\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">flatMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α₂ </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"Let `it` be an iterator and `f` a function mapping `it`'s outputs to iterators.\nThen `it.flatMap f` is an iterator that goes over `it` and for each output, it applies `f` and\niterates over the resulting iterator. `it.flatMap f` emits all values obtained from the inner\niterators -- first, all of the first inner iterator, then all of the second one, and so on.\n\n**Marble diagram:**\n\n```text\nit                 ---a      --b      c    --d -⊥\nf a                    a1-a2⊥\nf b                             b1-b2⊥\nf c                                    c1-c2⊥\nf d                                           ⊥\nit.flatMap         ----a1-a2----b1-b2--c1-c2----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` and the inner iterators are finite\n* `Productive` instance: only if `it` is finite and the inner iterators are productive\n\nFor certain functions `f`, the resulting iterator will be finite (or productive) even though\nno `Finite` (or `Productive`) instance is provided out of the box. For example, if the outer\niterator is productive and the inner\niterators are productive *and provably never empty*, then the resulting iterator is also productive.\n\n**Performance:**\n\nThis combinator incurs an additional O(1) cost with each output of `it` or an internal iterator.\n\nFor each value emitted by the outer iterator `it`, this combinator calls `f`.\n","docLink":"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMap","kind":"def","line":47,"name":"Std.Iterators.Iter.flatMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/FlatMap.lean#L47-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMapAfter\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">flatMapAfter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α₂ </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it₁</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">γ</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"Let `it₁` and `it₂` be iterators and `f` a function mapping `it₁`'s outputs to iterators\nof the same type as `it₂`. Then `it₁.flatMapAfter f it₂` first goes over `it₂` and then over\n`it₁.flatMap f it₂`, emitting all their values.\n\nThe main purpose of this combinator is to represent the intermediate state of a `flatMap` iterator\nthat is currently iterating over one of the inner iterators.\n\n**Marble diagram:**\n\n```text\nit₁                            --b      c    --d -⊥\nit₂                      a1-a2⊥\nf b                               b1-b2⊥\nf c                                      c1-c2⊥\nf d                                             ⊥\nit.flatMapAfter  f it₂   a1-a2----b1-b2--c1-c2----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it₁`, `it₂` and the inner iterators are finite\n* `Productive` instance: only if `it₁` is finite and `it₂` and the inner iterators are productive\n\nFor certain functions `f`, the resulting iterator will be finite (or productive) even though\nno `Finite` (or `Productive`) instance is provided out of the box. For example, if the outer\niterator is productive and the inner\niterators are productive *and provably never empty*, then the resulting iterator is also productive.\n\n**Performance:**\n\nThis combinator incurs an additional O(1) cost with each output of `it₁`, `it₂` or an internal\niterator.\n\nFor each value emitted by the outer iterator `it₁`, this combinator calls `f`.\n","docLink":"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMapAfter","kind":"def","line":41,"name":"Std.Iterators.Iter.flatMapAfter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/FlatMap.lean#L41-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMapM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">flatMapM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α₂ </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">γ</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"Let `it` be an iterator and `f` a monadic function mapping `it`'s outputs to iterators.\nThen `it.flatMapM f` is an iterator that goes over `it` and for each output, it applies `f` and\niterates over the resulting iterator. `it.flatMapM f` emits all values obtained from the inner\niterators -- first, all of the first inner iterator, then all of the second one, and so on.\n\n**Marble diagram (without monadic effects):**\n\n```text\nit                 ---a      --b      c    --d -⊥\nf a                    a1-a2⊥\nf b                             b1-b2⊥\nf c                                    c1-c2⊥\nf d                                           ⊥\nit.flatMapM        ----a1-a2----b1-b2--c1-c2----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` and the inner iterators are finite\n* `Productive` instance: only if `it` is finite and the inner iterators are productive\n\nFor certain functions `f`, the resulting iterator will be finite (or productive) even though\nno `Finite` (or `Productive`) instance is provided out of the box. For example, if the outer\niterator is productive and the inner\niterators are productive *and provably never empty*, then the resulting iterator is also productive.\n\n**Performance:**\n\nThis combinator incurs an additional O(1) cost with each output of `it` or an internal iterator.\n\nFor each value emitted by the outer iterator `it`, this combinator calls `f`.\n","docLink":"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMapM","kind":"def","line":35,"name":"Std.Iterators.Iter.flatMapM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/FlatMap.lean#L35-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMapAfterM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">flatMapAfterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α₂ </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <span class=\"fn\">m</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">γ</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it₁</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">γ</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"Let `it₁` and `it₂` be iterators and `f` a monadic function mapping `it₁`'s outputs to iterators\nof the same type as `it₂`. Then `it₁.flatMapAfterM f it₂` first goes over `it₂` and then over\n`it₁.flatMap f it₂`, emitting all their values.\n\nThe main purpose of this combinator is to represent the intermediate state of a `flatMap` iterator\nthat is currently iterating over one of the inner iterators.\n\n**Marble diagram (without monadic effects):**\n\n```text\nit₁                            --b      c    --d -⊥\nit₂                      a1-a2⊥\nf b                               b1-b2⊥\nf c                                      c1-c2⊥\nf d                                             ⊥\nit.flatMapAfterM f it₂   a1-a2----b1-b2--c1-c2----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it₁`, `it₂` and the inner iterators are finite\n* `Productive` instance: only if `it₁` is finite and `it₂` and the inner iterators are productive\n\nFor certain functions `f`, the resulting iterator will be finite (or productive) even though\nno `Finite` (or `Productive`) instance is provided out of the box. For example, if the outer\niterator is productive and the inner\niterators are productive *and provably never empty*, then the resulting iterator is also productive.\n\n**Performance:**\n\nThis combinator incurs an additional O(1) cost with each output of `it₁`, `it₂` or an internal\niterator.\n\nFor each value emitted by the outer iterator `it₁`, this combinator calls `f`.\n","docLink":"./Init/Data/Iterators/Combinators/FlatMap.html#Std.Iterators.Iter.flatMapAfterM","kind":"def","line":29,"name":"Std.Iterators.Iter.flatMapAfterM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Combinators/FlatMap.lean#L29-L33"}}],"imports":["Init.Data.Iterators.Combinators.FilterMap","Init.Data.Iterators.Combinators.Monadic.FlatMap"],"instances":[],"name":"Init.Data.Iterators.Combinators.FlatMap"}