{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.evalBvDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">evalBvDecide</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.evalBvDecide","kind":"def","line":440,"name":"Lean.Elab.Tactic.BVDecide.Frontend.evalBvDecide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L440-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">bvDecide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a></span></div></div>","info":{"doc":"Call `bvDecide'` and throw a pretty error if a counter example ends up being produced.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide","kind":"def","line":429,"name":"Lean.Elab.Tactic.BVDecide.Frontend.bvDecide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L429-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">bvDecide'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a>)</span></span></div></div>","info":{"doc":"Try to close `g` using a bitblaster. Return either a `CounterExample` if one is found or a `Result`\nif `g` is proven.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide'","kind":"def","line":418,"name":"Lean.Elab.Tactic.BVDecide.Frontend.bvDecide'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L418-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.lratCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Result</span>.<span class=\"name\">lratCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a></span></div></div>","info":{"doc":"If the normalization step was not enough to solve the goal this contains the LRAT proof\ncertificate.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.lratCert","kind":"def","line":416,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Result.lratCert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L416-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lratCert</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.mk","kind":"ctor","line":411,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Result.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L411-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of calling `bv_decide`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result","kind":"structure","line":408,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Result","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L408-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">bvUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvUnsat","kind":"def","line":402,"name":"Lean.Elab.Tactic.BVDecide.Frontend.bvUnsat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L402-L406"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.closeWithBVReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">closeWithBVReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unsatProver</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver\">UnsatProver</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.closeWithBVReflection","kind":"def","line":384,"name":"Lean.Elab.Tactic.BVDecide.Frontend.closeWithBVReflection","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L384-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reflectBV\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">reflectBV</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reflectBV","kind":"def","line":358,"name":"Lean.Elab.Tactic.BVDecide.Frontend.reflectBV","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L358-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.lratBitblaster\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">lratBitblaster</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reflectionResult</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atomsAssignment</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">UnsatProver.Result</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.lratBitblaster","kind":"def","line":321,"name":"Lean.Elab.Tactic.BVDecide.Frontend.lratBitblaster","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L321-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert.toReflectionProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">LratCert</span>.<span class=\"name\">toReflectionProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cert</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reflectionResult</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Turn an `LratCert` into a proof that some `reflectedExpr` is UNSAT.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert.toReflectionProof","kind":"def","line":273,"name":"Lean.Elab.Tactic.BVDecide.Frontend.LratCert.toReflectionProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L273-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainCounterExampleQuality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">explainCounterExampleQuality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counterExample</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainCounterExampleQuality","kind":"def","line":254,"name":"Lean.Elab.Tactic.BVDecide.Frontend.explainCounterExampleQuality","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L254-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">explainers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainers","kind":"def","line":251,"name":"Lean.Elab.Tactic.BVDecide.Frontend.explainers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L251-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.unusedRelevantHypothesesExplainer\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">unusedRelevantHypothesesExplainer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.unusedRelevantHypothesesExplainer","kind":"def","line":246,"name":"Lean.Elab.Tactic.BVDecide.Frontend.unusedRelevantHypothesesExplainer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L246-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.uninterpretedExplainer\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">uninterpretedExplainer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.uninterpretedExplainer","kind":"def","line":241,"name":"Lean.Elab.Tactic.BVDecide.Frontend.uninterpretedExplainer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L241-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">diagnose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Diagnose spurious counter examples, currently this checks:\n- Whether uninterpreted symbols were used\n- Whether all hypotheses which contain any variable that was bitblasted were included\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose","kind":"def","line":166,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L166-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.checkRelevantHypsUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">checkRelevantHypsUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.checkRelevantHypsUsed","kind":"def","line":161,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.checkRelevantHypsUsed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L161-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addDerivedEquation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">addDerivedEquation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addDerivedEquation","kind":"def","line":157,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addDerivedEquation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L157-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUnusedRelevantHypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">addUnusedRelevantHypothesis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUnusedRelevantHypothesis","kind":"def","line":153,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUnusedRelevantHypothesis","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L153-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUninterpretedSymbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">addUninterpretedSymbol</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUninterpretedSymbol","kind":"def","line":149,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUninterpretedSymbol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L149-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.equations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">equations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.equations","kind":"def","line":145,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.equations","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L145-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.unusedHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">unusedHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.unusedHyps","kind":"def","line":141,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.unusedHyps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L141-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counterExample</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.run","kind":"def","line":136,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L136-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM","kind":"def","line":132,"name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.derivedEquations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">derivedEquations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.derivedEquations","kind":"def","line":130,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.derivedEquations","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.unusedRelevantHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">unusedRelevantHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.unusedRelevantHypotheses","kind":"def","line":129,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.unusedRelevantHypotheses","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.uninterpretedSymbols\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">uninterpretedSymbols</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.uninterpretedSymbols","kind":"def","line":128,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.uninterpretedSymbols","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uninterpretedSymbols</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unusedRelevantHypotheses</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">derivedEquations</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.mk","kind":"ctor","line":127,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of a spurious counter example diagnosis.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis","kind":"structure","line":124,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L124-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver","kind":"def","line":121,"name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L121-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.lratCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span>.<span class=\"name\">lratCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.lratCert","kind":"def","line":119,"name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.lratCert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.proof","kind":"def","line":118,"name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lratCert</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">Result</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.mk","kind":"ctor","line":117,"name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result","kind":"structure","line":117,"name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L117-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.equations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">equations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span></div></div>","info":{"doc":"The actual counter example as a list of equations denoted as `expr = value` pairs.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.equations","kind":"def","line":115,"name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.equations","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.unusedHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">unusedHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"The set of unused but potentially relevant hypotheses. Useful for diagnosing spurious counter\nexamples.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.unusedHypotheses","kind":"def","line":111,"name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.unusedHypotheses","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.goal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>","info":{"doc":"The goal in which to interpret this counter example.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.goal","kind":"def","line":106,"name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.goal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unusedHypotheses</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equations</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.mk","kind":"ctor","line":102,"name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A counter example generated from the bitblaster.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample","kind":"structure","line":99,"name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L99-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"A cache for `toExpr bvExpr`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.expr","kind":"def","line":97,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.unusedHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">unusedHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"Set of unused hypotheses for diagnostic purposes.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.unusedHypotheses","kind":"def","line":93,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.unusedHypotheses","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.proveFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">proveFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"Function to prove `False` given a satisfiability proof of `bvExpr`\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.proveFalse","kind":"def","line":89,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.proveFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.bvExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">bvExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">Std.Tactic.BVDecide.BVLogicalExpr</a></div></div>","info":{"doc":"The reflected expression.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.bvExpr","kind":"def","line":85,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.bvExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bvExpr</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">Std.Tactic.BVDecide.BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proveFalse</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unusedHypotheses</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.mk","kind":"ctor","line":81,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult","kind":"structure","line":81,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L81-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reconstructCounterExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">reconstructCounterExample</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var2Cnf</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">Std.Tactic.BVDecide.BVBit</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aigSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atomsAssignment</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span></div></div>","info":{"doc":"Given:\n- `var2Cnf`: The mapping from AIG to CNF variables.\n- `assignments`: A model for the CNF as provided by a SAT solver.\n- `aigSize`: The amount of nodes in the AIG that was used to produce the CNF.\n- `atomsAssignment`: The mapping of the reflection monad from atom indices to `Expr`.\n\nReconstruct bit by bit which value expression must have had which `BitVec` value and return all\nexpression - pair values.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reconstructCounterExample","kind":"def","line":27,"name":"Lean.Elab.Tactic.BVDecide.Frontend.reconstructCounterExample","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L27-L79"}}],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.SatAtBVLogical","Lean.Elab.Tactic.BVDecide.Frontend.Normalize","Lean.Elab.Tactic.BVDecide.Frontend.LRAT"],"instances":[],"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide"}