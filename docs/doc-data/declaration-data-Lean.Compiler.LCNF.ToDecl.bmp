{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.toDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"Convert the given declaration from the Lean environment into `Decl`.\nThe steps for this are roughly:\n- partially erasing type information of the declaration\n- eta-expanding the declaration value.\n- if the declaration has an unsafe-rec version, use it.\n- expand declarations tagged with the `[macro_inline]` attribute\n- turn the resulting term into LCNF declaration\n","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.toDecl","kind":"def","line":89,"name":"Lean.Compiler.LCNF.toDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToDecl.lean#L89-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.getDeclInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getDeclInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span></div></div>","info":{"doc":"Return the declaration `ConstantInfo` for the code generator.\n\nRemark: the unsafe recursive version is tried first.\n","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.getDeclInfo?","kind":"def","line":80,"name":"Lean.Compiler.LCNF.getDeclInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToDecl.lean#L80-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">inlineMatchers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Inline auxiliary `matcher` applications.\n","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers","kind":"def","line":37,"name":"Lean.Compiler.LCNF.inlineMatchers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToDecl.lean#L37-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.macroInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">macroInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Inline constants tagged with the `[macro_inline]` attribute occurring in `e`.\n","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.macroInline","kind":"def","line":15,"name":"Lean.Compiler.LCNF.macroInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToDecl.lean#L15-L23"}}],"imports":["Lean.Compiler.InitAttr","Lean.Compiler.LCNF.ToLCNF"],"instances":[],"name":"Lean.Compiler.LCNF.ToDecl"}