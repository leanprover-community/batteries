{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode'\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppCode'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Similar to `ppCode`, but in `CoreM`, and it does not assume\n`code` has already been internalized.\n","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode'","kind":"def","line":166,"name":"Lean.Compiler.LCNF.ppCode'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L166-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl'\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppDecl'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Similar to `ppDecl`, but in `CoreM`, and it does not assume\n`decl` has already been internalized.\nThis function is used for debugging purposes.\n","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl'","kind":"def","line":157,"name":"Lean.Compiler.LCNF.ppDecl'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L157-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.runCompilerWithoutModifyingState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">runCompilerWithoutModifyingState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Execute `x` in `CoreM` without modifying `Core`s state.\nThis is useful if we want make sure we do not affect the next free variable id.\n","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.runCompilerWithoutModifyingState","kind":"def","line":146,"name":"Lean.Compiler.LCNF.runCompilerWithoutModifyingState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L146-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppFunDecl","kind":"def","line":142,"name":"Lean.Compiler.LCNF.ppFunDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L142-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppDecl","kind":"def","line":138,"name":"Lean.Compiler.LCNF.ppDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L138-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppLetValue","kind":"def","line":135,"name":"Lean.Compiler.LCNF.ppLetValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ppCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.ppCode","kind":"def","line":132,"name":"Lean.Compiler.LCNF.ppCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.run","kind":"def","line":126,"name":"Lean.Compiler.LCNF.PP.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L126-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppDeclValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppDeclValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppDeclValue","kind":"def","line":120,"name":"Lean.Compiler.LCNF.PP.ppDeclValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L120-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppCode","kind":"opaque","line":106,"name":"Lean.Compiler.LCNF.PP.ppCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L106-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppAlt","kind":"opaque","line":101,"name":"Lean.Compiler.LCNF.PP.ppAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L101-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFunDecl","kind":"opaque","line":98,"name":"Lean.Compiler.LCNF.PP.ppFunDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L98-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.getFunType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">getFunType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.getFunType","kind":"def","line":91,"name":"Lean.Compiler.LCNF.PP.getFunType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L91-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetDecl","kind":"def","line":85,"name":"Lean.Compiler.LCNF.PP.ppLetDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParams","kind":"def","line":82,"name":"Lean.Compiler.LCNF.PP.ppParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppParam","kind":"def","line":75,"name":"Lean.Compiler.LCNF.PP.ppParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLetValue","kind":"def","line":67,"name":"Lean.Compiler.LCNF.PP.ppLetValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L67-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLitValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppLitValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lit</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppLitValue","kind":"def","line":62,"name":"Lean.Compiler.LCNF.PP.ppLitValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L62-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArgs","kind":"def","line":59,"name":"Lean.Compiler.LCNF.PP.ppArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppArg","kind":"def","line":46,"name":"Lean.Compiler.LCNF.PP.ppArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L46-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppExpr","kind":"def","line":43,"name":"Lean.Compiler.LCNF.PP.ppExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">ppFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\">M</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.ppFVar","kind":"def","line":37,"name":"Lean.Compiler.LCNF.PP.ppFVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L37-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PP</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PrettyPrinter.html#Lean.Compiler.LCNF.PP.M","kind":"def","line":20,"name":"Lean.Compiler.LCNF.PP.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PrettyPrinter.lean#L20-L20"}}],"imports":["Lean.PrettyPrinter.Delaborator.Options","Lean.Compiler.LCNF.Internalize"],"instances":[],"name":"Lean.Compiler.LCNF.PrettyPrinter"}