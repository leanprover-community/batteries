{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/IndPred.html#Lean.Elab.Structural.mkIndPredBRecOnF\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkIndPredBRecOnF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">positions</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfo</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value </span><span class=\"fn\">FType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Calculates the `.brecOn` functional argument corresponding to one structural recursive function.\nThe `value` is the function with (only) the fixed parameters moved into the context,\nThe `FType` is the expected type of the argument.\nThe `recArgInfos` is used to transform the body of the function to replace recursive calls with\nuses of the `below` induction hypothesis.\n","docLink":"./Lean/Elab/PreDefinition/Structural/IndPred.html#Lean.Elab.Structural.mkIndPredBRecOnF","kind":"def","line":126,"name":"Lean.Elab.Structural.mkIndPredBRecOnF","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Structural/IndPred.lean#L126-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/IndPred.html#Lean.Elab.Structural.mkIndPredBRecOnMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkIndPredBRecOnMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfo</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value </span><span class=\"fn\">funType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Calculates the `.brecOn` motive corresponding to one structural recursive function.\nThe `value` is the function with (only) the fixed parameters moved into the context.\n","docLink":"./Lean/Elab/PreDefinition/Structural/IndPred.html#Lean.Elab.Structural.mkIndPredBRecOnMotive","kind":"def","line":115,"name":"Lean.Elab.Structural.mkIndPredBRecOnMotive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Structural/IndPred.lean#L115-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/IndPred.html#Lean.Elab.Structural.withFunTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">withFunTypes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Turns `fun a b => x` into `let funType := fun a b => α` (where `x : α`).\nThe continuation is the called with all `funType`s corresponding to the values.\n","docLink":"./Lean/Elab/PreDefinition/Structural/IndPred.html#Lean.Elab.Structural.withFunTypes","kind":"def","line":97,"name":"Lean.Elab.Structural.withFunTypes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Structural/IndPred.lean#L97-L113"}}],"imports":["Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.Structural.RecArgInfo","Lean.Util.HasConstCache","Lean.Meta.IndPredBelow"],"instances":[],"name":"Lean.Elab.PreDefinition.Structural.IndPred"}