{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.guessLex\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">guessLex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unaryPreDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasures\">TerminationMeasures</a></span></div></div>","info":{"doc":"Main entry point of this module:\n\nTry to find a lexicographic ordering of the basic measures for which the recursive definition\nterminates. See the module doc string for a high-level overview.\n\nThe `preDefs` are used to determine arity and types of parameters; the bodies are ignored.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.guessLex","kind":"def","line":790,"name":"Lean.Elab.WF.guessLex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L790-L836"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.reportTerminationMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">reportTerminationMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termMeasures</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasures\">TerminationMeasures</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Shows the inferred termination measure to the user, and implements `termination_by?`\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.reportTerminationMeasures","kind":"def","line":774,"name":"Lean.Elab.WF.GuessLex.reportTerminationMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L774-L785"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.toTerminationMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">toTerminationMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userVarNamess</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measuress</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">solution</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">MutualMeasure</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasures\">TerminationMeasures</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.toTerminationMeasures","kind":"def","line":760,"name":"Lean.Elab.WF.GuessLex.toTerminationMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L760-L772"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mkProdElem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">mkProdElem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"For `#[x₁, .., xₙ]` create `(x₁, .., xₙ)`.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mkProdElem","kind":"def","line":749,"name":"Lean.Elab.WF.GuessLex.mkProdElem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L749-L758"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">explainFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measuress</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainFailure","kind":"def","line":739,"name":"Lean.Elab.WF.GuessLex.explainFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L739-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainMutualFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">explainMutualFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measuress</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Explain what we found out about the recursive calls (mutual case) ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainMutualFailure","kind":"def","line":705,"name":"Lean.Elab.WF.GuessLex.explainMutualFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L705-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainNonMutualFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">explainNonMutualFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measures</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Explain what we found out about the recursive calls (non-mutual case) ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.explainNonMutualFailure","kind":"def","line":690,"name":"Lean.Elab.WF.GuessLex.explainNonMutualFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L690-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.collectHeaders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">collectHeaders</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>) <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.collectHeaders","kind":"def","line":685,"name":"Lean.Elab.WF.GuessLex.collectHeaders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L685-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.measureHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">measureHeader</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>) <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"How to present the basic measure in the table header, possibly abbreviated. ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.measureHeader","kind":"def","line":673,"name":"Lean.Elab.WF.GuessLex.measureHeader","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L673-L683"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.posString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">posString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Concise textual representation of the source location of a recursive call  ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.posString","kind":"def","line":657,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.posString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L657-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.formatTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">formatTable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Given a matrix (row-major) of strings, arranges them in tabular form.\nFirst column is left-aligned, others right-aligned.\nSingle space as column separator.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.formatTable","kind":"def","line":629,"name":"Lean.Elab.WF.GuessLex.formatTable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L629-L655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.solve\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">solve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measures</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">calls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"The core logic of guessing the lexicographic order\nGiven a matrix that for each call and measure indicates whether that measure is\ndecreasing, equal, less-or-equal or unknown, It finds a sequence of measures\nthat is lexicographically decreasing.\n\nThe matrix is implemented here as an array of monadic query methods only so that\nwe can fill is lazily. Morally, this is a pure function\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.solve","kind":"def","line":590,"name":"Lean.Elab.WF.GuessLex.solve","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L590-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numMeasures</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">MutualMeasure</a>)</span></span></div></div>","info":{"doc":"Enumerate all measures we want to try.\n\nAll measures (resp. combinations thereof) and\npossible orderings of functions (if more than one)\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateMeasures","kind":"def","line":572,"name":"Lean.Elab.WF.GuessLex.generateMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L572-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">generateCombinations?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numMeasures</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">threshold</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span></div></div>","info":{"doc":"Generate all combination of measures. Assumes we have numbered the measures of each function,\nand their counts is in `numMeasures`.\n\nThis puts the uniform combinations ([0,0,0], [1,1,1]) to the front; they are commonly most useful to\ntry first, when the mutually recursive functions have similar argument structures\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.generateCombinations?","kind":"def","line":543,"name":"Lean.Elab.WF.GuessLex.generateCombinations?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L543-L570"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.inspectCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">inspectCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">MutualMeasure</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></span></div></div>","info":{"doc":"Evaluate a recursive call at a given `MutualMeasure` ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.inspectCall","kind":"def","line":528,"name":"Lean.Elab.WF.GuessLex.inspectCall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L528-L540"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.func\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">MutualMeasure</span>.<span class=\"name\">func</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">MutualMeasure</a></span></div></div>","info":{"doc":"The given function index is assigned 1, the rest 0 ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.func","kind":"ctor","line":525,"name":"Lean.Elab.WF.GuessLex.MutualMeasure.func","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L525-L526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">MutualMeasure</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\">MutualMeasure</a></span></div></div>","info":{"doc":"For every function, the given argument index ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure.args","kind":"ctor","line":523,"name":"Lean.Elab.WF.GuessLex.MutualMeasure.args","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L523-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">MutualMeasure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The measures that we order lexicographically can be comparing basic measures,\nor numbering the functions ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.MutualMeasure","kind":"inductive","line":520,"name":"Lean.Elab.WF.GuessLex.MutualMeasure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L520-L526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.prettyEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">prettyEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerMeasureIdx </span><span class=\"fn\">calleeMeasureIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Print a single cache entry as a string, without forcing it ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.prettyEntry","kind":"def","line":513,"name":"Lean.Elab.WF.GuessLex.RecCallCache.prettyEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L513-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerMeasureIdx </span><span class=\"fn\">calleeMeasureIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></div></div>","info":{"doc":"Run `evalRecCall` and cache there result ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.eval","kind":"def","line":503,"name":"Lean.Elab.WF.GuessLex.RecCallCache.eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L503-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decrTactics</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.DecreasingBy\">DecreasingBy</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measuress</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a></span></div></div>","info":{"doc":"Create a cache to memoize calls to `evalRecCall descTactic? rcc` ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk","kind":"def","line":492,"name":"Lean.Elab.WF.GuessLex.RecCallCache.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L492-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a>)</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.cache","kind":"def","line":490,"name":"Lean.Elab.WF.GuessLex.RecCallCache.cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L490-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.rcc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">rcc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.rcc","kind":"def","line":489,"name":"Lean.Elab.WF.GuessLex.RecCallCache.rcc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L489-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.calleeMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">calleeMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.calleeMeasures","kind":"def","line":488,"name":"Lean.Elab.WF.GuessLex.RecCallCache.calleeMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L488-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.callerMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">callerMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.callerMeasures","kind":"def","line":487,"name":"Lean.Elab.WF.GuessLex.RecCallCache.callerMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L487-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.decrTactic?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">decrTactic?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.DecreasingBy\">DecreasingBy</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.decrTactic?","kind":"def","line":486,"name":"Lean.Elab.WF.GuessLex.RecCallCache.decrTactic?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L486-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.callerName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">callerName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.callerName","kind":"def","line":485,"name":"Lean.Elab.WF.GuessLex.RecCallCache.callerName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L485-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk''\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span>.<span class=\"name\">mk''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decrTactic?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.DecreasingBy\">DecreasingBy</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerMeasures </span><span class=\"fn\">calleeMeasures</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\">RecCallCache</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache.mk''","kind":"ctor","line":484,"name":"Lean.Elab.WF.GuessLex.RecCallCache.mk''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L484-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallCache","kind":"structure","line":484,"name":"Lean.Elab.WF.GuessLex.RecCallCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L484-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.evalRecCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">evalRecCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decrTactic?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.DecreasingBy\">DecreasingBy</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerMeasures </span><span class=\"fn\">calleeMeasures</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerMeasureIdx </span><span class=\"fn\">calleeMeasureIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></div></div>","info":{"doc":"For a given recursive call, and a choice of parameter and argument index,\ntry to prove equality, < or ≤.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.evalRecCall","kind":"def","line":440,"name":"Lean.Elab.WF.GuessLex.evalRecCall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L440-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.toNatRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">toNatRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given a `GuessLexRel`, produce a binary `Expr` that relates two `Nat` values accordingly. ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.toNatRel","kind":"def","line":433,"name":"Lean.Elab.WF.GuessLex.GuessLexRel.toNatRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L433-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToFormatGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instToFormatGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToFormatGuessLexRel","kind":"instance","line":430,"name":"Lean.Elab.WF.GuessLex.instToFormatGuessLexRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L430-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToStringGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instToStringGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instToStringGuessLexRel","kind":"instance","line":424,"name":"Lean.Elab.WF.GuessLex.instToStringGuessLexRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L424-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instDecidableEqGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel","kind":"instance","line":422,"name":"Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instReprGuessLexRel.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instReprGuessLexRel</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instReprGuessLexRel.repr","kind":"def","line":422,"name":"Lean.Elab.WF.GuessLex.instReprGuessLexRel.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instReprGuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instReprGuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instReprGuessLexRel","kind":"instance","line":422,"name":"Lean.Elab.WF.GuessLex.instReprGuessLexRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.no_idea\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">no_idea</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.no_idea","kind":"ctor","line":421,"name":"Lean.Elab.WF.GuessLex.GuessLexRel.no_idea","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.le\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.le","kind":"ctor","line":421,"name":"Lean.Elab.WF.GuessLex.GuessLexRel.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.eq","kind":"ctor","line":421,"name":"Lean.Elab.WF.GuessLex.GuessLexRel.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\">GuessLexRel</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel.lt","kind":"ctor","line":421,"name":"Lean.Elab.WF.GuessLex.GuessLexRel.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">GuessLexRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `GuessLexRel` described how a recursive call affects a measure; whether it\ndecreases strictly, non-strictly, is equal, or else.  ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.GuessLexRel","kind":"inductive","line":419,"name":"Lean.Elab.WF.GuessLex.GuessLexRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L419-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.complexMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">complexMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userVarNamess</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recCalls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.complexMeasures","kind":"def","line":384,"name":"Lean.Elab.WF.GuessLex.complexMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L384-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.isNatCmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">isNatCmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>","info":{"doc":"Is the expression a `<`-like comparison of `Nat` expressions ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.isNatCmp","kind":"opaque","line":366,"name":"Lean.Elab.WF.GuessLex.isNatCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L366-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.collectRecCalls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">collectRecCalls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unaryPreDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">Meta.ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span></div></div>","info":{"doc":"Traverse a unary `PreDefinition`, and returns a `WithRecCall` closure for each recursive\ncall site.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.collectRecCalls","kind":"def","line":341,"name":"Lean.Elab.WF.GuessLex.collectRecCalls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L341-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.filterSubsumed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">filterSubsumed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rcs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a></span></div></div>","info":{"doc":"The elaborator is prone to duplicate terms, including recursive calls, even if the user\nonly wrote a single one. This duplication is wasteful if we run the tactics on duplicated\ncalls, and confusing in the output of GuessLex. So prune the list of recursive calls,\nand remove those where another call exists that has the same goal and context that is no more\nspecific.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.filterSubsumed","kind":"def","line":319,"name":"Lean.Elab.WF.GuessLex.filterSubsumed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L319-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.create\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">create</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caller</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callee</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a></span></div></div>","info":{"doc":"Store the current recursive call and its context. ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.create","kind":"def","line":313,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.create","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L313-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ctxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">ctxt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ctxt","kind":"def","line":311,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.ctxt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L311-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Arguments to callee (including fixed prefix) ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.args","kind":"def","line":310,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.args","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L310-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.callee\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">callee</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Function index of callee ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.callee","kind":"def","line":308,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.callee","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L308-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Parameters of caller (including fixed prefix) ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.params","kind":"def","line":306,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.params","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L306-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.caller\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">caller</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Function index of caller ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.caller","kind":"def","line":304,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.caller","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L304-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Syntax location of recursive call ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.ref","kind":"def","line":302,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L302-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caller</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callee</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\">RecCallWithContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext.mk","kind":"ctor","line":300,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L300-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">RecCallWithContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `RecCallWithContext` focuses on a single recursive call in a unary predefinition,\nand runs the given action in the context of that call.  ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.RecCallWithContext","kind":"structure","line":298,"name":"Lean.Elab.WF.GuessLex.RecCallWithContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L298-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slc</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run a `MetaM` action in the saved state. ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.run","kind":"def","line":290,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L290-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.create\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">create</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a></span></div></div>","info":{"doc":"Capture the `MetaM` state including local context. ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.create","kind":"def","line":283,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext.create","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L283-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">savedState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Meta.SavedState</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedState","kind":"def","line":281,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext.savedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L281-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">savedLocalInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalInstances","kind":"def","line":280,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalInstances","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L280-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">savedLocalContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalContext","kind":"def","line":279,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext.savedLocalContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L279-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedLocalContext</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedLocalInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedState</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Meta.SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\">SavedLocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext.mk","kind":"ctor","line":278,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">SavedLocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `SavedLocalContext` captures the state and local context of a `MetaM`, to be continued later.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.SavedLocalContext","kind":"structure","line":275,"name":"Lean.Elab.WF.GuessLex.SavedLocalContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L275-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withRecApps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recFnName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedPrefixSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Traverses the given expression `e`, and invokes the continuation `k`\nat every saturated call to `recFnName`.\n\nThe expression `param` is passed along, and refined when going under a matcher\nor `casesOn` application.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withRecApps","kind":"def","line":201,"name":"Lean.Elab.WF.GuessLex.withRecApps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L201-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recFnName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Internal monad used by `withRecApps` ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.M","kind":"def","line":197,"name":"Lean.Elab.WF.GuessLex.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L197-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.simpleMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">simpleMeasures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userVarNamess</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span>)</span></span></div></div>","info":{"doc":"Create one measure for each (eligible) parameter of the given predefinition.  ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.simpleMeasures","kind":"def","line":173,"name":"Lean.Elab.WF.GuessLex.simpleMeasures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L173-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withUserNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">withUserNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Sets the user names for the given free variables in `xs`. ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.withUserNames","kind":"def","line":167,"name":"Lean.Elab.WF.GuessLex.withUserNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L167-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mayOmitSizeOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">mayOmitSizeOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">is_mutual</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Determine if the measure for parameter `x` should be `sizeOf x` or just `x`.\n\nFor non-mutual definitions, we omit `sizeOf` when the measure does not depend on\nthe other varying parameters, and its `WellFoundedRelation` instance goes via `SizeOf`.\n\nFor mutual definitions, we omit `sizeOf` only when the measure is (at reducible transparency!) of\ntype `Nat` (else we'd have to worry about differently-typed measures from different functions to\nline up).\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.mayOmitSizeOf","kind":"def","line":140,"name":"Lean.Elab.WF.GuessLex.mayOmitSizeOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L140-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">BasicMeasure</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"String description of this measure ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.toString","kind":"def","line":134,"name":"Lean.Elab.WF.GuessLex.BasicMeasure.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L134-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instInhabitedBasicMeasure</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure.default","kind":"def","line":132,"name":"Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">instInhabitedBasicMeasure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure","kind":"instance","line":132,"name":"Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.natFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">BasicMeasure</span>.<span class=\"name\">natFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Like `.fn`, but unconditionally with `sizeOf` at the right type.\nWe use this one when in `evalRecCall`\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.natFn","kind":"def","line":131,"name":"Lean.Elab.WF.GuessLex.BasicMeasure.natFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">BasicMeasure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTerminationMeasure</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">natFn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.mk","kind":"ctor","line":126,"name":"Lean.Elab.WF.GuessLex.BasicMeasure.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.toTerminationMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">BasicMeasure</span>.<span class=\"name\">toTerminationMeasure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\">BasicMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure.toTerminationMeasure","kind":"def","line":126,"name":"Lean.Elab.WF.GuessLex.BasicMeasure.toTerminationMeasure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L126-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">BasicMeasure</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">Lean.Elab.TerminationMeasure</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A termination measure with extra fields for use within GuessLex ","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.BasicMeasure","kind":"structure","line":125,"name":"Lean.Elab.WF.GuessLex.BasicMeasure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L125-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.naryVarNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">naryVarNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Given the original parameter names from `originalVarNames`, find\ngood variable names to be used when talking about termination measures:\nUse user-given parameter names if present; use x1...xn otherwise.\n\nThe names ought to accessible (no macro scopes) and fresh wrt to the current environment,\nso that with `showInferredTerminationBy` we can print them to the user reliably.\nWe do that by appending `'` as needed.\n\nIt is possible (but unlikely without malice) that some of the user-given names\nshadow each other, and the guessed relation refers to the wrong one. In that\ncase, the user gets to keep both pieces (and may have to rename variables).\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.naryVarNames","kind":"def","line":94,"name":"Lean.Elab.WF.GuessLex.naryVarNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L94-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.originalVarNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">originalVarNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Given a predefinition, return the variable names in the outermost lambdas.\nIncludes the “fixed prefix”.\n\nThe length of the returned array is also used to determine the arity\nof the function, so it should match what `packDomain` does.\n","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.originalVarNames","kind":"def","line":84,"name":"Lean.Elab.WF.GuessLex.originalVarNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L84-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.showInferredTerminationBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">GuessLex</span>.<span class=\"name\">showInferredTerminationBy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/GuessLex.html#Lean.Elab.WF.GuessLex.showInferredTerminationBy","kind":"opaque","line":78,"name":"Lean.Elab.WF.GuessLex.showInferredTerminationBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/GuessLex.lean#L78-L81"}}],"imports":["Lean.Util.HasConstCache","Lean.Meta.Match.MatcherApp.Transform","Lean.Meta.Tactic.Cleanup","Lean.Meta.Tactic.TryThis","Lean.Meta.ArgsPacker","Lean.Elab.PreDefinition.Mutual","Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.TerminationMeasure","Lean.Elab.PreDefinition.FixedParams","Lean.Elab.PreDefinition.WF.Basic","Lean.Data.Array"],"instances":[{"className":"Inhabited","name":"Lean.Elab.WF.GuessLex.instInhabitedBasicMeasure","typeNames":["Lean.Elab.WF.GuessLex.BasicMeasure"]},{"className":"Repr","name":"Lean.Elab.WF.GuessLex.instReprGuessLexRel","typeNames":["Lean.Elab.WF.GuessLex.GuessLexRel"]},{"className":"Decidable","name":"Lean.Elab.WF.GuessLex.instDecidableEqGuessLexRel","typeNames":["Eq"]},{"className":"ToString","name":"Lean.Elab.WF.GuessLex.instToStringGuessLexRel","typeNames":["Lean.Elab.WF.GuessLex.GuessLexRel"]},{"className":"Std.ToFormat","name":"Lean.Elab.WF.GuessLex.instToFormatGuessLexRel","typeNames":["Lean.Elab.WF.GuessLex.GuessLexRel"]}],"name":"Lean.Elab.PreDefinition.WF.GuessLex"}