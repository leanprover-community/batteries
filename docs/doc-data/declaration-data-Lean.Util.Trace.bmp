{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.addTraceAsMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">addTraceAsMessages</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.addTraceAsMessages","kind":"def","line":402,"name":"Lean.addTraceAsMessages","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L402-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.withTraceNodeBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">withTraceNodeBefore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">always</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji\">ExceptToEmoji</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collapsed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"Similar to `withTraceNode`, but msg is constructed **before** executing `k`.\nThis is important when debugging methods such as `isDefEq`, and we want to generate the message\nbefore `k` updates the metavariable assignment. The class `ExceptToEmoji` is used to convert\nthe result produced by `k` into an emoji (e.g., `üí•Ô∏è`, `‚úÖÔ∏è`, `‚ùåÔ∏è`).\n\nTODO: find better name for this function.\n","docLink":"./Lean/Util/Trace.html#Lean.withTraceNodeBefore","kind":"def","line":369,"name":"Lean.withTraceNodeBefore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L369-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instExceptToEmojiOption\"><span class=\"name\">Lean</span>.<span class=\"name\">instExceptToEmojiOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ± </span><span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji\">ExceptToEmoji</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Œ±</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instExceptToEmojiOption","kind":"instance","line":366,"name":"Lean.instExceptToEmojiOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L366-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instExceptToEmojiBool\"><span class=\"name\">Lean</span>.<span class=\"name\">instExceptToEmojiBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji\">ExceptToEmoji</a> <span class=\"fn\">Œµ</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instExceptToEmojiBool","kind":"instance","line":363,"name":"Lean.instExceptToEmojiBool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L363-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji.toEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">ExceptToEmoji</span>.<span class=\"name\">toEmoji</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ </span><span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji\">ExceptToEmoji</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span> ‚Üí <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Visualize an `Except.ok x` using a checkmark or cross.\n\nBy convention, `bombEmoji` is used for `Except.error`. ","docLink":"./Lean/Util/Trace.html#Lean.ExceptToEmoji.toEmoji","kind":"def","line":361,"name":"Lean.ExceptToEmoji.toEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L361-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ExceptToEmoji</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ </span><span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toEmoji</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span> ‚Üí <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji\">ExceptToEmoji</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.ExceptToEmoji.mk","kind":"ctor","line":357,"name":"Lean.ExceptToEmoji.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L357-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.ExceptToEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">ExceptToEmoji</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Œµ </span><span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.ExceptToEmoji","kind":"class","line":357,"name":"Lean.ExceptToEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L357-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.exceptEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">exceptEmoji</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span> ‚Üí <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Visualize an `Except` using a checkmark or a cross.\n\nUnlike `exceptBoolEmoji` this shows `.error` with `crossEmoji`. ","docLink":"./Lean/Util/Trace.html#Lean.exceptEmoji","kind":"def","line":350,"name":"Lean.exceptEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L350-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.exceptOptionEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">exceptOptionEmoji</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Œ±</span>)</span></span> ‚Üí <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Visualize an `Except _ (Option _)` using a checkmark or cross.\n\n`bombEmoji` is used for `Except.error`. ","docLink":"./Lean/Util/Trace.html#Lean.exceptOptionEmoji","kind":"def","line":342,"name":"Lean.exceptOptionEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L342-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.exceptBoolEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">exceptBoolEmoji</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">Œµ</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> ‚Üí <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Visualize an `Except _ Bool` using a checkmark or cross.\n\n`bombEmoji` is used for `Except.error`. ","docLink":"./Lean/Util/Trace.html#Lean.exceptBoolEmoji","kind":"def","line":334,"name":"Lean.exceptBoolEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L334-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.crossEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">crossEmoji</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.crossEmoji","kind":"def","line":332,"name":"Lean.crossEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L332-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.checkEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">checkEmoji</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.checkEmoji","kind":"def","line":331,"name":"Lean.checkEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L331-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.bombEmoji\"><span class=\"name\">Lean</span>.<span class=\"name\">bombEmoji</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.bombEmoji","kind":"def","line":330,"name":"Lean.bombEmoji","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L330-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.¬´doElemTrace[_]__¬ª\"><span class=\"name\">Lean</span>.<span class=\"name\">¬´doElemTrace[_]__¬ª</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.¬´doElemTrace[_]__¬ª","kind":"def","line":327,"name":"Lean.¬´doElemTrace[_]__¬ª","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L327-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.registerTraceClass\"><span class=\"name\">Lean</span>.<span class=\"name\">registerTraceClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceClassName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inherited</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Registers a trace class.\n\nBy default, trace classes are not inherited;\nthat is, `set_option trace.foo true` does not imply `set_option trace.foo.bar true`.\nCalling ``registerTraceClass `foo.bar (inherited := true)`` enables this inheritance\non an opt-in basis.\n","docLink":"./Lean/Util/Trace.html#Lean.registerTraceClass","kind":"def","line":301,"name":"Lean.registerTraceClass","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L301-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.withTraceNode'\"><span class=\"name\">Lean</span>.<span class=\"name\">withTraceNode'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\">Œ±</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collapsed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"A version of `Lean.withTraceNode` which allows generating the message within the computation. ","docLink":"./Lean/Util/Trace.html#Lean.withTraceNode'","kind":"def","line":291,"name":"Lean.withTraceNode'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L291-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.withTraceNode\"><span class=\"name\">Lean</span>.<span class=\"name\">withTraceNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">always</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">Œ±</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">Œ±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collapsed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">Œ±</span></span></div></div>","info":{"doc":"Run the provided action `k`, and log its execution within a trace node.\n\nThe message is produced after the action completes, and has access to its return value.\nIf it is more convenient to produce the message as part of the computation,\nthen `Lean.withTraceNode'` can be used instead.\nIf profiling is enabled, this will also log the runtime of `k`.\n\nA typical invocation might be:\n```lean4\nwithTraceNode `isPosTrace (msg := (return m!\"{ExceptToEmoji.toEmoji ¬∑} checking positivity\")) do\n  return 0 < x\n```\n\nThe `cls`, `collapsed`, and `tag` arguments are fowarded to the constructor of `TraceData`.\n","docLink":"./Lean/Util/Trace.html#Lean.withTraceNode","kind":"def","line":254,"name":"Lean.withTraceNode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L254-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptMonadCacheT\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadAlwaysExceptMonadCacheT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ </span><span class=\"fn\">œâ </span><span class=\"fn\">Œ≤</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">always</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">œâ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">Œ±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Lean/Util/MonadCache.html#Lean.MonadCacheT\">MonadCacheT</a> <span class=\"fn\">Œ±</span> <span class=\"fn\">Œ≤</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptMonadCacheT","kind":"instance","line":250,"name":"Lean.instMonadAlwaysExceptMonadCacheT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L250-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptReaderT\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadAlwaysExceptReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ </span><span class=\"fn\">œÅ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">always</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">œÅ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptReaderT","kind":"instance","line":247,"name":"Lean.instMonadAlwaysExceptReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L247-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptStateRefT'\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadAlwaysExceptStateRefT'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ </span><span class=\"fn\">œâ </span><span class=\"fn\">œÉ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">always</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">œâ</span> <span class=\"fn\">œÉ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptStateRefT'","kind":"instance","line":244,"name":"Lean.instMonadAlwaysExceptStateRefT'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L244-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptStateT\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadAlwaysExceptStateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ </span><span class=\"fn\">œÉ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">always</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">œÉ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptStateT","kind":"instance","line":241,"name":"Lean.instMonadAlwaysExceptStateT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L241-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptEIO\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadAlwaysExceptEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">Œµ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instMonadAlwaysExceptEIO","kind":"instance","line":238,"name":"Lean.instMonadAlwaysExceptEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L238-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept.except\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadAlwaysExcept</span>.<span class=\"name\">except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u ‚Üí <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept.except","kind":"def","line":234,"name":"Lean.MonadAlwaysExcept.except","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L234-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadAlwaysExcept</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œµ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u ‚Üí <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\">MonadAlwaysExcept</a> <span class=\"fn\">Œµ</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept.mk","kind":"ctor","line":233,"name":"Lean.MonadAlwaysExcept.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L233-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadAlwaysExcept</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Œµ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u ‚Üí <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>","info":{"doc":"`MonadExcept` variant that is expected to catch all exceptions of the given type in case the\nstandard instance doesn't.\n\nIn most circumstances, we want to let runtime exceptions during term elaboration bubble up to the\ncommand elaborator (see `Core.tryCatch`). However, in a few cases like building the trace tree, we\nreally need to handle (and then re-throw) every exception lest we end up with a broken tree.\n","docLink":"./Lean/Util/Trace.html#Lean.MonadAlwaysExcept","kind":"class","line":225,"name":"Lean.MonadAlwaysExcept","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L225-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace.profiler.threshold.unitAdjusted\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span>.<span class=\"name\">profiler</span>.<span class=\"name\">threshold</span>.<span class=\"name\">unitAdjusted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace.profiler.threshold.unitAdjusted","kind":"def","line":218,"name":"Lean.trace.profiler.threshold.unitAdjusted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L218-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace.profiler.output.pp\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span>.<span class=\"name\">profiler</span>.<span class=\"name\">output</span>.<span class=\"name\">pp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace.profiler.output.pp","kind":"opaque","line":195,"name":"Lean.trace.profiler.output.pp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L195-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace.profiler.output\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span>.<span class=\"name\">profiler</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace.profiler.output","kind":"opaque","line":188,"name":"Lean.trace.profiler.output","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L188-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace.profiler.useHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span>.<span class=\"name\">profiler</span>.<span class=\"name\">useHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace.profiler.useHeartbeats","kind":"opaque","line":181,"name":"Lean.trace.profiler.useHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L181-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace.profiler.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span>.<span class=\"name\">profiler</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace.profiler.threshold","kind":"opaque","line":173,"name":"Lean.trace.profiler.threshold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L173-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace.profiler\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span>.<span class=\"name\">profiler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace.profiler","kind":"opaque","line":165,"name":"Lean.trace.profiler","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L165-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.traceM\"><span class=\"name\">Lean</span>.<span class=\"name\">traceM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkMsg</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.traceM","kind":"def","line":152,"name":"Lean.traceM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L152-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">trace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> ‚Üí <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.trace","kind":"def","line":148,"name":"Lean.trace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L148-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.addTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">addTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.addTrace","kind":"def","line":143,"name":"Lean.addTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.addRawTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">addRawTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.addRawTrace","kind":"def","line":138,"name":"Lean.addRawTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L138-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.setTraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">setTraceState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.setTraceState","kind":"def","line":127,"name":"Lean.setTraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L127-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.modifyTraces\"><span class=\"name\">Lean</span>.<span class=\"name\">modifyTraces</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></span> ‚Üí <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.modifyTraces","kind":"def","line":124,"name":"Lean.modifyTraces","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L124-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.getTraces\"><span class=\"name\">Lean</span>.<span class=\"name\">getTraces</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.getTraces","kind":"def","line":120,"name":"Lean.getTraces","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L120-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.isTracingEnabledFor\"><span class=\"name\">Lean</span>.<span class=\"name\">isTracingEnabledFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Determine if tracing is available for a given class, checking ancestor classes if appropriate. ","docLink":"./Lean/Util/Trace.html#Lean.isTracingEnabledFor","kind":"def","line":116,"name":"Lean.isTracingEnabledFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L116-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.checkTraceOption\"><span class=\"name\">Lean</span>.<span class=\"name\">checkTraceOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inherited</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.checkTraceOption","kind":"def","line":105,"name":"Lean.checkTraceOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L105-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.resetTraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">resetTraceState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.resetTraceState","kind":"def","line":102,"name":"Lean.resetTraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.printTraces\"><span class=\"name\">Lean</span>.<span class=\"name\">printTraces</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.printTraces","kind":"def","line":98,"name":"Lean.printTraces","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instMonadTraceOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadTraceOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instMonadTraceOfMonadLift","kind":"instance","line":91,"name":"Lean.instMonadTraceOfMonadLift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L91-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadTrace.getInheritedTraceOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadTrace</span>.<span class=\"name\">getInheritedTraceOptions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Should return the value of `inheritedTraceOptions.get`, which does not change after\ninitialization. As `IO.Ref.get` may be too expensive on frequent and multi-threaded access, the\nvalue may want to be cached, which is done in the stdlib in `CoreM`.\n","docLink":"./Lean/Util/Trace.html#Lean.MonadTrace.getInheritedTraceOptions","kind":"def","line":87,"name":"Lean.MonadTrace.getInheritedTraceOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadTrace.getTraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadTrace</span>.<span class=\"name\">getTraceState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.MonadTrace.getTraceState","kind":"def","line":81,"name":"Lean.MonadTrace.getTraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadTrace.modifyTraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadTrace</span>.<span class=\"name\">modifyTraceState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a> ‚Üí <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span> ‚Üí <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.MonadTrace.modifyTraceState","kind":"def","line":80,"name":"Lean.MonadTrace.modifyTraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadTrace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadTrace</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifyTraceState</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a> ‚Üí <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span> ‚Üí <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getTraceState</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getInheritedTraceOptions</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span> := by exact inheritedTraceOptions.get)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.MonadTrace.mk","kind":"ctor","line":79,"name":"Lean.MonadTrace.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.MonadTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadTrace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> ‚Üí <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.MonadTrace","kind":"class","line":79,"name":"Lean.MonadTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L79-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.inheritedTraceOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">inheritedTraceOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.inheritedTraceOptions","kind":"opaque","line":77,"name":"Lean.inheritedTraceOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instInhabitedTraceState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTraceState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instInhabitedTraceState.default","kind":"def","line":75,"name":"Lean.instInhabitedTraceState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instInhabitedTraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTraceState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instInhabitedTraceState","kind":"instance","line":75,"name":"Lean.instInhabitedTraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceState.traces\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceState</span>.<span class=\"name\">traces</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceState.traces","kind":"def","line":74,"name":"Lean.TraceState.traces","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceState.tid\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceState</span>.<span class=\"name\">tid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Thread ID, used by `trace.profiler.output`. ","docLink":"./Lean/Util/Trace.html#Lean.TraceState.tid","kind":"def","line":73,"name":"Lean.TraceState.tid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tid</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traces</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceState.mk","kind":"ctor","line":71,"name":"Lean.TraceState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceState\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceState","kind":"structure","line":71,"name":"Lean.TraceState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L71-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instInhabitedTraceElem.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTraceElem</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instInhabitedTraceElem.default","kind":"def","line":69,"name":"Lean.instInhabitedTraceElem.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.instInhabitedTraceElem\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTraceElem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.instInhabitedTraceElem","kind":"instance","line":69,"name":"Lean.instInhabitedTraceElem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceElem.msg\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceElem</span>.<span class=\"name\">msg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceElem.msg","kind":"def","line":68,"name":"Lean.TraceElem.msg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceElem.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceElem</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceElem.ref","kind":"def","line":67,"name":"Lean.TraceElem.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceElem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceElem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceElem\">TraceElem</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceElem.mk","kind":"ctor","line":66,"name":"Lean.TraceElem.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Trace.html#Lean.TraceElem\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceElem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Trace.html#Lean.TraceElem","kind":"structure","line":66,"name":"Lean.TraceElem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Trace.lean#L66-L69"}}],"imports":["Lean.Elab.Exception","Lean.Log"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedTraceElem","typeNames":["Lean.TraceElem"]},{"className":"Inhabited","name":"Lean.instInhabitedTraceState","typeNames":["Lean.TraceState"]},{"className":"Lean.MonadTrace","name":"Lean.instMonadTraceOfMonadLift","typeNames":[]},{"className":"Lean.MonadAlwaysExcept","name":"Lean.instMonadAlwaysExceptEIO","typeNames":["EIO"]},{"className":"Lean.MonadAlwaysExcept","name":"Lean.instMonadAlwaysExceptStateT","typeNames":["StateT"]},{"className":"Lean.MonadAlwaysExcept","name":"Lean.instMonadAlwaysExceptStateRefT'","typeNames":["StateRefT'"]},{"className":"Lean.MonadAlwaysExcept","name":"Lean.instMonadAlwaysExceptReaderT","typeNames":["ReaderT"]},{"className":"Lean.MonadAlwaysExcept","name":"Lean.instMonadAlwaysExceptMonadCacheT","typeNames":["Lean.MonadCacheT"]},{"className":"Lean.ExceptToEmoji","name":"Lean.instExceptToEmojiBool","typeNames":["Bool"]},{"className":"Lean.ExceptToEmoji","name":"Lean.instExceptToEmojiOption","typeNames":["Option"]}],"name":"Lean.Util.Trace"}