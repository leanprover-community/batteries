{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getOtherDeclMonoType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getOtherDeclMonoType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getOtherDeclMonoType","kind":"def","line":134,"name":"Lean.Compiler.LCNF.getOtherDeclMonoType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L134-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.monoTypeExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">monoTypeExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CacheExtension\">CacheExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"State for the environment extension used to save the LCNF mono phase type for declarations\nthat do not have code associated with them.\nExample: constructors, inductive types, foreign functions.\n","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.monoTypeExt","kind":"opaque","line":127,"name":"Lean.Compiler.LCNF.monoTypeExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L127-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.toMonoType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toMonoType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Convert a LCNF type from the base phase to the mono phase.\n\nLCNF types in the mono phase do not have dependencies,\nand universe levels have been erased.\n\nThe type contains only `→` and constants.\n","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.toMonoType","kind":"opaque","line":79,"name":"Lean.Compiler.LCNF.toMonoType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L79-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getParamTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getParamTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getParamTypes","kind":"def","line":71,"name":"Lean.Compiler.LCNF.getParamTypes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L71-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.hasTrivialStructure?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">hasTrivialStructure?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span></div></div>","info":{"doc":"Return `some fieldIdx` if `declName` is the name of an inductive datatype s.t.\n- It does not have builtin support in the runtime.\n- It has only one constructor.\n- This constructor has only one computationally relevant field.\n","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.hasTrivialStructure?","kind":"def","line":43,"name":"Lean.Compiler.LCNF.hasTrivialStructure?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L43-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.trivialStructureInfoExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">trivialStructureInfoExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CacheExtension\">CacheExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.trivialStructureInfoExt","kind":"opaque","line":40,"name":"Lean.Compiler.LCNF.trivialStructureInfoExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instReprTrivialStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instReprTrivialStructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instReprTrivialStructureInfo","kind":"instance","line":38,"name":"Lean.Compiler.LCNF.instReprTrivialStructureInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instReprTrivialStructureInfo.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instReprTrivialStructureInfo</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instReprTrivialStructureInfo.repr","kind":"def","line":38,"name":"Lean.Compiler.LCNF.instReprTrivialStructureInfo.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedTrivialStructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo","kind":"instance","line":38,"name":"Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedTrivialStructureInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo.default","kind":"def","line":38,"name":"Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.fieldIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">TrivialStructureInfo</span>.<span class=\"name\">fieldIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.fieldIdx","kind":"def","line":37,"name":"Lean.Compiler.LCNF.TrivialStructureInfo.fieldIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">TrivialStructureInfo</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.numParams","kind":"def","line":36,"name":"Lean.Compiler.LCNF.TrivialStructureInfo.numParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.ctorName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">TrivialStructureInfo</span>.<span class=\"name\">ctorName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.ctorName","kind":"def","line":35,"name":"Lean.Compiler.LCNF.TrivialStructureInfo.ctorName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">TrivialStructureInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams </span><span class=\"fn\">fieldIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo.mk","kind":"ctor","line":34,"name":"Lean.Compiler.LCNF.TrivialStructureInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">TrivialStructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"We say a structure has a trivial structure if it has not builtin support in the runtime,\nit has only one constructor, and this constructor has only one relevant field.\n","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo","kind":"structure","line":30,"name":"Lean.Compiler.LCNF.TrivialStructureInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L30-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getRelevantCtorFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getRelevantCtorFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"Given a constructor, return a bitmask `m` s.t. `m[i]` is true if field `i` is\ncomputationally relevant.\n","docLink":"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.getRelevantCtorFields","kind":"def","line":16,"name":"Lean.Compiler.LCNF.getRelevantCtorFields","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/MonoTypes.lean#L16-L28"}}],"imports":["Lean.Compiler.LCNF.Util","Lean.Compiler.LCNF.BaseTypes"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.instInhabitedTrivialStructureInfo","typeNames":["Lean.Compiler.LCNF.TrivialStructureInfo"]},{"className":"Repr","name":"Lean.Compiler.LCNF.instReprTrivialStructureInfo","typeNames":["Lean.Compiler.LCNF.TrivialStructureInfo"]}],"name":"Lean.Compiler.LCNF.MonoTypes"}