{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandLetExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandLetExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandLetExpr","kind":"def","line":213,"name":"Lean.Elab.Term.expandLetExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L213-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandMatchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandMatchExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandMatchExpr","kind":"def","line":207,"name":"Lean.Elab.Term.expandMatchExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L207-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseAlt</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.main","kind":"def","line":195,"name":"Lean.Elab.Term.MatchExpr.main","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L195-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.generate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">generate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseAlt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Generates an `if-then-else` tree for implementing a `match_expr` with discriminant `discr`,\nalternatives `alts`, and else-alternative `elseAlt`.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.generate","kind":"def","line":157,"name":"Lean.Elab.Term.MatchExpr.generate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L157-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toDoubleQuotedName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">toDoubleQuotedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ident</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toDoubleQuotedName","kind":"def","line":154,"name":"Lean.Elab.Term.MatchExpr.toDoubleQuotedName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L154-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getActuals\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getActuals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span></div></div>","info":{"doc":"Generates the actual arguments for invoking the auxiliary continuation function\nassociated with the given alternative. The arguments are the actuals stored in `alt`.\n`discr` is also an argument if `alt.var?` is not none.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getActuals","kind":"def","line":140,"name":"Lean.Elab.Term.MatchExpr.getActuals","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L140-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>))</span></span></div></div>","info":{"doc":"Generates parameters for the continuation function used to execute\nthe RHS of the given alternative.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getParams","kind":"def","line":125,"name":"Lean.Elab.Term.MatchExpr.getParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L125-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.initK\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">initK</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>","info":{"doc":"Creates a fresh identifier for representing the continuation function used to\nexecute the RHS of the given alternative, and stores it in the field `k`.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.initK","kind":"def","line":114,"name":"Lean.Elab.Term.MatchExpr.initK","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L114-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">actual</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>","info":{"doc":"Removes alternatives that do not have any pattern variable left to be matched.\nFor the ones that still have pattern variables, remove the first one, and\nsave `actual` if the removed pattern variable is not a `_`.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.next","kind":"def","line":100,"name":"Lean.Elab.Term.MatchExpr.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L100-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getAltFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getAltFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>","info":{"doc":"Returns the first alternative whose function name is `funName` **and**\ndoes not have pattern variables left to match.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getAltFor?","kind":"def","line":93,"name":"Lean.Elab.Term.MatchExpr.getAltFor?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L93-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.shouldSaveActual\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">shouldSaveActual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if there is at least one alternative whose next pattern variable is not a `_`.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.shouldSaveActual","kind":"def","line":87,"name":"Lean.Elab.Term.MatchExpr.shouldSaveActual","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L87-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getFunNamesToMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getFunNamesToMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"Returns the function names of alternatives that do not have any pattern variable left.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getFunNamesToMatch","kind":"def","line":76,"name":"Lean.Elab.Term.MatchExpr.getFunNamesToMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L76-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toAlt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">toAlt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>","info":{"doc":"Converts syntax representing a `match_expr` alternative into an `Alt`.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toAlt?","kind":"def","line":61,"name":"Lean.Elab.Term.MatchExpr.toAlt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L61-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toElseAlt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">toElseAlt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a></span></div></div>","info":{"doc":"Converts syntax representing a `match_expr` else-alternative into an `ElseAlt`.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toElseAlt?","kind":"def","line":54,"name":"Lean.Elab.Term.MatchExpr.toElseAlt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L54-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">ElseAlt</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.rhs","kind":"def","line":50,"name":"Lean.Elab.Term.MatchExpr.ElseAlt.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">ElseAlt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.mk","kind":"ctor","line":49,"name":"Lean.Elab.Term.MatchExpr.ElseAlt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">ElseAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`match_expr` else-alternative. Recall that it has the following structure.\n```\n| _ => rhs\n```\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt","kind":"structure","line":43,"name":"Lean.Elab.Term.MatchExpr.ElseAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L43-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.actuals\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">actuals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"Actual value to be passed as an argument. ","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.actuals","kind":"def","line":41,"name":"Lean.Elab.Term.MatchExpr.Alt.actuals","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"Store the auxiliary continuation function for each right-hand-side. ","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.k","kind":"def","line":39,"name":"Lean.Elab.Term.MatchExpr.Alt.k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"right-hand-side for the alternative. ","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.rhs","kind":"def","line":37,"name":"Lean.Elab.Term.MatchExpr.Alt.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.pvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">pvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span></div></div>","info":{"doc":"Pattern variables. The list uses `none` for representing `_`, and `some a` for pattern variable `a`. ","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.pvars","kind":"def","line":35,"name":"Lean.Elab.Term.MatchExpr.Alt.pvars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.funName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">funName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"Function being matched. ","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.funName","kind":"def","line":33,"name":"Lean.Elab.Term.MatchExpr.Alt.funName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.var?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">var?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"`some c` if there is a variable binding to the function symbol being matched.\n`c` is the variable name.\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.var?","kind":"def","line":31,"name":"Lean.Elab.Term.MatchExpr.Alt.var?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">actuals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.mk","kind":"ctor","line":26,"name":"Lean.Elab.Term.MatchExpr.Alt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`match_expr` alternative. Recall that it has the following structure.\n```\n| (ident \"@\")? ident binderIdent* => rhs\n```\n\nExample:\n```\n| c@Eq _ a b => f c a b\n```\n","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt","kind":"structure","line":15,"name":"Lean.Elab.Term.MatchExpr.Alt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/MatchExpr.lean#L15-L41"}}],"imports":["Lean.Elab.Term"],"instances":[],"name":"Lean.Elab.MatchExpr"}