{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.normalizeFVarIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">normalizeFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.normalizeFVarIds","kind":"def","line":179,"name":"Lean.Compiler.LCNF.normalizeFVarIds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L179-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.cleanup\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">cleanup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"Create a fresh local context and internalize the given decls.\n","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.cleanup","kind":"def","line":170,"name":"Lean.Compiler.LCNF.cleanup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L170-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FVarSubst\">FVarSubst</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Decl.internalize","kind":"def","line":161,"name":"Lean.Compiler.LCNF.Decl.internalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L161-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Code.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.FVarSubst\">FVarSubst</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Refresh free variables ids in `code`, and store their declarations in the local context.\n","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Code.internalize","kind":"def","line":154,"name":"Lean.Compiler.LCNF.Code.internalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L154-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCodeDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeCodeDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCodeDecl","kind":"def","line":146,"name":"Lean.Compiler.LCNF.Internalize.internalizeCodeDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L146-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeCode","kind":"opaque","line":126,"name":"Lean.Compiler.LCNF.Internalize.internalizeCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L126-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeFunDecl","kind":"opaque","line":116,"name":"Lean.Compiler.LCNF.Internalize.internalizeFunDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L116-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeLetDecl","kind":"def","line":105,"name":"Lean.Compiler.LCNF.Internalize.internalizeLetDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L105-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeArgs","kind":"def","line":91,"name":"Lean.Compiler.LCNF.Internalize.internalizeArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L91-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeArg","kind":"def","line":81,"name":"Lean.Compiler.LCNF.Internalize.internalizeArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L81-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">internalizeParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.internalizeParam","kind":"def","line":73,"name":"Lean.Compiler.LCNF.Internalize.internalizeParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L73-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">instMonadFVarSubstStateInternalizeM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubstState\">MonadFVarSubstState</a> <a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","kind":"instance","line":35,"name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">instMonadFVarSubstInternalizeMTrue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.MonadFVarSubst\">MonadFVarSubst</a> <a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">InternalizeM</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"The `InternalizeM` monad is a translator. It \"translates\" the free variables\nin the input expressions and `Code`, into new fresh free variables in the\nlocal context.\n","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","kind":"instance","line":27,"name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L27-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Internalize</span>.<span class=\"name\">InternalizeM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM","kind":"def","line":25,"name":"Lean.Compiler.LCNF.Internalize.InternalizeM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Internalize.lean#L25-L25"}}],"imports":["Lean.Compiler.LCNF.Bind"],"instances":[{"className":"Lean.Compiler.LCNF.MonadFVarSubst","name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstInternalizeMTrue","typeNames":["Lean.Compiler.LCNF.Internalize.InternalizeM","Bool.true"]},{"className":"Lean.Compiler.LCNF.MonadFVarSubstState","name":"Lean.Compiler.LCNF.Internalize.instMonadFVarSubstStateInternalizeM","typeNames":["Lean.Compiler.LCNF.Internalize.InternalizeM"]}],"name":"Lean.Compiler.LCNF.Internalize"}