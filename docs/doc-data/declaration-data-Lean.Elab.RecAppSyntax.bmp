{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.hasRecAppSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">hasRecAppSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if `getRecAppSyntax? e` is a `some`.\n","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.hasRecAppSyntax","kind":"def","line":41,"name":"Lean.hasRecAppSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/RecAppSyntax.lean#L41-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.MData.isRecApp\"><span class=\"name\">Lean</span>.<span class=\"name\">MData</span>.<span class=\"name\">isRecApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Expr.html#Lean.MData\">MData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks if the `MData` is for a recursive application.\n","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.MData.isRecApp","kind":"def","line":35,"name":"Lean.MData.isRecApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/RecAppSyntax.lean#L35-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.getRecAppSyntax?\"><span class=\"name\">Lean</span>.<span class=\"name\">getRecAppSyntax?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Retrieve (if available) the syntax object attached to a recursive application.\n","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.getRecAppSyntax?","kind":"def","line":24,"name":"Lean.getRecAppSyntax?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/RecAppSyntax.lean#L24-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.mkRecAppWithSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">mkRecAppWithSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"We store the syntax at recursive applications to be able to generate better error messages\nwhen performing well-founded and structural recursion.\n","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.mkRecAppWithSyntax","kind":"def","line":17,"name":"Lean.mkRecAppWithSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/RecAppSyntax.lean#L17-L22"}}],"imports":["Lean.Expr"],"instances":[],"name":"Lean.Elab.RecAppSyntax"}