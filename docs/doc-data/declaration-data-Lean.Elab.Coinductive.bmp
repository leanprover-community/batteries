{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.elabCoinductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabCoinductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coinductiveElabData</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Main entry point for elaborating mutual coinductive predicates. This function is called after\ngenerating a flat inductive and adding it to the environment.\n\nWe look at corresponding existential form of the flat inductive (see `Meta.MkIffOfInductiveProp`),\nuse it to populate `PreDefinition`s that correspond to the predicates, and then we call\nthe `PartialFixpoint` machinery to register them as (co)inductive predicates.\n\nFinally, we generate constructors for each of the predicates, that correspond to the constructors\nthat were given by the user.\n","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.elabCoinductive","kind":"def","line":419,"name":"Lean.Elab.Command.elabCoinductive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L419-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.removeFunctorPostfixInCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeFunctorPostfixInCtor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.removeFunctorPostfixInCtor","kind":"def","line":122,"name":"Lean.Elab.Command.removeFunctorPostfixInCtor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L122-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.removeFunctorPostfix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeFunctorPostfix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.removeFunctorPostfix","kind":"def","line":120,"name":"Lean.Elab.Command.removeFunctorPostfix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.addFunctorPostfix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addFunctorPostfix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.addFunctorPostfix","kind":"def","line":118,"name":"Lean.Elab.Command.addFunctorPostfix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.instInhabitedCoinductiveElabData.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedCoinductiveElabData</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.instInhabitedCoinductiveElabData.default","kind":"def","line":115,"name":"Lean.Elab.Command.instInhabitedCoinductiveElabData.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.instInhabitedCoinductiveElabData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedCoinductiveElabData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.instInhabitedCoinductiveElabData","kind":"instance","line":115,"name":"Lean.Elab.Command.instInhabitedCoinductiveElabData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.isGreatest\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">isGreatest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The flag that is `true` if the predicate was defined via `coinductive` keyword and `false`\notherwise. When we elaborate a mutual definition, we allow mixing `coinductive` and `inductive`\nkeywords, and hence we need to record this information.\n","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.isGreatest","kind":"def","line":114,"name":"Lean.Elab.Command.CoinductiveElabData.isGreatest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.ctorSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">ctorSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Constructor refs from the original `InductiveView`","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.ctorSyntax","kind":"def","line":109,"name":"Lean.Elab.Command.CoinductiveElabData.ctorSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>","info":{"doc":"Modifiers from the original `InductiveView`","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.modifiers","kind":"def","line":107,"name":"Lean.Elab.Command.CoinductiveElabData.modifiers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Ref from the original `InductiveView`","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.ref","kind":"def","line":105,"name":"Lean.Elab.Command.CoinductiveElabData.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Declaration name of the predicate","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.declName","kind":"def","line":103,"name":"Lean.Elab.Command.CoinductiveElabData.declName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.declId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">declId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Declaration Id from the original `InductiveView` ","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.declId","kind":"def","line":101,"name":"Lean.Elab.Command.CoinductiveElabData.declId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorSyntax</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isGreatest</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\">CoinductiveElabData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData.mk","kind":"ctor","line":99,"name":"Lean.Elab.Command.CoinductiveElabData.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CoinductiveElabData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"This structure contains the data carried in `InductiveElabStep1` that are solely used in\nmutual coinductive predicate elaboration. ","docLink":"./Lean/Elab/Coinductive.html#Lean.Elab.Command.CoinductiveElabData","kind":"structure","line":97,"name":"Lean.Elab.Command.CoinductiveElabData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Coinductive.lean#L97-L115"}}],"imports":["Lean.Elab.PreDefinition.PartialFixpoint","Lean.Elab.Tactic.Rewrite","Lean.Meta.Tactic.Simp","Lean.Linter.UnusedVariables"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Command.instInhabitedCoinductiveElabData","typeNames":["Lean.Elab.Command.CoinductiveElabData"]}],"name":"Lean.Elab.Coinductive"}