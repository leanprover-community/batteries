{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instOrderedAddQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instOrderedAddQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instOrderedAddQ","kind":"instance","line":365,"name":"Lean.Grind.IntModule.OfNatModule.instOrderedAddQ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L365-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_lt","kind":"theorem","line":361,"name":"Lean.Grind.IntModule.OfNatModule.toQ_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L361-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_le","kind":"theorem","line":357,"name":"Lean.Grind.IntModule.OfNatModule.toQ_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L357-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsLinearOrderQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instIsLinearOrderQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearOrder\">Std.IsLinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearOrder\">Std.IsLinearOrder</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsLinearOrderQ","kind":"instance","line":342,"name":"Lean.Grind.IntModule.OfNatModule.instIsLinearOrderQ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L342-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsLinearPreorderQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instIsLinearPreorderQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearPreorder\">Std.IsLinearPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearPreorder\">Std.IsLinearPreorder</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsLinearPreorderQ","kind":"instance","line":333,"name":"Lean.Grind.IntModule.OfNatModule.instIsLinearPreorderQ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L333-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsPartialOrderQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instIsPartialOrderQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPartialOrder\">Std.IsPartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPartialOrder\">Std.IsPartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsPartialOrderQ","kind":"instance","line":321,"name":"Lean.Grind.IntModule.OfNatModule.instIsPartialOrderQ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L321-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsPreorderQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instIsPreorderQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instIsPreorderQ","kind":"instance","line":302,"name":"Lean.Grind.IntModule.OfNatModule.instIsPreorderQ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L302-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.mk_le_mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">Q.mk</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">a₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">Q.mk</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">b₁</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b₂</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.mk_le_mk","kind":"theorem","line":298,"name":"Lean.Grind.IntModule.OfNatModule.mk_le_mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L298-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instLTQOfOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instLTQOfOrderedAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instLTQOfOrderedAdd","kind":"instance","line":295,"name":"Lean.Grind.IntModule.OfNatModule.instLTQOfOrderedAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L295-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instLEQOfOrderedAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Module.html#Lean.Grind.OrderedAdd\">OrderedAdd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd","kind":"instance","line":279,"name":"Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L279-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instNoNatZeroDivisorsQOfAddRightCancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel","kind":"instance","line":265,"name":"Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L265-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_inj","kind":"theorem","line":258,"name":"Lean.Grind.IntModule.OfNatModule.toQ_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L258-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">mk</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">mk</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.exact","kind":"theorem","line":253,"name":"Lean.Grind.IntModule.OfNatModule.Q.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L253-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_smul","kind":"theorem","line":230,"name":"Lean.Grind.IntModule.OfNatModule.toQ_smul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L230-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_zero","kind":"theorem","line":227,"name":"Lean.Grind.IntModule.OfNatModule.toQ_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L227-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\">toQ</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ_add","kind":"theorem","line":224,"name":"Lean.Grind.IntModule.OfNatModule.toQ_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L224-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">toQ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.toQ","kind":"def","line":219,"name":"Lean.Grind.IntModule.OfNatModule.toQ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L219-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.ofNatModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">ofNatModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.IntModule\">IntModule</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.ofNatModule","kind":"instance","line":206,"name":"Lean.Grind.IntModule.OfNatModule.ofNatModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L206-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_natCast_eq_nsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zsmul_natCast_eq_nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.nsmul\">nsmul</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul_natCast_eq_nsmul","kind":"theorem","line":202,"name":"Lean.Grind.IntModule.OfNatModule.zsmul_natCast_eq_nsmul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L202-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zsmul","kind":"theorem","line":159,"name":"Lean.Grind.IntModule.OfNatModule.add_zsmul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L159-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zero_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">0</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero_zsmul","kind":"theorem","line":155,"name":"Lean.Grind.IntModule.OfNatModule.zero_zsmul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L155-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.one_zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">one_zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\">zsmul</a> <span class=\"fn\">1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.one_zsmul","kind":"theorem","line":151,"name":"Lean.Grind.IntModule.OfNatModule.one_zsmul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L151-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub\">sub</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg\">neg</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub_eq_add_neg","kind":"theorem","line":146,"name":"Lean.Grind.IntModule.OfNatModule.sub_eq_add_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L146-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_assoc","kind":"theorem","line":140,"name":"Lean.Grind.IntModule.OfNatModule.add_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L140-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_zero","kind":"theorem","line":136,"name":"Lean.Grind.IntModule.OfNatModule.add_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L136-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add_comm","kind":"theorem","line":131,"name":"Lean.Grind.IntModule.OfNatModule.add_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L131-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg_add_cancel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">neg_add_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\">add</a> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg\">neg</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\">zero</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg_add_cancel","kind":"theorem","line":126,"name":"Lean.Grind.IntModule.OfNatModule.neg_add_cancel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L126-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zero","kind":"def","line":123,"name":"Lean.Grind.IntModule.OfNatModule.zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L123-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.neg","kind":"def","line":113,"name":"Lean.Grind.IntModule.OfNatModule.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L113-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.add","kind":"def","line":104,"name":"Lean.Grind.IntModule.OfNatModule.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L104-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.sub","kind":"def","line":95,"name":"Lean.Grind.IntModule.OfNatModule.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L95-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">zsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.zsmul","kind":"def","line":81,"name":"Lean.Grind.IntModule.OfNatModule.zsmul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L81-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.nsmul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">nsmul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.nsmul","kind":"def","line":73,"name":"Lean.Grind.IntModule.OfNatModule.nsmul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L73-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.ind\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\">mk</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.ind","kind":"def","line":70,"name":"Lean.Grind.IntModule.OfNatModule.Q.ind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L70-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.liftOn₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">liftOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q₁ </span><span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ {<span class=\"fn\">a₁ </span><span class=\"fn\">b₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₂</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b₁</span> <span class=\"fn\">b₂</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₁</span> <span class=\"fn\">b₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a₂</span> <span class=\"fn\">b₂</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.liftOn₂","kind":"def","line":58,"name":"Lean.Grind.IntModule.OfNatModule.Q.liftOn₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L58-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\">Q</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q.mk","kind":"def","line":55,"name":"Lean.Grind.IntModule.OfNatModule.Q.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_trans\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_trans","kind":"theorem","line":44,"name":"Lean.Grind.IntModule.OfNatModule.r_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L44-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_sym\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r_sym</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">b</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_sym","kind":"theorem","line":41,"name":"Lean.Grind.IntModule.OfNatModule.r_sym","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_rfl\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\">r</a> <span class=\"fn\">α</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r_rfl","kind":"theorem","line":38,"name":"Lean.Grind.IntModule.OfNatModule.r_rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L38-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">Q</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.Q","kind":"def","line":34,"name":"Lean.Grind.IntModule.OfNatModule.Q","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">r</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.r","kind":"def","line":31,"name":"Lean.Grind.IntModule.OfNatModule.r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instCommutativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instCommutativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instCommutativeHAdd","kind":"theorem","line":26,"name":"Lean.Grind.IntModule.OfNatModule.instCommutativeHAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instAssociativeHAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntModule</span>.<span class=\"name\">OfNatModule</span>.<span class=\"name\">instAssociativeHAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/Envelope.html#Lean.Grind.IntModule.OfNatModule.instAssociativeHAdd","kind":"theorem","line":24,"name":"Lean.Grind.IntModule.OfNatModule.instAssociativeHAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/Envelope.lean#L24-L25"}}],"imports":["Init.Grind.Ordered.Module","Init.Data.AC","Init.Data.AC"],"instances":[{"className":"Lean.Grind.IntModule","name":"Lean.Grind.IntModule.OfNatModule.ofNatModule","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"Lean.Grind.NoNatZeroDivisors","name":"Lean.Grind.IntModule.OfNatModule.instNoNatZeroDivisorsQOfAddRightCancel","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"LE","name":"Lean.Grind.IntModule.OfNatModule.instLEQOfOrderedAdd","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"LT","name":"Lean.Grind.IntModule.OfNatModule.instLTQOfOrderedAdd","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"Std.IsPreorder","name":"Lean.Grind.IntModule.OfNatModule.instIsPreorderQ","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"Std.IsPartialOrder","name":"Lean.Grind.IntModule.OfNatModule.instIsPartialOrderQ","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"Std.IsLinearPreorder","name":"Lean.Grind.IntModule.OfNatModule.instIsLinearPreorderQ","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"Std.IsLinearOrder","name":"Lean.Grind.IntModule.OfNatModule.instIsLinearOrderQ","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]},{"className":"Lean.Grind.OrderedAdd","name":"Lean.Grind.IntModule.OfNatModule.instOrderedAddQ","typeNames":["Lean.Grind.IntModule.OfNatModule.Q"]}],"name":"Init.Grind.Module.Envelope"}