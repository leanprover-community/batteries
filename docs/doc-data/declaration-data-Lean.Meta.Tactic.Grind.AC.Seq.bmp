{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.endsWithVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">endsWithVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.endsWithVar","kind":"def","line":326,"name":"Lean.Grind.AC.Seq.endsWithVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L326-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.lastVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">lastVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.lastVar","kind":"def","line":321,"name":"Lean.Grind.AC.Seq.lastVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L321-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.startsWithVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">startsWithVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.startsWithVar","kind":"def","line":316,"name":"Lean.Grind.AC.Seq.startsWithVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L316-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.firstVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">firstVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.firstVar","kind":"def","line":311,"name":"Lean.Grind.AC.Seq.firstVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L311-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superpose?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">superpose?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></div></div>","info":{"doc":"Returns `some (p, c, s)` if `s₁ == p ++ c` and `s₂ == c ++ s`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superpose?","kind":"def","line":295,"name":"Lean.Grind.AC.Seq.superpose?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L295-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superposeAC?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">superposeAC?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></div></div>","info":{"doc":"Returns `some (r₁, c, r₂)` if `s₁ == r₁.union c` and `s₂ == r₂.union c`\n\nIt assumes `s₁` and `s₂` are sorted\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superposeAC?","kind":"def","line":264,"name":"Lean.Grind.AC.Seq.superposeAC?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L264-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.toSeq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">toSeq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.toSeq?","kind":"def","line":241,"name":"Lean.Grind.AC.toSeq?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L241-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.sharesVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sharesVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `s₁` and `s₂` have at least one variable in common.\nThe function assumes both of them are sorted.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.sharesVar","kind":"def","line":221,"name":"Lean.Grind.AC.Seq.sharesVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L221-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.noAdjacentDuplicates\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">noAdjacentDuplicates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.noAdjacentDuplicates","kind":"def","line":207,"name":"Lean.Grind.AC.Seq.noAdjacentDuplicates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L207-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.contains","kind":"def","line":202,"name":"Lean.Grind.AC.Seq.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L202-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isSorted\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">isSorted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isSorted","kind":"def","line":192,"name":"Lean.Grind.AC.Seq.isSorted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L192-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subset\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁.subset s₂` checks whether `s₁` is a subset of `s₂`.\nIt assumes `s₁` and `s₂` are sorted.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subset","kind":"def","line":149,"name":"Lean.Grind.AC.Seq.subset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L149-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.strict\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span>.<span class=\"name\">strict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁.union s == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.strict","kind":"ctor","line":146,"name":"Lean.Grind.AC.SubsetResult.strict","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L146-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁ == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.exact","kind":"ctor","line":144,"name":"Lean.Grind.AC.SubsetResult.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span>.<span class=\"name\">false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁` is not a subset of `s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.false","kind":"ctor","line":142,"name":"Lean.Grind.AC.SubsetResult.false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L142-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for `s₁.subset s₂`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult","kind":"inductive","line":138,"name":"Lean.Grind.AC.SubsetResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L138-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">subseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁.subseq s₂` checks whether `s₁` is a subsequence of `s₂`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subseq","kind":"def","line":107,"name":"Lean.Grind.AC.Seq.subseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L107-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">middle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`p ++ s₁ ++ s == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.middle","kind":"ctor","line":104,"name":"Lean.Grind.AC.SubseqResult.middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L104-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s ++ s₁ == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.suffix","kind":"ctor","line":102,"name":"Lean.Grind.AC.SubseqResult.suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">prefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁ ++ s == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.prefix","kind":"ctor","line":100,"name":"Lean.Grind.AC.SubseqResult.prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L100-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁ == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.exact","kind":"ctor","line":98,"name":"Lean.Grind.AC.SubseqResult.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L98-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁` is not a subsequence of `s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.false","kind":"ctor","line":96,"name":"Lean.Grind.AC.SubseqResult.false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L96-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for `s₁.subseq s₂`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult","kind":"inductive","line":92,"name":"Lean.Grind.AC.SubseqResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L92-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOfNatSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instOfNatSeq_lean</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOfNatSeq_lean","kind":"def","line":78,"name":"Lean.Grind.AC.instOfNatSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instAppendSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instAppendSeq_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instAppendSeq_lean","kind":"instance","line":52,"name":"Lean.Grind.AC.instAppendSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOrdSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instOrdSeq_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOrdSeq_lean","kind":"instance","line":49,"name":"Lean.Grind.AC.instOrdSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.compare\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">compare</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.compare","kind":"def","line":32,"name":"Lean.Grind.AC.Seq.compare","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L32-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.reverse\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"Reverses the sequence ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.reverse","kind":"def","line":22,"name":"Lean.Grind.AC.Seq.reverse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L22-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">isVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `s` is a variable. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isVar","kind":"def","line":17,"name":"Lean.Grind.AC.Seq.isVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L17-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.length\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.length","kind":"def","line":13,"name":"Lean.Grind.AC.Seq.length","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L13-L15"}}],"imports":["Init.Grind.AC","Init.Data.Ord"],"instances":[{"className":"Ord","name":"Lean.Grind.AC.instOrdSeq_lean","typeNames":["Lean.Grind.AC.Seq"]},{"className":"Append","name":"Lean.Grind.AC.instAppendSeq_lean","typeNames":["Lean.Grind.AC.Seq"]}],"name":"Lean.Meta.Tactic.Grind.AC.Seq"}