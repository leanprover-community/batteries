{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Parser.Tactic.tryResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tryResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Helper internal tactic used to implement `evalSuggest` in `try?` ","docLink":"./Init/Try.html#Lean.Parser.Tactic.tryResult","kind":"def","line":56,"name":"Lean.Parser.Tactic.tryResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L56-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Parser.Tactic.attemptAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">attemptAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Helper internal tactic for implementing the tactic `try?`. ","docLink":"./Init/Try.html#Lean.Parser.Tactic.attemptAll","kind":"def","line":53,"name":"Lean.Parser.Tactic.attemptAll","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Parser.Tactic.tryTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tryTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Try.html#Lean.Parser.Tactic.tryTrace","kind":"def","line":51,"name":"Lean.Parser.Tactic.tryTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/Try.html#Lean.Try.instInhabitedConfig","kind":"instance","line":45,"name":"Lean.Try.instInhabitedConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.instInhabitedConfig.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Try.html#Lean.Try.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Try.html#Lean.Try.instInhabitedConfig.default","kind":"def","line":45,"name":"Lean.Try.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `merge` is `true`, it tries to compress suggestions such as\n```\ninduction a\n· grind only [= f]\n· grind only [→ g]\n```\nas\n```\ninduction a <;> grind only [= f, → g]\n```\n","docLink":"./Init/Try.html#Lean.Try.Config.merge","kind":"def","line":44,"name":"Lean.Try.Config.merge","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.harder\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">harder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `harder` is `true`, more expensive tactics and operations are tried. ","docLink":"./Init/Try.html#Lean.Try.Config.harder","kind":"def","line":31,"name":"Lean.Try.Config.harder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.only\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">only</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `only` is `true`, generates solutions using `grind only` and `simp only`. ","docLink":"./Init/Try.html#Lean.Try.Config.only","kind":"def","line":29,"name":"Lean.Try.Config.only","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.missing\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">missing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `missing` is `true`, allows the construction of partial solutions where some of the subgoals are `sorry`. ","docLink":"./Init/Try.html#Lean.Try.Config.missing","kind":"def","line":27,"name":"Lean.Try.Config.missing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.max\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">max</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of suggestions. ","docLink":"./Init/Try.html#Lean.Try.Config.max","kind":"def","line":25,"name":"Lean.Try.Config.max","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.targetOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">targetOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `targetOnly` is `true`, `try?` collects information using the goal target only. ","docLink":"./Init/Try.html#Lean.Try.Config.targetOnly","kind":"def","line":23,"name":"Lean.Try.Config.targetOnly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `name` is `true`, all functions in the same namespace are considered for function induction, unfolding, etc. ","docLink":"./Init/Try.html#Lean.Try.Config.name","kind":"def","line":21,"name":"Lean.Try.Config.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `main` is `true`, all functions in the current module are considered for function induction, unfolding, etc. ","docLink":"./Init/Try.html#Lean.Try.Config.main","kind":"def","line":19,"name":"Lean.Try.Config.main","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">main </span><span class=\"fn\">name </span><span class=\"fn\">targetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">missing </span><span class=\"fn\">only </span><span class=\"fn\">harder </span><span class=\"fn\">merge</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Try.html#Lean.Try.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Try.html#Lean.Try.Config.mk","kind":"ctor","line":17,"name":"Lean.Try.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for `try?`.\n","docLink":"./Init/Try.html#Lean.Try.Config","kind":"structure","line":14,"name":"Lean.Try.Config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Try.lean#L14-L45"}}],"imports":["Init.Tactics"],"instances":[{"className":"Inhabited","name":"Lean.Try.instInhabitedConfig","typeNames":["Lean.Try.Config"]}],"name":"Init.Try"}