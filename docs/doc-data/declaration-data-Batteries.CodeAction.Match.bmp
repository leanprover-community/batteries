{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Match.html#Batteries.CodeAction.matchExpand\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">matchExpand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.CommandCodeAction\">Lean.CodeAction.CommandCodeAction</a></div></div>","info":{"doc":"Invoking tactic code action \"Generate a list of alternatives for this match.\" in the\nfollowing:\n```lean\ndef myfun2 (n : Nat) : Nat :=\n  match n\n```\nproduces:\n```lean\ndef myfun2 (n : Nat) : Nat :=\n  match n with\n  | 0 => _\n  | n + 1 => _\n```\nAlso has support for multiple discriminants, e.g.\n```\ndef myfun3 (o : Option Bool) (m : Nat) : Nat :=\n  match o, m with\n```\ncan be expanded into\n```\ndef myfun3 (o : Option Bool) (m : Nat) : Nat :=\n  match o, m with\n  | none, 0 => _\n  | none, n_2 + 1 => _\n  | some val_1, 0 => _\n  | some val_1, n_2 + 1 => _\n```\n","docLink":"./Batteries/CodeAction/Match.html#Batteries.CodeAction.matchExpand","kind":"def","line":85,"name":"Batteries.CodeAction.matchExpand","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Match.lean#L85-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Match.html#Batteries.CodeAction.pattern_from_constructor\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">pattern_from_constructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctor</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"From a constructor-name e.g. 'Option.some' construct the corresponding match pattern, e.g.\n'.some val'. We implement special cases for Nat and List, Option and Bool to e.g.\nproduce 'n + 1' instead of 'Nat.succ n'.\n","docLink":"./Batteries/CodeAction/Match.html#Batteries.CodeAction.pattern_from_constructor","kind":"def","line":52,"name":"Batteries.CodeAction.pattern_from_constructor","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Match.lean#L52-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Match.html#Batteries.CodeAction.findAllInfos.loop\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findAllInfos</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span></div></div>","info":{"doc":"Inner loop for `findAllInfos`. ","docLink":"./Batteries/CodeAction/Match.html#Batteries.CodeAction.findAllInfos.loop","kind":"opaque","line":44,"name":"Batteries.CodeAction.findAllInfos.loop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Match.lean#L44-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Match.html#Batteries.CodeAction.findAllInfos\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findAllInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span></div></div>","info":{"doc":"Flattens an Infotree into an array of Info-nodes that fulfill p. ","docLink":"./Batteries/CodeAction/Match.html#Batteries.CodeAction.findAllInfos","kind":"def","line":39,"name":"Batteries.CodeAction.findAllInfos","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Match.lean#L39-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Match.html#Batteries.CodeAction.getMatchHeaderRange?\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">getMatchHeaderRange?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>","info":{"doc":"Returns the String.range that encompasses `match e (with)`. ","docLink":"./Batteries/CodeAction/Match.html#Batteries.CodeAction.getMatchHeaderRange?","kind":"def","line":18,"name":"Batteries.CodeAction.getMatchHeaderRange?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Match.lean#L18-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Match.html#Batteries.CodeAction.isMatchTerm\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">isMatchTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Filter for the info-nodes to find the match-nodes. ","docLink":"./Batteries/CodeAction/Match.html#Batteries.CodeAction.isMatchTerm","kind":"def","line":13,"name":"Batteries.CodeAction.isMatchTerm","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Match.lean#L13-L16"}}],"imports":["Init","Batteries.CodeAction.Misc","Batteries.Data.List"],"instances":[],"name":"Batteries.CodeAction.Match"}