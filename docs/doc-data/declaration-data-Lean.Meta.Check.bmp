{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.isTypeCorrect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isTypeCorrect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return true if `e` is type correct.\n","docLink":"./Lean/Meta/Check.html#Lean.Meta.isTypeCorrect","kind":"def","line":339,"name":"Lean.Meta.isTypeCorrect","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L339-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Throw an exception if `e` is not type correct.\n","docLink":"./Lean/Meta/Check.html#Lean.Meta.check","kind":"def","line":327,"name":"Lean.Meta.check","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L327-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.checkProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">checkProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Check.html#Lean.Meta.checkProj","kind":"def","line":281,"name":"Lean.Meta.checkProj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L281-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.checkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">checkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Check.html#Lean.Meta.checkApp","kind":"def","line":271,"name":"Lean.Meta.checkApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L271-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.throwAppTypeMismatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwAppTypeMismatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Check.html#Lean.Meta.throwAppTypeMismatch","kind":"def","line":249,"name":"Lean.Meta.throwAppTypeMismatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L249-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.mkHasTypeButIsExpectedMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHasTypeButIsExpectedMsg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailing?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trailingExprs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Return error message \"has type{givenType}\\nbut is expected to have type{expectedType}\"\nAdds the type’s types unless they are defeq.\n\nIf `trailing?` is non-`none`, it is appended to the end of the message. This requires modifying the\nproduced message, so prefer specifying `trailing?` over appending a message to the result of this\nfunction. Any expressions appearing in the trailing message should be included in `trailingExprs`.\n","docLink":"./Lean/Meta/Check.html#Lean.Meta.mkHasTypeButIsExpectedMsg","kind":"def","line":215,"name":"Lean.Meta.mkHasTypeButIsExpectedMsg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L215-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.mkUnfoldAxiomsNote\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkUnfoldAxiomsNote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Adds note about definitions not unfolded because of the module system, if any. ","docLink":"./Lean/Meta/Check.html#Lean.Meta.mkUnfoldAxiomsNote","kind":"def","line":197,"name":"Lean.Meta.mkUnfoldAxiomsNote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L197-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.throwLetTypeMismatchMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwLetTypeMismatchMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Check.html#Lean.Meta.throwLetTypeMismatchMessage","kind":"def","line":187,"name":"Lean.Meta.throwLetTypeMismatchMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L187-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">addPPExplicitToExposeDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Given two expressions `a` and `b`, this method tries to annotate terms with `pp.explicit := true`\nand other `pp` options to expose \"implicit\" differences.\nFor example, suppose `a` and `b` are of the form\n```lean\n@HashMap Nat Nat eqInst hasInst1\n@HashMap Nat Nat eqInst hasInst2\n```\nBy default, the pretty printer formats both of them as `HashMap Nat Nat`.\nSo, counterintuitive error messages such as\n```lean\nerror: application type mismatch\n  HashMap.insert m\nargument\n  m\nhas type\n  HashMap Nat Nat\nbut is expected to have type\n  HashMap Nat Nat\n```\nwould be produced.\nBy adding `pp.explicit := true`, we can generate the more informative error\n```lean\nerror: application type mismatch\n  HashMap.insert m\nargument\n  m\nhas type\n  @HashMap Nat Nat eqInst hasInst1\nbut is expected to have type\n  @HashMap Nat Nat eqInst hasInst2\n```\n\nRemark: this method implements simple heuristics; we should extend it as we find other counterintuitive\nerror messages.\n","docLink":"./Lean/Meta/Check.html#Lean.Meta.addPPExplicitToExposeDiff","kind":"def","line":36,"name":"Lean.Meta.addPPExplicitToExposeDiff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Check.lean#L36-L185"}}],"imports":["Lean.Meta.Sorry","Lean.AddDecl"],"instances":[],"name":"Lean.Meta.Check"}