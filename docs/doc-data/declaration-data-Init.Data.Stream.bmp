{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#ToStream.toStream\"><span class=\"name\">ToStream</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">collection</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">Std.ToStream</a> <span class=\"fn\">collection</span> <span class=\"fn\">stream</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">collection</span> → <span class=\"fn\">stream</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#ToStream.toStream","kind":"def","line":131,"name":"ToStream.toStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L131-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#ToStream\"><span class=\"name\">ToStream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collection</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#ToStream","kind":"def","line":127,"name":"ToStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L127-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Stream.next?\"><span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">stream</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Std.Stream</a> <span class=\"fn\">stream</span> <span class=\"fn\">value</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">stream</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">value</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">stream</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Stream.next?","kind":"def","line":124,"name":"Stream.next?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L124-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Stream\"><span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u_2)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Stream","kind":"def","line":120,"name":"Stream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L120-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instStreamRangeNat\"><span class=\"name\">Std</span>.<span class=\"name\">instStreamRangeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instStreamRangeNat","kind":"instance","line":111,"name":"Std.instStreamRangeNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L111-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instStreamSubarray\"><span class=\"name\">Std</span>.<span class=\"name\">instStreamSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instStreamSubarray","kind":"instance","line":102,"name":"Std.instStreamSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L102-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instStreamList\"><span class=\"name\">Std</span>.<span class=\"name\">instStreamList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instStreamList","kind":"instance","line":97,"name":"Std.instStreamList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L97-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instStreamProd\"><span class=\"name\">Std</span>.<span class=\"name\">instStreamProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">γ</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> (<span class=\"fn\">ρ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span>) (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instStreamProd","kind":"instance","line":88,"name":"Std.instStreamProd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L88-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instToStreamRange\"><span class=\"name\">Std</span>.<span class=\"name\">instToStreamRange</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a> <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instToStreamRange","kind":"instance","line":85,"name":"Std.instToStreamRange","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instToStreamStringSubstring\"><span class=\"name\">Std</span>.<span class=\"name\">instToStreamStringSubstring</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instToStreamStringSubstring","kind":"instance","line":82,"name":"Std.instToStreamStringSubstring","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instToStreamSubarray\"><span class=\"name\">Std</span>.<span class=\"name\">instToStreamSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instToStreamSubarray","kind":"instance","line":79,"name":"Std.instToStreamSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L79-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instToStreamArraySubarray\"><span class=\"name\">Std</span>.<span class=\"name\">instToStreamArraySubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instToStreamArraySubarray","kind":"instance","line":75,"name":"Std.instToStreamArraySubarray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instToStreamList\"><span class=\"name\">Std</span>.<span class=\"name\">instToStreamList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instToStreamList","kind":"instance","line":72,"name":"Std.instToStreamList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.instForInOfStream\"><span class=\"name\">Std</span>.<span class=\"name\">instForInOfStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.instForInOfStream","kind":"instance","line":69,"name":"Std.instForInOfStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.Stream.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.Stream.forIn","kind":"def","line":59,"name":"Std.Stream.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L59-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.Stream.next?\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">stream</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">stream</span> <span class=\"fn\">value</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">stream</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">value</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">stream</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.Stream.next?","kind":"def","line":57,"name":"Std.Stream.next?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.Stream.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">stream</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next?</span> : <span class=\"fn\"><span class=\"fn\">stream</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">value</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">stream</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">stream</span> <span class=\"fn\">value</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.Stream.mk","kind":"ctor","line":56,"name":"Std.Stream.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.Stream\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.Stream","kind":"class","line":56,"name":"Std.Stream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L56-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.ToStream.toStream\"><span class=\"name\">Std</span>.<span class=\"name\">ToStream</span>.<span class=\"name\">toStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">collection</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <span class=\"fn\">collection</span> <span class=\"fn\">stream</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">collection</span> → <span class=\"fn\">stream</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.ToStream.toStream","kind":"def","line":52,"name":"Std.ToStream.toStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.ToStream.mk\"><span class=\"name\">Std</span>.<span class=\"name\">ToStream</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">collection</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toStream</span> : <span class=\"fn\"><span class=\"fn\">collection</span> → <span class=\"fn\">stream</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream\">ToStream</a> <span class=\"fn\">collection</span> <span class=\"fn\">stream</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Stream.html#Std.ToStream.mk","kind":"ctor","line":51,"name":"Std.ToStream.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Stream.html#Std.ToStream\"><span class=\"name\">Std</span>.<span class=\"name\">ToStream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collection</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Streams are used to implement parallel `for` statements.\nExample:\n```\nfor x in xs, y in ys do\n  ...\n```\nis expanded into\n```\nlet mut s := toStream ys\nfor x in xs do\n  match Stream.next? s with\n  | none => break\n  | some (y, s') =>\n    s := s'\n    ...\n```\n","docLink":"./Init/Data/Stream.html#Std.ToStream","kind":"class","line":33,"name":"Std.ToStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Stream.lean#L33-L52"}}],"imports":["Init.Data.Range","Init.Data.Array.Subarray","Init.Data.Slice.Array.Basic"],"instances":[{"className":"ForIn","name":"Std.instForInOfStream","typeNames":[]},{"className":"Std.ToStream","name":"Std.instToStreamList","typeNames":["List","List"]},{"className":"Std.ToStream","name":"Std.instToStreamArraySubarray","typeNames":["Array","Subarray"]},{"className":"Std.ToStream","name":"Std.instToStreamSubarray","typeNames":["Subarray","Subarray"]},{"className":"Std.ToStream","name":"Std.instToStreamStringSubstring","typeNames":["String","Substring"]},{"className":"Std.ToStream","name":"Std.instToStreamRange","typeNames":["Std.Range","Std.Range"]},{"className":"Std.Stream","name":"Std.instStreamProd","typeNames":["Prod","Prod"]},{"className":"Std.Stream","name":"Std.instStreamList","typeNames":["List"]},{"className":"Std.Stream","name":"Std.instStreamSubarray","typeNames":["Subarray"]},{"className":"Std.Stream","name":"Std.instStreamRangeNat","typeNames":["Std.Range","Nat"]}],"name":"Init.Data.Stream"}