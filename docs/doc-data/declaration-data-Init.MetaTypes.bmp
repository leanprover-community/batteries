{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toExtractLetsConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">LiftLetsConfig</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk","kind":"ctor","line":374,"name":"Lean.Meta.LiftLetsConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L374-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.toExtractLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">toExtractLetsConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">LiftLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.toExtractLetsConfig","kind":"def","line":374,"name":"Lean.Meta.LiftLetsConfig.toExtractLetsConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L374-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LiftLetsConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">Lean.Meta.ExtractLetsConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for the `lift_lets` tactic.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig","kind":"structure","line":371,"name":"Lean.Meta.LiftLetsConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L371-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.lift\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">lift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), lift non-extractable `let`s as far out as possible. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.lift","kind":"def","line":369,"name":"Lean.Meta.ExtractLetsConfig.lift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L369-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.preserveBinderNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">preserveBinderNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), then when no name is provided for a 'let' expression, the name is used as-is without making it be inaccessible.\nThe name still might be inaccessible if the binder name was. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.preserveBinderNames","kind":"def","line":367,"name":"Lean.Meta.ExtractLetsConfig.preserveBinderNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L367-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.onlyGivenNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">onlyGivenNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), then once `givenNames` is exhausted, stop extracting lets. Otherwise continue extracting lets. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.onlyGivenNames","kind":"def","line":364,"name":"Lean.Meta.ExtractLetsConfig.onlyGivenNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L364-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.useContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">useContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When merging is enabled, if true (default: true), make use of pre-existing local definitions in the local context. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.useContext","kind":"def","line":362,"name":"Lean.Meta.ExtractLetsConfig.useContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L362-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: true), reuse local declarations that have syntactically equal values.\nNote that even when false, the caching strategy for `extract_let`s may result in fewer extracted let bindings than expected. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.merge","kind":"def","line":360,"name":"Lean.Meta.ExtractLetsConfig.merge","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L360-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.usedOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">usedOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), eliminate unused lets rather than extract them. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.usedOnly","kind":"def","line":357,"name":"Lean.Meta.ExtractLetsConfig.usedOnly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L357-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.underBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">underBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: true), descend into forall/lambda/let bodies when extracting. Only relevant when `descend` is true. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.underBinder","kind":"def","line":355,"name":"Lean.Meta.ExtractLetsConfig.underBinder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L355-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.descend\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">descend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If false (default: true), extracts only top-level lets, otherwise allows descending into subterms.\nWhen false, `proofs` and `types` are ignored, and lets appearing in the types or values of the\ntop-level lets are not themselves extracted. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.descend","kind":"def","line":353,"name":"Lean.Meta.ExtractLetsConfig.descend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L353-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.implicits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">implicits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), extract lets from subterms that are implicit arguments. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.implicits","kind":"def","line":349,"name":"Lean.Meta.ExtractLetsConfig.implicits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L349-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.types\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">types</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: true), extract lets from subterms that are types.\nTop-level lets are always extracted. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.types","kind":"def","line":347,"name":"Lean.Meta.ExtractLetsConfig.types","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L347-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), extract lets from subterms that are proofs.\nTop-level lets are always extracted. ","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.proofs","kind":"def","line":344,"name":"Lean.Meta.ExtractLetsConfig.proofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L344-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proofs </span><span class=\"fn\">types </span><span class=\"fn\">implicits </span><span class=\"fn\">descend </span><span class=\"fn\">underBinder </span><span class=\"fn\">usedOnly </span><span class=\"fn\">merge </span><span class=\"fn\">useContext </span><span class=\"fn\">onlyGivenNames </span><span class=\"fn\">preserveBinderNames </span><span class=\"fn\">lift</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk","kind":"ctor","line":341,"name":"Lean.Meta.ExtractLetsConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L341-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for the `extract_lets` tactic.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig","kind":"structure","line":338,"name":"Lean.Meta.ExtractLetsConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L338-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instCoeListNatOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences","kind":"instance","line":336,"name":"Lean.Meta.instCoeListNatOccurrences","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L336-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqOccurrences</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a> → <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences.beq","kind":"def","line":334,"name":"Lean.Meta.instBEqOccurrences.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L334-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences","kind":"instance","line":334,"name":"Lean.Meta.instBEqOccurrences","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L334-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences","kind":"instance","line":334,"name":"Lean.Meta.instInhabitedOccurrences","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L334-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedOccurrences</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences.default","kind":"def","line":334,"name":"Lean.Meta.instInhabitedOccurrences.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L334-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>","info":{"doc":"A list of indices for which occurrences should not be rewritten. ","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg","kind":"ctor","line":332,"name":"Lean.Meta.Occurrences.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L332-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>","info":{"doc":"A list of indices for which occurrences should be rewritten. ","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos","kind":"ctor","line":330,"name":"Lean.Meta.Occurrences.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L330-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>","info":{"doc":"All occurrences should be rewritten. ","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.all","kind":"ctor","line":328,"name":"Lean.Meta.Occurrences.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L328-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for which occurrences that match an expression should be rewritten. ","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences","kind":"inductive","line":326,"name":"Lean.Meta.Occurrences","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L326-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">NormCastConfig</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk","kind":"ctor","line":317,"name":"Lean.Meta.Simp.NormCastConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L317-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">NormCastConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.toConfig","kind":"def","line":317,"name":"Lean.Meta.Simp.NormCastConfig.toConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L317-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig","kind":"structure","line":317,"name":"Lean.Meta.Simp.NormCastConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L317-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">neutralConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>","info":{"doc":"A neutral configuration for `simp`, turning off all reductions and other built-in simplifications.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig","kind":"def","line":299,"name":"Lean.Meta.Simp.neutralConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L299-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">ConfigCtx</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk","kind":"ctor","line":296,"name":"Lean.Meta.Simp.ConfigCtx.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx","kind":"structure","line":296,"name":"Lean.Meta.Simp.ConfigCtx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L296-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">ConfigCtx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.toConfig","kind":"def","line":296,"name":"Lean.Meta.Simp.ConfigCtx.toConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L296-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instBEqConfig</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a> → <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig.beq","kind":"def","line":293,"name":"Lean.Meta.Simp.instBEqConfig.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig","kind":"instance","line":293,"name":"Lean.Meta.Simp.instBEqConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig.default","kind":"def","line":293,"name":"Lean.Meta.Simp.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig","kind":"instance","line":293,"name":"Lean.Meta.Simp.instInhabitedConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.warnExponents\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">warnExponents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), the `^` simprocs generate an warning it the exponents are too big.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.warnExponents","kind":"def","line":292,"name":"Lean.Meta.Simp.Config.warnExponents","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L292-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.bitVecOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">bitVecOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), the bitvector simprocs use `BitVec.ofNat` for representing\nbitvector literals.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.bitVecOfNat","kind":"def","line":288,"name":"Lean.Meta.Simp.Config.bitVecOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L288-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.congrConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">congrConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), `simp` tries to realize constant `f.congr_simp`\nwhen constructing an auxiliary congruence proof for `f`.\nThis option exists because the termination prover uses `simp` and `withoutModifyingEnv`\nwhile constructing the termination proof. Thus, any constant realized by `simp`\nis deleted.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.congrConsts","kind":"def","line":283,"name":"Lean.Meta.Simp.Config.congrConsts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.letToHave\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">letToHave</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default : `true`), then `simp` will attempt to transform `let`s into `have`s\nif they are non-dependent. This only applies when `zeta := false`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.letToHave","kind":"def","line":275,"name":"Lean.Meta.Simp.Config.letToHave","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaHave\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaHave</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `false` (default: `true`), then disables zeta reduction of `have` expressions.\nIf `zeta` is `false`, then this option has no effect.\nUnused `have`s are still removed if `zeta` or `zetaUnused` are true.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaHave","kind":"def","line":270,"name":"Lean.Meta.Simp.Config.zetaHave","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L270-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.catchRuntime\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">catchRuntime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default : `true`), then `simp` catches runtime exceptions and\nconverts them into `simp` exceptions.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.catchRuntime","kind":"def","line":264,"name":"Lean.Meta.Simp.Config.catchRuntime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaUnused</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default : `true`), then `simp` removes unused `let` and `have` expressions:\n`let x := v; e` simplifies to `e` when `x` does not occur in `e`.\nThis option takes precedence over `zeta` and `zetaHave`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaUnused","kind":"def","line":259,"name":"Lean.Meta.Simp.Config.zetaUnused","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L259-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">implicitDefEqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `implicitDefEqProofs := true`, `simp` does not create proof terms when the\ninput and output terms are definitionally equal.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs","kind":"def","line":253,"name":"Lean.Meta.Simp.Config.implicitDefEqProofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L253-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index","kind":"def","line":248,"name":"Lean.Meta.Simp.Config.index","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L248-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing `x : t := e`, then the free variable `x` reduces to `e`.\nOtherwise, `x` must be provided as a `simp` argument.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta","kind":"def","line":243,"name":"Lean.Meta.Simp.Config.zetaDelta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp","kind":"def","line":237,"name":"Lean.Meta.Simp.Config.unfoldPartialApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">ground</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `ground` is `true` (default: `false`), then ground terms are reduced.\nA term is ground when it does not contain free or meta variables.\nReduction is interrupted at a function application `f ...` if `f` is marked to not be unfolded.\nGround term reduction applies `@[seval]` lemmas.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground","kind":"def","line":232,"name":"Lean.Meta.Simp.Config.ground","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged","kind":"def","line":225,"name":"Lean.Meta.Simp.Config.failIfUnchanged","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`) then switches to `dsimp` on dependent arguments\nif there is no congruence theorem that would allow `simp` to visit them.\nWhen `dsimp` is `false`, then the argument is not visited.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp","kind":"def","line":220,"name":"Lean.Meta.Simp.Config.dsimp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L220-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), unfolds applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be enabled using the `simp!` syntax.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold","kind":"def","line":214,"name":"Lean.Meta.Simp.Config.autoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L214-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">arith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), simplifies simple arithmetic expressions. ","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith","kind":"def","line":209,"name":"Lean.Meta.Simp.Config.arith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L209-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide","kind":"def","line":207,"name":"Lean.Meta.Simp.Config.decide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), reduces projections of structure constructors.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj","kind":"def","line":202,"name":"Lean.Meta.Simp.Config.proj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota","kind":"def","line":198,"name":"Lean.Meta.Simp.Config.iota","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>","info":{"doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct","kind":"def","line":194,"name":"Lean.Meta.Simp.Config.etaStruct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta","kind":"def","line":189,"name":"Lean.Meta.Simp.Config.eta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta","kind":"def","line":184,"name":"Lean.Meta.Simp.Config.beta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L184-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), performs zeta reduction of `let` and `have` expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nIf `zetaHave` is `false` then `have` expressions are not zeta reduced.\nSee also `zetaDelta`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta","kind":"def","line":179,"name":"Lean.Meta.Simp.Config.zeta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">singlePass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `singlePass` is `true` (default: `false`), the simplifier runs through a single round of simplification,\nwhich consists of running pre-methods, recursing using congruence lemmas, and then running post-methods.\nOtherwise, when it is `false`, it iteratively applies this simplification procedure.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass","kind":"def","line":172,"name":"Lean.Meta.Simp.Config.singlePass","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">memoize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When true (default: `true`) then the simplifier caches the result of simplifying each sub-expression, if possible.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize","kind":"def","line":166,"name":"Lean.Meta.Simp.Config.memoize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">contextual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `contextual` is true (default: `false`) and simplification encounters an implication `p → q`\nit includes `p` as an additional simp lemma when simplifying `q`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual","kind":"def","line":162,"name":"Lean.Meta.Simp.Config.contextual","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxDischargeDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"When simp discharges side conditions for conditional lemmas, it can recursively apply simplification.\nThe `maxDischargeDepth` (default: 2) is the maximum recursion depth when recursively applying simplification to side conditions.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth","kind":"def","line":157,"name":"Lean.Meta.Simp.Config.maxDischargeDepth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The maximum number of subexpressions to visit when performing simplification.\nThe default is 100000.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps","kind":"def","line":152,"name":"Lean.Meta.Simp.Config.maxSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSteps </span><span class=\"fn\">maxDischargeDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contextual </span><span class=\"fn\">memoize </span><span class=\"fn\">singlePass </span><span class=\"fn\">zeta </span><span class=\"fn\">beta </span><span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaStruct</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iota </span><span class=\"fn\">proj </span><span class=\"fn\">decide </span><span class=\"fn\">arith </span><span class=\"fn\">autoUnfold </span><span class=\"fn\">dsimp </span><span class=\"fn\">failIfUnchanged </span><span class=\"fn\">ground </span><span class=\"fn\">unfoldPartialApp </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">index </span><span class=\"fn\">implicitDefEqProofs\n  </span><span class=\"fn\">zetaUnused </span><span class=\"fn\">catchRuntime </span><span class=\"fn\">zetaHave </span><span class=\"fn\">letToHave </span><span class=\"fn\">congrConsts </span><span class=\"fn\">bitVecOfNat </span><span class=\"fn\">warnExponents</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk","kind":"ctor","line":147,"name":"Lean.Meta.Simp.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The configuration for `simp`.\nPassed to `simp` using, for example, the `simp +contextual` or `simp (maxSteps := 100000)` syntax.\n\nSee also `Lean.Meta.Simp.neutralConfig` and `Lean.Meta.DSimp.Config`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config","kind":"structure","line":141,"name":"Lean.Meta.Simp.Config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L141-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">defaultMaxSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps","kind":"def","line":139,"name":"Lean.Meta.Simp.defaultMaxSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig","kind":"instance","line":133,"name":"Lean.Meta.DSimp.instBEqConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instBEqConfig</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a> → <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig.beq","kind":"def","line":133,"name":"Lean.Meta.DSimp.instBEqConfig.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig","kind":"instance","line":133,"name":"Lean.Meta.DSimp.instInhabitedConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig.default","kind":"def","line":133,"name":"Lean.Meta.DSimp.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaHave\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaHave</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `false` (default: `true`), then disables zeta reduction of `have` expressions.\nIf `zeta` is `false`, then this option has no effect.\nUnused `have`s are still removed if `zeta` or `zetaUnused` are true.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaHave","kind":"def","line":132,"name":"Lean.Meta.DSimp.Config.zetaHave","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaUnused</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default : `true`), then `simp` will remove unused `let` and `have` expressions:\n`let x := v; e` simplifies to `e` when `x` does not occur in `e`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaUnused","kind":"def","line":126,"name":"Lean.Meta.DSimp.Config.zetaUnused","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index","kind":"def","line":121,"name":"Lean.Meta.DSimp.Config.index","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing `x : t := e`, then the free variable `x` reduces to `e`.\nOtherwise, `x` must be provided as a `simp` argument.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta","kind":"def","line":116,"name":"Lean.Meta.DSimp.Config.zetaDelta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp","kind":"def","line":110,"name":"Lean.Meta.DSimp.Config.unfoldPartialApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged","kind":"def","line":105,"name":"Lean.Meta.DSimp.Config.failIfUnchanged","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), unfolds applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be enabled using the `simp!` syntax.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold","kind":"def","line":100,"name":"Lean.Meta.DSimp.Config.autoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide","kind":"def","line":95,"name":"Lean.Meta.DSimp.Config.decide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), reduces projections of structure constructors.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj","kind":"def","line":90,"name":"Lean.Meta.DSimp.Config.proj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota","kind":"def","line":86,"name":"Lean.Meta.DSimp.Config.iota","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>","info":{"doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct","kind":"def","line":82,"name":"Lean.Meta.DSimp.Config.etaStruct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta","kind":"def","line":77,"name":"Lean.Meta.DSimp.Config.eta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta","kind":"def","line":72,"name":"Lean.Meta.DSimp.Config.beta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), performs zeta reduction of `let` and `have` expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nIf `zetaHave` is `false` then `have` expressions are not zeta reduced.\nSee also `zetaDelta`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta","kind":"def","line":67,"name":"Lean.Meta.DSimp.Config.zeta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zeta </span><span class=\"fn\">beta </span><span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaStruct</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iota </span><span class=\"fn\">proj </span><span class=\"fn\">decide </span><span class=\"fn\">autoUnfold </span><span class=\"fn\">failIfUnchanged </span><span class=\"fn\">unfoldPartialApp </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">index </span><span class=\"fn\">zetaUnused </span><span class=\"fn\">zetaHave</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk","kind":"ctor","line":60,"name":"Lean.Meta.DSimp.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The configuration for `dsimp`.\nPassed to `dsimp` using, for example, the `dsimp (config := {zeta := false})` syntax.\n\nImplementation note: this structure is only used for processing the `(config := ...)` syntax, and it is not used internally.\nIt is immediately converted to `Lean.Meta.Simp.Config` by `Lean.Elab.Tactic.elabSimpConfig`.\n","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config","kind":"structure","line":53,"name":"Lean.Meta.DSimp.Config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L53-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode","kind":"instance","line":49,"name":"Lean.Meta.instBEqEtaStructMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqEtaStructMode</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a> → <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode.beq","kind":"def","line":49,"name":"Lean.Meta.instBEqEtaStructMode.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode","kind":"instance","line":49,"name":"Lean.Meta.instInhabitedEtaStructMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEtaStructMode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode.default","kind":"def","line":49,"name":"Lean.Meta.instInhabitedEtaStructMode.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>","info":{"doc":"Disable eta for structures and classes. ","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none","kind":"ctor","line":47,"name":"Lean.Meta.EtaStructMode.none","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L47-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">notClasses</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>","info":{"doc":"Enable eta only for structures that are not classes. ","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses","kind":"ctor","line":45,"name":"Lean.Meta.EtaStructMode.notClasses","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>","info":{"doc":"Enable eta for structure and classes. ","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all","kind":"ctor","line":43,"name":"Lean.Meta.EtaStructMode.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Which structure types should eta be used with? ","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode","kind":"inductive","line":41,"name":"Lean.Meta.EtaStructMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L41-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode","kind":"instance","line":39,"name":"Lean.Meta.instBEqTransparencyMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqTransparencyMode</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> → <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode.beq","kind":"def","line":39,"name":"Lean.Meta.instBEqTransparencyMode.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedTransparencyMode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode.default","kind":"def","line":39,"name":"Lean.Meta.instInhabitedTransparencyMode.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode","kind":"instance","line":39,"name":"Lean.Meta.instInhabitedTransparencyMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>","info":{"doc":"Unfolds reducible constants and constants tagged with the `@[instance]` attribute. ","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances","kind":"ctor","line":37,"name":"Lean.Meta.TransparencyMode.instances","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">reducible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>","info":{"doc":"Unfolds only constants tagged with the `@[reducible]` attribute. ","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible","kind":"ctor","line":35,"name":"Lean.Meta.TransparencyMode.reducible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>","info":{"doc":"Unfolds all constants except those tagged as `@[irreducible]`. ","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default","kind":"ctor","line":33,"name":"Lean.Meta.TransparencyMode.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>","info":{"doc":"Unfolds all constants, even those tagged as `@[irreducible]`. ","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all","kind":"ctor","line":31,"name":"Lean.Meta.TransparencyMode.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Which constants should be unfolded?\n","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode","kind":"inductive","line":27,"name":"Lean.Meta.TransparencyMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L27-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.commands\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">commands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Module.commands","kind":"def","line":23,"name":"Lean.Module.commands","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Module.header","kind":"def","line":22,"name":"Lean.Module.header","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commands</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.Module.mk","kind":"ctor","line":21,"name":"Lean.Module.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax objects for a Lean module. ","docLink":"./Init/MetaTypes.html#Lean.Module","kind":"structure","line":20,"name":"Lean.Module","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L20-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedNameGenerator</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator.default","kind":"def","line":18,"name":"Lean.instInhabitedNameGenerator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedNameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></span></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator","kind":"instance","line":18,"name":"Lean.instInhabitedNameGenerator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.idx","kind":"def","line":17,"name":"Lean.NameGenerator.idx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">namePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix","kind":"def","line":16,"name":"Lean.NameGenerator.namePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.mk","kind":"ctor","line":15,"name":"Lean.NameGenerator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L15-L15"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/MetaTypes.html#Lean.NameGenerator","kind":"structure","line":15,"name":"Lean.NameGenerator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/MetaTypes.lean#L15-L18"}}],"imports":["Init.Core"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedNameGenerator","typeNames":["Lean.NameGenerator"]},{"className":"Inhabited","name":"Lean.Meta.instInhabitedTransparencyMode","typeNames":["Lean.Meta.TransparencyMode"]},{"className":"BEq","name":"Lean.Meta.instBEqTransparencyMode","typeNames":["Lean.Meta.TransparencyMode"]},{"className":"Inhabited","name":"Lean.Meta.instInhabitedEtaStructMode","typeNames":["Lean.Meta.EtaStructMode"]},{"className":"BEq","name":"Lean.Meta.instBEqEtaStructMode","typeNames":["Lean.Meta.EtaStructMode"]},{"className":"Inhabited","name":"Lean.Meta.DSimp.instInhabitedConfig","typeNames":["Lean.Meta.DSimp.Config"]},{"className":"BEq","name":"Lean.Meta.DSimp.instBEqConfig","typeNames":["Lean.Meta.DSimp.Config"]},{"className":"Inhabited","name":"Lean.Meta.Simp.instInhabitedConfig","typeNames":["Lean.Meta.Simp.Config"]},{"className":"BEq","name":"Lean.Meta.Simp.instBEqConfig","typeNames":["Lean.Meta.Simp.Config"]},{"className":"Inhabited","name":"Lean.Meta.instInhabitedOccurrences","typeNames":["Lean.Meta.Occurrences"]},{"className":"BEq","name":"Lean.Meta.instBEqOccurrences","typeNames":["Lean.Meta.Occurrences"]},{"className":"Coe","name":"Lean.Meta.instCoeListNatOccurrences","typeNames":["List","Lean.Meta.Occurrences"]}],"name":"Init.MetaTypes"}