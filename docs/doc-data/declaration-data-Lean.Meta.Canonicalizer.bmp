{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\">CanonM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"\"Canonicalize\" the given expression.\n","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.canon","kind":"def","line":127,"name":"Lean.Meta.Canonicalizer.canon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L127-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">CanonM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\">CanonM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\">TransparencyMode.instances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a> := <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk\">{</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run","kind":"def","line":72,"name":"Lean.Meta.Canonicalizer.CanonM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">CanonM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\">CanonM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\">TransparencyMode.instances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a> := <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk\">{</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The definitionally equality tests are performed using the given transparency mode.\nWe claim `TransparencyMode.instances` is a good setting for most applications.\n","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM.run'","kind":"def","line":65,"name":"Lean.Meta.Canonicalizer.CanonM.run'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L65-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">CanonM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.CanonM","kind":"def","line":63,"name":"Lean.Meta.Canonicalizer.CanonM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedState","kind":"instance","line":60,"name":"Lean.Meta.Canonicalizer.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.keyToExprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span>.<span class=\"name\">keyToExprs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Given a hashcode `k` and `keyToExprs.find? h = some es`, we have that all `es` have hashcode `k`, and\nare not definitionally equal modulo the transparency setting used. ","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.keyToExprs","kind":"def","line":58,"name":"Lean.Meta.Canonicalizer.State.keyToExprs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Std.HashMap.Raw</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Mapping from `Expr` to hash. ","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.cache","kind":"def","line":54,"name":"Lean.Meta.Canonicalizer.State.cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Std.HashMap.Raw</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keyToExprs</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State.mk","kind":"ctor","line":51,"name":"Lean.Meta.Canonicalizer.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for the `CanonM` monad.\n","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.State","kind":"structure","line":48,"name":"Lean.Meta.Canonicalizer.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L48-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instHashableExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instHashableExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instHashableExprVisited","kind":"instance","line":45,"name":"Lean.Meta.Canonicalizer.instHashableExprVisited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instBEqExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instBEqExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instBEqExprVisited","kind":"instance","line":42,"name":"Lean.Meta.Canonicalizer.instBEqExprVisited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedExprVisited.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instInhabitedExprVisited</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedExprVisited.default","kind":"def","line":40,"name":"Lean.Meta.Canonicalizer.instInhabitedExprVisited.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">instInhabitedExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.instInhabitedExprVisited","kind":"instance","line":40,"name":"Lean.Meta.Canonicalizer.instInhabitedExprVisited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.e\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">ExprVisited</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.e","kind":"def","line":39,"name":"Lean.Meta.Canonicalizer.ExprVisited.e","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">ExprVisited</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\">ExprVisited</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited.mk","kind":"ctor","line":38,"name":"Lean.Meta.Canonicalizer.ExprVisited.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Canonicalizer</span>.<span class=\"name\">ExprVisited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary structure for creating a pointer-equality.\n","docLink":"./Lean/Meta/Canonicalizer.html#Lean.Meta.Canonicalizer.ExprVisited","kind":"structure","line":35,"name":"Lean.Meta.Canonicalizer.ExprVisited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Canonicalizer.lean#L35-L40"}}],"imports":["Lean.Util.ShareCommon","Lean.Meta.FunInfo","Std.Data.HashMap.Raw"],"instances":[{"className":"Inhabited","name":"Lean.Meta.Canonicalizer.instInhabitedExprVisited","typeNames":["Lean.Meta.Canonicalizer.ExprVisited"]},{"className":"BEq","name":"Lean.Meta.Canonicalizer.instBEqExprVisited","typeNames":["Lean.Meta.Canonicalizer.ExprVisited"]},{"className":"Hashable","name":"Lean.Meta.Canonicalizer.instHashableExprVisited","typeNames":["Lean.Meta.Canonicalizer.ExprVisited"]},{"className":"Inhabited","name":"Lean.Meta.Canonicalizer.instInhabitedState","typeNames":["Lean.Meta.Canonicalizer.State"]}],"name":"Lean.Meta.Canonicalizer"}