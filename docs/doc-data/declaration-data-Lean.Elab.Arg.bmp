{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.expandApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.expandApp","kind":"def","line":68,"name":"Lean.Elab.Term.expandApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.expandArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.expandArgs","kind":"def","line":47,"name":"Lean.Elab.Term.expandArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L47-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.addNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addNamedArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArg</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span></div></div>","info":{"doc":"Add a new named argument to `namedArgs`, and throw an error if it already contains a named argument\nwith the same name. ","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.addNamedArg","kind":"def","line":39,"name":"Lean.Elab.Term.addNamedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L39-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instToMessageDataArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instToMessageDataArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instToMessageDataArg","kind":"instance","line":34,"name":"Lean.Elab.Term.instToMessageDataArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedNamedArg</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg.default","kind":"def","line":32,"name":"Lean.Elab.Term.instInhabitedNamedArg.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedNamedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedNamedArg","kind":"instance","line":32,"name":"Lean.Elab.Term.instInhabitedNamedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.suppressDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">suppressDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `true`, then make all parameters that depend on this one become implicit.\nThis is used for projection notation, since structure parameters might be explicit for classes. ","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.suppressDeps","kind":"def","line":31,"name":"Lean.Elab.Term.NamedArg.suppressDeps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.val","kind":"def","line":28,"name":"Lean.Elab.Term.NamedArg.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.name","kind":"def","line":27,"name":"Lean.Elab.Term.NamedArg.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.ref","kind":"def","line":26,"name":"Lean.Elab.Term.NamedArg.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suppressDeps</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg.mk","kind":"ctor","line":25,"name":"Lean.Elab.Term.NamedArg.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">NamedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Named arguments created using the notation `(x := val)`. ","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg","kind":"structure","line":24,"name":"Lean.Elab.Term.NamedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L24-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg","kind":"instance","line":22,"name":"Lean.Elab.Term.instInhabitedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedArg</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.instInhabitedArg.default","kind":"def","line":22,"name":"Lean.Elab.Term.instInhabitedArg.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Arg</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.expr","kind":"ctor","line":21,"name":"Lean.Elab.Term.Arg.expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Arg</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg.stx","kind":"ctor","line":20,"name":"Lean.Elab.Term.Arg.stx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary inductive datatype for combining unelaborated syntax\nand already elaborated expressions. It is used to elaborate applications.\n","docLink":"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg","kind":"inductive","line":15,"name":"Lean.Elab.Term.Arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Arg.lean#L15-L22"}}],"imports":["Lean.Elab.Term"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Term.instInhabitedArg","typeNames":["Lean.Elab.Term.Arg"]},{"className":"Inhabited","name":"Lean.Elab.Term.instInhabitedNamedArg","typeNames":["Lean.Elab.Term.NamedArg"]},{"className":"Lean.ToMessageData","name":"Lean.Elab.Term.instToMessageDataArg","typeNames":["Lean.Elab.Term.Arg"]}],"name":"Lean.Elab.Arg"}