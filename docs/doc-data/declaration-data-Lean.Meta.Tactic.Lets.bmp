{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.letToHaveLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">letToHaveLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failIfUnchanged</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Transforms lets to haves in the type of `fvarId`. Throws an error if no progress is made.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.letToHaveLocalDecl","kind":"def","line":441,"name":"Lean.MVarId.letToHaveLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L441-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.letToHave\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">letToHave</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failIfUnchanged</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Transforms lets to haves in the target. Throws an error if no progress is made.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.letToHave","kind":"def","line":429,"name":"Lean.MVarId.letToHave","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L429-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLetsLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">liftLetsLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">Meta.LiftLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Like `Lean.MVarId.liftLets` but lifts lets in a local declaration.\nIf the local declaration has a value, then both its type and value are modified.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLetsLocalDecl","kind":"def","line":398,"name":"Lean.MVarId.liftLetsLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L398-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLets\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">liftLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">Meta.LiftLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Lifts `let` and `have` expressions in target as far out as possible.\nThrows an exception if nothing is lifted.\n\nLike `Lean.MVarId.extractLets`, but top-level lets are not added to the local context.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLets","kind":"def","line":383,"name":"Lean.MVarId.liftLets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L383-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLetsLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">extractLetsLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">Meta.ExtractLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> ((<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>","info":{"doc":"Like `Lean.MVarId.extractLets` but extracts lets from a local declaration.\nIf the local declaration has a value, then both its type and value are modified.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLetsLocalDecl","kind":"def","line":355,"name":"Lean.MVarId.extractLetsLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L355-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLets\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">extractLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">Meta.ExtractLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> ((<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>","info":{"doc":"Extracts `let` and `have` expressions from the target,\nreturning `FVarId`s for the extracted let declarations along with the new goal.\n- The `givenNames` is a list of explicit names to use for extracted local declarations.\n  If a name is `_` (or if there is no provided given name and `config.onlyGivenNames` is true) then uses a hygienic name\n  based on the existing binder name.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLets","kind":"def","line":335,"name":"Lean.MVarId.extractLets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L335-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.liftLets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">liftLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">LiftLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Lifts `let` and `have` expressions in the given expression as far out as possible.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.liftLets","kind":"def","line":323,"name":"Lean.Meta.liftLets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L323-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.extractLets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">extractLets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Extracts `let` and `have` expressions into local definitions,\nevaluating `k` at the post-extracted expressions and the extracted fvarids, within a context containing those local declarations.\n- The `givenNames` is a list of explicit names to use for extracted local declarations.\n  If a name is `_` (or if there is no provided given name and `config.onlyGivenNames` is true) then uses a hygienic name\n  based on the existing binder name.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.extractLets","kind":"def","line":312,"name":"Lean.Meta.extractLets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L312-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extract\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Main entry point for extracting lets.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extract","kind":"def","line":288,"name":"Lean.Meta.ExtractLets.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L288-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractTopLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractTopLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractTopLevel","kind":"def","line":284,"name":"Lean.Meta.ExtractLets.extractTopLevel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L284-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">topLevel</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Extracts lets from `e`.\n- `fvars` is an array of all the local variables from going under binders,\n  used to detect whether an expression is extractable. Extracted `let`s do not have their fvarids in this list.\n  This is not part of the cache key since it's an optimization and in principle derivable.\n- `topLevel` is whether we are still looking at the top-level expression.\n  The body of an extracted top-level let is also considered to be top-level.\n  This is part of the cache key since it affects what is extracted.\n\nNote: the return value may refer to fvars that are not in the current local context, but they are in the `decls` list.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore","kind":"opaque","line":198,"name":"Lean.Meta.ExtractLets.extractCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L198-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.containsLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">containsLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the expression contains a `let` expression or a `have`.\nIts purpose is to be a check for whether a subexpression can be skipped.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.containsLet","kind":"def","line":191,"name":"Lean.Meta.ExtractLets.containsLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L191-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.initializeValueMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">initializeValueMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Initializes the `valueMap` with all the local definitions that aren't implementation details.\nUsed for `merge` feature when `useContext` is enabled.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.initializeValueMap","kind":"def","line":180,"name":"Lean.Meta.ExtractLets.initializeValueMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L180-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withDeclInContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">withDeclInContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Ensures that the given `fvarId` is in context by adding `decls` from the state.\nSimplification: since we are not recording which decls depend on which, but we do know all dependencies\ncome before a particular decl, we add all the decls up to and including `fvarId`.\n\nUsed for `merge` feature.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withDeclInContext","kind":"def","line":163,"name":"Lean.Meta.ExtractLets.withDeclInContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L163-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.ensureIsLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">ensureIsLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Makes sure the declaration for `fvarId` is marked with `isLet := true`.\nUsed in `lift + merge` mode to ensure that, after merging, if any version was a `let` then it's a `let` rather than a `have`.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.ensureIsLet","kind":"def","line":153,"name":"Lean.Meta.ExtractLets.ensureIsLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L153-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.mkLetDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">mkLetDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Closes all the local declarations in `e`, creating `let` and `have` expressions.\nDoes not require that any of the declarations are in context.\nAssumes that `e` contains no metavariables with local contexts that contain any of these metavariables\n(the extraction procedure creates no new metavariables, so this is the case).\n\nThis should *not* be used when closing lets for new goal metavariables, since\n1. The goal contains the decls in its local context, violating the assumption.\n2. We need to use true `let`s in that case, since tactics may zeta-delta reduce these declarations.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.mkLetDecls","kind":"def","line":139,"name":"Lean.Meta.ExtractLets.mkLetDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L139-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withEnsuringDeclsInContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">withEnsuringDeclsInContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Ensures that the given local declarations are in context. Runs `k` in that context.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withEnsuringDeclsInContext","kind":"def","line":131,"name":"Lean.Meta.ExtractLets.withEnsuringDeclsInContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L131-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.flushDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">flushDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a>)</span></span></div></div>","info":{"doc":"Removes and returns all local declarations that (transitively) depend on `fvar`.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.flushDecls","kind":"def","line":114,"name":"Lean.Meta.ExtractLets.flushDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L114-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds the `decl` to the `decls` list. Assumes that `decl` is an ldecl with `nondep := false`.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.addDecl","kind":"def","line":104,"name":"Lean.Meta.ExtractLets.addDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L104-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.isExtractableLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">isExtractableLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>","info":{"doc":"Returns whether a let-like expression with the given type and value is extractable,\ngiven the list `fvars` of binders that inhibit extraction.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.isExtractableLet","kind":"def","line":90,"name":"Lean.Meta.ExtractLets.isExtractableLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L90-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns 'true' if `e` does not depend on any of the fvars in `fvars`.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractable","kind":"def","line":84,"name":"Lean.Meta.ExtractLets.extractable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L84-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextNameForBinderName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">nextNameForBinderName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Generate a name to use for a new local declaration, derived possibly from the given binder name.\nReturns `none` iff `hasNextName` is false.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextNameForBinderName?","kind":"def","line":65,"name":"Lean.Meta.ExtractLets.nextNameForBinderName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L65-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">nextName?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Gets the next name to use for extracted `let`s ","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextName?","kind":"def","line":57,"name":"Lean.Meta.ExtractLets.nextName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L57-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.hasNextName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">hasNextName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `nextName?` would return a name. ","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.hasNextName","kind":"def","line":53,"name":"Lean.Meta.ExtractLets.hasNextName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L53-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M","kind":"def","line":51,"name":"Lean.Meta.ExtractLets.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.instInhabitedState.default","kind":"def","line":48,"name":"Lean.Meta.ExtractLets.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.instInhabitedState","kind":"instance","line":48,"name":"Lean.Meta.ExtractLets.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.valueMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">valueMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"Map from `let` values to fvars. To support the `merge` option. ","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.valueMap","kind":"def","line":47,"name":"Lean.Meta.ExtractLets.State.valueMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span></div></div>","info":{"doc":"Saved declarations for the extracted `let`s. ","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.decls","kind":"def","line":45,"name":"Lean.Meta.ExtractLets.State.decls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.givenNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">givenNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Names to use for local definitions for the extracted lets. ","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.givenNames","kind":"def","line":43,"name":"Lean.Meta.ExtractLets.State.givenNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">valueMap</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.mk","kind":"ctor","line":41,"name":"Lean.Meta.ExtractLets.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State","kind":"structure","line":41,"name":"Lean.Meta.ExtractLets.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L41-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.isLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span>.<span class=\"name\">isLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true, is a `let`, if false, is a `have`.\nUsed in `lift` mode.\n","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.isLet","kind":"def","line":39,"name":"Lean.Meta.ExtractLets.LocalDecl'.isLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"An `ldecl` with `nondep := false`. ","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.decl","kind":"def","line":34,"name":"Lean.Meta.ExtractLets.LocalDecl'.decl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.mk","kind":"ctor","line":32,"name":"Lean.Meta.ExtractLets.LocalDecl'.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'","kind":"structure","line":32,"name":"Lean.Meta.ExtractLets.LocalDecl'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Lets.lean#L32-L39"}}],"imports":["Lean.Meta.Tactic.Replace","Lean.Meta.LetToHave"],"instances":[{"className":"Inhabited","name":"Lean.Meta.ExtractLets.instInhabitedState","typeNames":["Lean.Meta.ExtractLets.State"]}],"name":"Lean.Meta.Tactic.Lets"}