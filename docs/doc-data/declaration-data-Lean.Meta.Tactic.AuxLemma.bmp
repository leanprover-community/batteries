{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.mkAuxLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkAuxLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inferRfl </span><span class=\"fn\">forceExpose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Helper method for creating auxiliary lemmas in the environment.\n\nIt uses a cache that maps `type` to declaration name. The cache is not stored in `.olean` files.\nIt is useful to make sure the same auxiliary lemma is not created over and over again in the same\nenvironment branch. For expensive auxiliary lemmas that should be deduplicated even across\ndifferent environment branches, consider using `realizeConst` instead.\n\nThis method is useful for tactics (e.g., `simp`) that may perform preprocessing steps to lemmas provided by\nusers. For example, `simp` preprocessor may convert a lemma into multiple ones.\n","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.mkAuxLemma","kind":"def","line":30,"name":"Lean.Meta.mkAuxLemma","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L30-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.auxLemmasExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">auxLemmasExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">AuxLemmas</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.auxLemmasExt","kind":"opaque","line":27,"name":"Lean.Meta.auxLemmasExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instInhabitedAuxLemmas.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedAuxLemmas</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">AuxLemmas</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instInhabitedAuxLemmas.default","kind":"def","line":25,"name":"Lean.Meta.instInhabitedAuxLemmas.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instInhabitedAuxLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedAuxLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">AuxLemmas</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instInhabitedAuxLemmas","kind":"instance","line":25,"name":"Lean.Meta.instInhabitedAuxLemmas","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.lemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span>.<span class=\"name\">lemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">AuxLemmas</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.lemmas","kind":"def","line":24,"name":"Lean.Meta.AuxLemmas.lemmas","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\">AuxLemmas</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas.mk","kind":"ctor","line":23,"name":"Lean.Meta.AuxLemmas.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmas</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmas","kind":"structure","line":23,"name":"Lean.Meta.AuxLemmas","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L23-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instHashableAuxLemmaKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instHashableAuxLemmaKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instHashableAuxLemmaKey","kind":"instance","line":21,"name":"Lean.Meta.instHashableAuxLemmaKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instHashableAuxLemmaKey.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instHashableAuxLemmaKey</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instHashableAuxLemmaKey.hash","kind":"def","line":21,"name":"Lean.Meta.instHashableAuxLemmaKey.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instBEqAuxLemmaKey.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqAuxLemmaKey</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a> → <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instBEqAuxLemmaKey.beq","kind":"def","line":21,"name":"Lean.Meta.instBEqAuxLemmaKey.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instBEqAuxLemmaKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqAuxLemmaKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.instBEqAuxLemmaKey","kind":"instance","line":21,"name":"Lean.Meta.instBEqAuxLemmaKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey.isPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmaKey</span>.<span class=\"name\">isPrivate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey.isPrivate","kind":"def","line":20,"name":"Lean.Meta.AuxLemmaKey.isPrivate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmaKey</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey.type","kind":"def","line":17,"name":"Lean.Meta.AuxLemmaKey.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmaKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPrivate</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\">AuxLemmaKey</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey.mk","kind":"ctor","line":16,"name":"Lean.Meta.AuxLemmaKey.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AuxLemmaKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/AuxLemma.html#Lean.Meta.AuxLemmaKey","kind":"structure","line":16,"name":"Lean.Meta.AuxLemmaKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/AuxLemma.lean#L16-L21"}}],"imports":["Lean.AddDecl","Lean.DefEqAttrib"],"instances":[{"className":"BEq","name":"Lean.Meta.instBEqAuxLemmaKey","typeNames":["Lean.Meta.AuxLemmaKey"]},{"className":"Hashable","name":"Lean.Meta.instHashableAuxLemmaKey","typeNames":["Lean.Meta.AuxLemmaKey"]},{"className":"Inhabited","name":"Lean.Meta.instInhabitedAuxLemmas","typeNames":["Lean.Meta.AuxLemmas"]}],"name":"Lean.Meta.Tactic.AuxLemma"}