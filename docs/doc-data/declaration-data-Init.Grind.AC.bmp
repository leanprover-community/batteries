{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.refl\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.refl","kind":"theorem","line":707,"name":"Lean.Grind.AC.refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L707-L707"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.imp_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">imp_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.imp_eq","kind":"theorem","line":703,"name":"Lean.Grind.AC.imp_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L703-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_expr_seq_seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_expr_seq_seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_expr_seq_seq","kind":"theorem","line":700,"name":"Lean.Grind.AC.eq_expr_seq_seq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L700-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup_rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_erase_dup_rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup\">eraseDup</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup_rhs","kind":"theorem","line":696,"name":"Lean.Grind.AC.eq_erase_dup_rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L696-L698"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0_rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_erase0_rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0\">erase0</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0_rhs","kind":"theorem","line":692,"name":"Lean.Grind.AC.eq_erase0_rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L692-L694"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.norm_aci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm_aci</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>}\n  (<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\">toSeq</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0\">erase0</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort\">sort</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.norm_aci","kind":"theorem","line":688,"name":"Lean.Grind.AC.norm_aci","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L688-L690"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.norm_ai\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm_ai</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>} (<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\">toSeq</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0\">erase0</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.norm_ai","kind":"theorem","line":684,"name":"Lean.Grind.AC.norm_ai","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L684-L686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.norm_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\">toSeq</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort\">sort</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.norm_ac","kind":"theorem","line":680,"name":"Lean.Grind.AC.norm_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L680-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.norm_a\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm_a</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\">toSeq</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.norm_a","kind":"theorem","line":676,"name":"Lean.Grind.AC.norm_a","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L676-L678"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_unsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_unsat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_unsat_cert\">diseq_unsat_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_unsat","kind":"theorem","line":673,"name":"Lean.Grind.AC.diseq_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L673-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_unsat_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_unsat_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_unsat_cert","kind":"def","line":670,"name":"Lean.Grind.AC.diseq_unsat_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L670-L671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_erase0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0_cert\">eq_erase0_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_erase0","kind":"theorem","line":666,"name":"Lean.Grind.AC.diseq_erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L666-L668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_erase_dup\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_erase_dup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup_cert\">eq_erase_dup_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_erase_dup","kind":"theorem","line":662,"name":"Lean.Grind.AC.diseq_erase_dup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L662-L664"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_aci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_norm_aci</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>}\n  (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_aci_cert\">eq_norm_aci_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_aci","kind":"theorem","line":658,"name":"Lean.Grind.AC.diseq_norm_aci","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L658-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_ai\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_norm_ai</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ai_cert\">eq_norm_ai_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_ai","kind":"theorem","line":654,"name":"Lean.Grind.AC.diseq_norm_ai","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L654-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_norm_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ac_cert\">eq_norm_ac_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_ac","kind":"theorem","line":650,"name":"Lean.Grind.AC.diseq_norm_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L650-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_a\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_norm_a</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_a_cert\">eq_norm_a_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_norm_a","kind":"theorem","line":646,"name":"Lean.Grind.AC.diseq_norm_a","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L646-L648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_erase0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0_cert\">eq_erase0_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0","kind":"theorem","line":642,"name":"Lean.Grind.AC.eq_erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L642-L644"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_erase0_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase0_cert","kind":"def","line":639,"name":"Lean.Grind.AC.eq_erase0_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L639-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_erase_dup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup_cert\">eq_erase_dup_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup","kind":"theorem","line":635,"name":"Lean.Grind.AC.eq_erase_dup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L635-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_erase_dup_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_erase_dup_cert","kind":"def","line":632,"name":"Lean.Grind.AC.eq_erase_dup_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L632-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_aci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_aci</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>}\n  (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_aci_cert\">eq_norm_aci_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_aci","kind":"theorem","line":628,"name":"Lean.Grind.AC.eq_norm_aci","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L628-L630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_aci_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_aci_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_aci_cert","kind":"def","line":625,"name":"Lean.Grind.AC.eq_norm_aci_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L625-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ai\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_ai</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ai_cert\">eq_norm_ai_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ai","kind":"theorem","line":621,"name":"Lean.Grind.AC.eq_norm_ai","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L621-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ai_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_ai_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ai_cert","kind":"def","line":618,"name":"Lean.Grind.AC.eq_norm_ai_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L618-L619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} {<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ac_cert\">eq_norm_ac_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ac","kind":"theorem","line":614,"name":"Lean.Grind.AC.eq_norm_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L614-L616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ac_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_ac_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_ac_cert","kind":"def","line":611,"name":"Lean.Grind.AC.eq_norm_ac_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L611-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_a\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_a</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_a_cert\">eq_norm_a_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_a","kind":"theorem","line":607,"name":"Lean.Grind.AC.eq_norm_a","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L607-L609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_a_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_norm_a_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_norm_a_cert","kind":"def","line":604,"name":"Lean.Grind.AC.eq_norm_a_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L604-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_tail_idempotent\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_tail_idempotent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_tail_idempotent_cert\">superpose_tail_idempotent_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"`superpose_ac_idempotent` for the non-commutative case. It is similar to `superpose_head_idempotent` but for the \"tail\"-case\n","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_tail_idempotent","kind":"theorem","line":594,"name":"Lean.Grind.AC.superpose_tail_idempotent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L594-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_tail_idempotent_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_tail_idempotent_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_tail_idempotent_cert","kind":"def","line":591,"name":"Lean.Grind.AC.superpose_tail_idempotent_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L591-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_concat_of_endsWithVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_concat_of_endsWithVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k\">endsWithVar_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k\">concat_k</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_concat_of_endsWithVar","kind":"theorem","line":583,"name":"Lean.Grind.AC.Seq.denote_concat_of_endsWithVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L583-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">endsWithVar_k_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k\">endsWithVar_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k\">endsWithVar_k</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k_cons","kind":"theorem","line":579,"name":"Lean.Grind.AC.Seq.endsWithVar_k_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L579-L579"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k_var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">endsWithVar_k_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k\">endsWithVar_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k_var","kind":"theorem","line":576,"name":"Lean.Grind.AC.Seq.endsWithVar_k_var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L576-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">endsWithVar_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.endsWithVar_k","kind":"def","line":573,"name":"Lean.Grind.AC.Seq.endsWithVar_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L573-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_head_idempotent\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_head_idempotent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_head_idempotent_cert\">superpose_head_idempotent_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"`superpose_ac_idempotent` for the non-commutative case. This is the \"head\"-case\n","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_head_idempotent","kind":"theorem","line":563,"name":"Lean.Grind.AC.superpose_head_idempotent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L563-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_head_idempotent_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_head_idempotent_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_head_idempotent_cert","kind":"def","line":560,"name":"Lean.Grind.AC.superpose_head_idempotent_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L560-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_concat_of_startsWithVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_concat_of_startsWithVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k\">startsWithVar_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k\">concat_k</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_concat_of_startsWithVar","kind":"theorem","line":554,"name":"Lean.Grind.AC.Seq.denote_concat_of_startsWithVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L554-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">startsWithVar_k_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k\">startsWithVar_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k_cons","kind":"theorem","line":549,"name":"Lean.Grind.AC.Seq.startsWithVar_k_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L549-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k_var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">startsWithVar_k_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k\">startsWithVar_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k_var","kind":"theorem","line":546,"name":"Lean.Grind.AC.Seq.startsWithVar_k_var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L546-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">startsWithVar_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.startsWithVar_k","kind":"def","line":543,"name":"Lean.Grind.AC.Seq.startsWithVar_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L543-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_idempotent\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_ac_idempotent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₃</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_idempotent_cert\">superpose_ac_idempotent_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_idempotent","kind":"theorem","line":536,"name":"Lean.Grind.AC.superpose_ac_idempotent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L536-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_idempotent_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_ac_idempotent_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_idempotent_cert","kind":"def","line":528,"name":"Lean.Grind.AC.superpose_ac_idempotent_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L528-L529"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_insert_of_contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_insert_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst₃</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k\">contains_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_insert_of_contains","kind":"theorem","line":515,"name":"Lean.Grind.AC.Seq.denote_insert_of_contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L515-L526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">contains_k_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">y</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k\">contains_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k\">contains_k</a></span> <span class=\"fn\">x</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k_cons","kind":"theorem","line":509,"name":"Lean.Grind.AC.Seq.contains_k_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L509-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k_var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">contains_k_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k\">contains_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k_var","kind":"theorem","line":506,"name":"Lean.Grind.AC.Seq.contains_k_var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L506-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">contains_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.contains_k","kind":"def","line":503,"name":"Lean.Grind.AC.Seq.contains_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L503-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r₁ </span><span class=\"fn\">c </span><span class=\"fn\">r₂ </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_cert\">superpose_ac_cert</a> <span class=\"fn\">r₁</span> <span class=\"fn\">c</span> <span class=\"fn\">r₂</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></span></div></div>","info":{"doc":"Given `lhs₁ = rhs₁` and `lhs₂ = rhs₂` where `lhs₁ := union c r₁` and `lhs₂ := union c r₂`,\n`lhs = rhs` where `lhs := union r₂ rhs₁` and `rhs := union r₁ rhs₂`\n","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac","kind":"theorem","line":488,"name":"Lean.Grind.AC.superpose_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L488-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_ac_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r₁ </span><span class=\"fn\">c </span><span class=\"fn\">r₂ </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_ac_cert","kind":"def","line":482,"name":"Lean.Grind.AC.superpose_ac_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L482-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_rhs_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert\">simp_ac_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_ac","kind":"theorem","line":478,"name":"Lean.Grind.AC.diseq_simp_rhs_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L478-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_lhs_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert\">simp_ac_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_ac","kind":"theorem","line":474,"name":"Lean.Grind.AC.diseq_simp_lhs_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L474-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_rhs_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert\">simp_ac_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_ac","kind":"theorem","line":470,"name":"Lean.Grind.AC.eq_simp_rhs_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L470-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_lhs_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert\">simp_ac_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_ac","kind":"theorem","line":466,"name":"Lean.Grind.AC.eq_simp_lhs_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L466-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">simp_ac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert\">simp_ac_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">s</span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s'</span></span></span></span></div></div>","info":{"doc":"Given `lhs = rhs`, and a term `s := union a lhs`, rewrite it to `s' := union a rhs`\n","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac","kind":"theorem","line":459,"name":"Lean.Grind.AC.simp_ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L459-L464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">simp_ac_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.simp_ac_cert","kind":"def","line":455,"name":"Lean.Grind.AC.simp_ac_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L455-L457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_union\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union\">union</a></span> <span class=\"fn\">s₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₁</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_union","kind":"theorem","line":449,"name":"Lean.Grind.AC.Seq.denote_union","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L449-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union_k_eq_union\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">union_k_eq_union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union_k\">union_k</a></span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union\">union</a></span> <span class=\"fn\">s₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union_k_eq_union","kind":"theorem","line":444,"name":"Lean.Grind.AC.Seq.union_k_eq_union","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L444-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">union_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union_k","kind":"def","line":441,"name":"Lean.Grind.AC.Seq.union_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L441-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.union","kind":"def","line":438,"name":"Lean.Grind.AC.Seq.union","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L438-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.hugeFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">hugeFuel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.hugeFuel","kind":"def","line":436,"name":"Lean.Grind.AC.hugeFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_unionFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_unionFuel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel\">unionFuel</a> <span class=\"fn\">fuel</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₁</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_unionFuel","kind":"theorem","line":420,"name":"Lean.Grind.AC.Seq.denote_unionFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L420-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel_k_eq_unionFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">unionFuel_k_eq_unionFuel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel_k\">unionFuel_k</a> <span class=\"fn\">fuel</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel\">unionFuel</a> <span class=\"fn\">fuel</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel_k_eq_unionFuel","kind":"theorem","line":412,"name":"Lean.Grind.AC.Seq.unionFuel_k_eq_unionFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L412-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">unionFuel_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel_k","kind":"def","line":404,"name":"Lean.Grind.AC.Seq.unionFuel_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L404-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">unionFuel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.unionFuel","kind":"def","line":389,"name":"Lean.Grind.AC.Seq.unionFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L389-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">c </span><span class=\"fn\">s </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_cert\">superpose_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></span></div></div>","info":{"doc":"Given `lhs₁ = rhs₁` and `lhs₂ = rhs₂` where `lhs₁ := p * c` and `lhs₂ := c * s`,\n`lhs = rhs` where `lhs := rhs₁ * s` and `rhs := p * rhs₂`\n","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose","kind":"theorem","line":379,"name":"Lean.Grind.AC.superpose","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L379-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.superpose_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">superpose_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">c </span><span class=\"fn\">s </span><span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.superpose_cert","kind":"def","line":373,"name":"Lean.Grind.AC.superpose_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L373-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_rhs_middle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_middle_cert\">simp_middle_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">tail</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_middle","kind":"theorem","line":369,"name":"Lean.Grind.AC.diseq_simp_rhs_middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L369-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_lhs_middle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_middle_cert\">simp_middle_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">tail</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_middle","kind":"theorem","line":365,"name":"Lean.Grind.AC.diseq_simp_lhs_middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L365-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_rhs_middle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_middle_cert\">simp_middle_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">tail</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_middle","kind":"theorem","line":361,"name":"Lean.Grind.AC.eq_simp_rhs_middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L361-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_lhs_middle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_middle_cert\">simp_middle_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">tail</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_middle","kind":"theorem","line":357,"name":"Lean.Grind.AC.eq_simp_lhs_middle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L357-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_middle_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">simp_middle_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">head </span><span class=\"fn\">tail </span><span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.simp_middle_cert","kind":"def","line":354,"name":"Lean.Grind.AC.simp_middle_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L354-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_rhs_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_suffix_cert\">simp_suffix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_suffix","kind":"theorem","line":350,"name":"Lean.Grind.AC.diseq_simp_rhs_suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L350-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_lhs_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_suffix_cert\">simp_suffix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_suffix","kind":"theorem","line":346,"name":"Lean.Grind.AC.diseq_simp_lhs_suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L346-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_rhs_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_suffix_cert\">simp_suffix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_suffix","kind":"theorem","line":342,"name":"Lean.Grind.AC.eq_simp_rhs_suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L342-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_lhs_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">head </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_suffix_cert\">simp_suffix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">head</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_suffix","kind":"theorem","line":338,"name":"Lean.Grind.AC.eq_simp_lhs_suffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L338-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_suffix_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">simp_suffix_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">head </span><span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.simp_suffix_cert","kind":"def","line":335,"name":"Lean.Grind.AC.simp_suffix_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L335-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_rhs_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_prefix_cert\">simp_prefix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">tail</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_prefix","kind":"theorem","line":331,"name":"Lean.Grind.AC.diseq_simp_rhs_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L331-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_lhs_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_prefix_cert\">simp_prefix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">tail</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_prefix","kind":"theorem","line":327,"name":"Lean.Grind.AC.diseq_simp_lhs_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L327-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_rhs_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">rhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_prefix_cert\">simp_prefix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">tail</span> <span class=\"fn\">rhs₂</span> <span class=\"fn\">rhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂'</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_prefix","kind":"theorem","line":323,"name":"Lean.Grind.AC.eq_simp_rhs_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L323-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_lhs_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">tail </span><span class=\"fn\">lhs₂ </span><span class=\"fn\">rhs₂ </span><span class=\"fn\">lhs₂'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_prefix_cert\">simp_prefix_cert</a> <span class=\"fn\">lhs₁</span> <span class=\"fn\">rhs₁</span> <span class=\"fn\">tail</span> <span class=\"fn\">lhs₂</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_prefix","kind":"theorem","line":319,"name":"Lean.Grind.AC.eq_simp_lhs_prefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L319-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.simp_prefix_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">simp_prefix_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">tail </span><span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.simp_prefix_cert","kind":"def","line":316,"name":"Lean.Grind.AC.simp_prefix_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L316-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_rhs_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_rhs_exact","kind":"theorem","line":312,"name":"Lean.Grind.AC.diseq_simp_rhs_exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L312-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">diseq_simp_lhs_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.diseq_simp_lhs_exact","kind":"theorem","line":308,"name":"Lean.Grind.AC.diseq_simp_lhs_exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L308-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_rhs_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">lhs₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_rhs_exact","kind":"theorem","line":304,"name":"Lean.Grind.AC.eq_simp_rhs_exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L304-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_simp_lhs_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs₁ </span><span class=\"fn\">rhs₁ </span><span class=\"fn\">rhs₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_simp_lhs_exact","kind":"theorem","line":300,"name":"Lean.Grind.AC.eq_simp_lhs_exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L300-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.eq_orient\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">eq_orient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.eq_orient","kind":"theorem","line":296,"name":"Lean.Grind.AC.eq_orient","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L296-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat\">concat</a></span> <span class=\"fn\">s₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₁</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_concat","kind":"theorem","line":290,"name":"Lean.Grind.AC.Seq.denote_concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L290-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k_eq_concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">concat_k_eq_concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k\">concat_k</a></span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat\">concat</a></span> <span class=\"fn\">s₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k_eq_concat","kind":"theorem","line":284,"name":"Lean.Grind.AC.Seq.concat_k_eq_concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L284-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">concat_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat_k","kind":"def","line":281,"name":"Lean.Grind.AC.Seq.concat_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L281-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.concat","kind":"def","line":275,"name":"Lean.Grind.AC.Seq.concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L275-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_eraseDup\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_eraseDup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup\">eraseDup</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_eraseDup","kind":"theorem","line":267,"name":"Lean.Grind.AC.Seq.denote_eraseDup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L267-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k_eq_eraseDup\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">eraseDup_k_eq_eraseDup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k\">eraseDup_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup\">eraseDup</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k_eq_eraseDup","kind":"theorem","line":259,"name":"Lean.Grind.AC.Seq.eraseDup_k_eq_eraseDup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L259-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">eraseDup_k_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k\">eraseDup_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.rec\">rec</a> <span class=\"fn\">(fun (<span class=\"fn\">y</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.rec\">Bool.rec</a> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">y</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat.beq\">Nat.beq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span>)</span>\n    <span class=\"fn\">(fun (<span class=\"fn\">y</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>) (<span class=\"fn\">s'</span> <span class=\"fn\">x_1</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.rec\">Bool.rec</a> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">y</span> <span class=\"fn\">s'</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">y</span> <span class=\"fn\">s'</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat.beq\">Nat.beq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k\">eraseDup_k</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k_cons","kind":"theorem","line":250,"name":"Lean.Grind.AC.Seq.eraseDup_k_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L250-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">eraseDup_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup_k","kind":"def","line":243,"name":"Lean.Grind.AC.Seq.eraseDup_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L243-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">eraseDup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.eraseDup","kind":"def","line":233,"name":"Lean.Grind.AC.Seq.eraseDup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L233-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_sort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort\">sort</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_sort","kind":"theorem","line":226,"name":"Lean.Grind.AC.Seq.denote_sort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L226-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort_k_eq_sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sort_k_eq_sort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort_k\">sort_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort\">sort</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort_k_eq_sort","kind":"theorem","line":221,"name":"Lean.Grind.AC.Seq.sort_k_eq_sort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L221-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sort_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort_k","kind":"def","line":218,"name":"Lean.Grind.AC.Seq.sort_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L218-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort","kind":"def","line":212,"name":"Lean.Grind.AC.Seq.sort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L212-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_sort'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_sort'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'\">sort'</a></span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_sort'","kind":"theorem","line":203,"name":"Lean.Grind.AC.Seq.denote_sort'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L203-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'_k_eq_sort'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sort'_k_eq_sort'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'_k\">sort'_k</a></span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'\">sort'</a></span> <span class=\"fn\">acc</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'_k_eq_sort'","kind":"theorem","line":197,"name":"Lean.Grind.AC.Seq.sort'_k_eq_sort'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L197-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sort'_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'_k","kind":"def","line":194,"name":"Lean.Grind.AC.Seq.sort'_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L194-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sort'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.sort'","kind":"def","line":188,"name":"Lean.Grind.AC.Seq.sort'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L188-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₁</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst₂</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_insert","kind":"theorem","line":178,"name":"Lean.Grind.AC.Seq.denote_insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L178-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert_k_eq_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">insert_k_eq_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert_k\">insert_k</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert_k_eq_insert","kind":"theorem","line":172,"name":"Lean.Grind.AC.Seq.insert_k_eq_insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L172-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">insert_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert_k","kind":"def","line":166,"name":"Lean.Grind.AC.Seq.insert_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L166-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.insert","kind":"def","line":160,"name":"Lean.Grind.AC.Seq.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L160-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_erase0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">0</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0\">erase0</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_erase0","kind":"theorem","line":152,"name":"Lean.Grind.AC.Seq.denote_erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L152-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k_eq_erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">erase0_k_eq_erase0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\">erase0_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0\">erase0</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k_eq_erase0","kind":"theorem","line":138,"name":"Lean.Grind.AC.Seq.erase0_k_eq_erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L138-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">erase0_k_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\">erase0_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.rec\">Bool.rec</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Bool.rec\">Bool.rec</a> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\">erase0_k</a></span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\">erase0_k</a></span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">0</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\">erase0_k</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat.beq\">Nat.beq</a> <span class=\"fn\">x</span> <span class=\"fn\">0</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k_cons","kind":"theorem","line":132,"name":"Lean.Grind.AC.Seq.erase0_k_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L132-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k_var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">erase0_k_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\">erase0_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k_var","kind":"theorem","line":128,"name":"Lean.Grind.AC.Seq.erase0_k_var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L128-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">erase0_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0_k","kind":"def","line":125,"name":"Lean.Grind.AC.Seq.erase0_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">erase0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.erase0","kind":"def","line":112,"name":"Lean.Grind.AC.Seq.erase0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L112-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_toSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>), <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\">toSeq</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_toSeq","kind":"theorem","line":104,"name":"Lean.Grind.AC.Expr.denote_toSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L104-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_toSeq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toSeq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span></span>} (<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>) (<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>),\n  <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'\">toSeq'</a></span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">Seq.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_toSeq'","kind":"theorem","line":96,"name":"Lean.Grind.AC.Expr.denote_toSeq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L96-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq_k_eq_toSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toSeq_k_eq_toSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq_k\">toSeq_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\">toSeq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq_k_eq_toSeq","kind":"theorem","line":89,"name":"Lean.Grind.AC.Expr.toSeq_k_eq_toSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L89-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toSeq_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq_k","kind":"def","line":86,"name":"Lean.Grind.AC.Expr.toSeq_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L86-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq","kind":"def","line":80,"name":"Lean.Grind.AC.Expr.toSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L80-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'_k_eq_toSeq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toSeq'_k_eq_toSeq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'_k\">toSeq'_k</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'\">toSeq'</a></span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'_k_eq_toSeq'","kind":"theorem","line":75,"name":"Lean.Grind.AC.Expr.toSeq'_k_eq_toSeq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L75-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toSeq'_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'_k","kind":"def","line":72,"name":"Lean.Grind.AC.Expr.toSeq'_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toSeq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.toSeq'","kind":"def","line":66,"name":"Lean.Grind.AC.Expr.toSeq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_op\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_op","kind":"theorem","line":62,"name":"Lean.Grind.AC.Seq.denote_op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote_var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\">var</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote_var","kind":"theorem","line":61,"name":"Lean.Grind.AC.Seq.denote_var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.denote","kind":"def","line":58,"name":"Lean.Grind.AC.Seq.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">beq'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\">beq'</a></span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'_eq","kind":"theorem","line":50,"name":"Lean.Grind.AC.Seq.beq'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">beq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.beq'","kind":"def","line":44,"name":"Lean.Grind.AC.Seq.beq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L44-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instLawfulBEqSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instLawfulBEqSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instLawfulBEqSeq","kind":"instance","line":41,"name":"Lean.Grind.AC.instLawfulBEqSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instReflBEqSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReflBEqSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ReflBEq\">ReflBEq</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instReflBEqSeq","kind":"instance","line":41,"name":"Lean.Grind.AC.instReflBEqSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instBEqSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instBEqSeq","kind":"instance","line":41,"name":"Lean.Grind.AC.instBEqSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instBEqSeq.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqSeq</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instBEqSeq.beq","kind":"def","line":41,"name":"Lean.Grind.AC.instBEqSeq.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instReprSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instReprSeq","kind":"instance","line":41,"name":"Lean.Grind.AC.instReprSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instReprSeq.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprSeq</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instReprSeq.repr","kind":"def","line":41,"name":"Lean.Grind.AC.instReprSeq.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedSeq","kind":"instance","line":41,"name":"Lean.Grind.AC.instInhabitedSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedSeq.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedSeq</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedSeq.default","kind":"def","line":41,"name":"Lean.Grind.AC.instInhabitedSeq.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.cons","kind":"ctor","line":40,"name":"Lean.Grind.AC.Seq.cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq.var","kind":"ctor","line":39,"name":"Lean.Grind.AC.Seq.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Seq","kind":"inductive","line":38,"name":"Lean.Grind.AC.Seq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L38-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_op\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.op\">op</a></span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_op","kind":"theorem","line":34,"name":"Lean.Grind.AC.Expr.denote_op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.var\">var</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote_var","kind":"theorem","line":33,"name":"Lean.Grind.AC.Expr.denote_var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.denote","kind":"def","line":30,"name":"Lean.Grind.AC.Expr.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Var.denote","kind":"def","line":27,"name":"Lean.Grind.AC.Var.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instBEqExpr.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqExpr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a> → <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instBEqExpr.beq","kind":"def","line":25,"name":"Lean.Grind.AC.instBEqExpr.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instBEqExpr","kind":"instance","line":25,"name":"Lean.Grind.AC.instBEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instReprExpr.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprExpr</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instReprExpr.repr","kind":"def","line":25,"name":"Lean.Grind.AC.instReprExpr.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instReprExpr","kind":"instance","line":25,"name":"Lean.Grind.AC.instReprExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedExpr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedExpr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedExpr.default","kind":"def","line":25,"name":"Lean.Grind.AC.instInhabitedExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.instInhabitedExpr","kind":"instance","line":25,"name":"Lean.Grind.AC.instInhabitedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.op","kind":"ctor","line":24,"name":"Lean.Grind.AC.Expr.op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr.var","kind":"ctor","line":23,"name":"Lean.Grind.AC.Expr.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Expr","kind":"inductive","line":22,"name":"Lean.Grind.AC.Expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L22-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Context.op","kind":"def","line":20,"name":"Lean.Grind.AC.Context.op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Context.vars","kind":"def","line":19,"name":"Lean.Grind.AC.Context.vars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\">Context</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Context.mk","kind":"ctor","line":18,"name":"Lean.Grind.AC.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Context","kind":"structure","line":18,"name":"Lean.Grind.AC.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L18-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/AC.html#Lean.Grind.AC.Var","kind":"def","line":16,"name":"Lean.Grind.AC.Var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/AC.lean#L16-L16"}}],"imports":["Init.Data.Nat.Lemmas","Init.Data.Bool","Init.LawfulBEqTactics"],"instances":[{"className":"Inhabited","name":"Lean.Grind.AC.instInhabitedExpr","typeNames":["Lean.Grind.AC.Expr"]},{"className":"Repr","name":"Lean.Grind.AC.instReprExpr","typeNames":["Lean.Grind.AC.Expr"]},{"className":"BEq","name":"Lean.Grind.AC.instBEqExpr","typeNames":["Lean.Grind.AC.Expr"]},{"className":"Inhabited","name":"Lean.Grind.AC.instInhabitedSeq","typeNames":["Lean.Grind.AC.Seq"]},{"className":"Repr","name":"Lean.Grind.AC.instReprSeq","typeNames":["Lean.Grind.AC.Seq"]},{"className":"BEq","name":"Lean.Grind.AC.instBEqSeq","typeNames":["Lean.Grind.AC.Seq"]},{"className":"ReflBEq","name":"Lean.Grind.AC.instReflBEqSeq","typeNames":["Lean.Grind.AC.Seq"]},{"className":"LawfulBEq","name":"Lean.Grind.AC.instLawfulBEqSeq","typeNames":["Lean.Grind.AC.Seq"]}],"name":"Init.Grind.AC"}