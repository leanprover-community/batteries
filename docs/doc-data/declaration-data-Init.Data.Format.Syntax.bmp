{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToStringTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToStringTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToStringTSyntax","kind":"instance","line":60,"name":"Lean.Syntax.instToStringTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Syntax.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormatTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToFormatTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Std.ToFormat</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormatTSyntax","kind":"instance","line":59,"name":"Lean.Syntax.instToFormatTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Syntax.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToString","kind":"instance","line":57,"name":"Lean.Syntax.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Syntax.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instToFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Std.ToFormat</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.instToFormat","kind":"instance","line":56,"name":"Lean.Syntax.instToFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Syntax.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">formatStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxDepth</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">showInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></div></div>","info":{"doc":"Pretty print the given syntax `stx` as a `Format`.\nNodes deeper than `maxDepth` are omitted.\nSetting the `showInfo` flag will also print the `SourceInfo` for each node. ","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStx","kind":"def","line":50,"name":"Lean.Syntax.formatStx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Syntax.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStxAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">formatStxAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxDepth</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">showInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> â†’ <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Syntax.html#Lean.Syntax.formatStxAux","kind":"opaque","line":28,"name":"Lean.Syntax.formatStxAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Syntax.lean#L28-L48"}}],"imports":["Init.Data.Format.Macro","Init.Data.Format.Instances","Init.Meta","Init.Data.ToString.Name"],"instances":[{"className":"Std.ToFormat","name":"Lean.Syntax.instToFormat","typeNames":["Lean.Syntax"]},{"className":"ToString","name":"Lean.Syntax.instToString","typeNames":["Lean.Syntax"]},{"className":"Std.ToFormat","name":"Lean.Syntax.instToFormatTSyntax","typeNames":["Lean.TSyntax"]},{"className":"ToString","name":"Lean.Syntax.instToStringTSyntax","typeNames":["Lean.TSyntax"]}],"name":"Init.Data.Format.Syntax"}