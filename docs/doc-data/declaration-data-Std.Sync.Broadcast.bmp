{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.instForInOfInhabitedOfMonadLiftTBaseIO\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">instForInOfInhabitedOfMonadLiftTBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver\">Receiver</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. ","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.instForInOfInhabitedOfMonadLiftTBaseIO","kind":"instance","line":635,"name":"Std.Broadcast.Sync.Receiver.instForInOfInhabitedOfMonadLiftTBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L635-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.forIn","kind":"opaque","line":625,"name":"Std.Broadcast.Sync.Receiver.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L625-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.recv\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Receive a value from the channel, blocking until the transmission could be completed.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.recv","kind":"def","line":619,"name":"Std.Broadcast.Sync.Receiver.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L619-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Try to receive a value from the broadcast receiver, if a message is available right away\nreturn `some value`, otherwise return `none` without blocking.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver.tryRecv","kind":"def","line":616,"name":"Std.Broadcast.Sync.Receiver.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L616-L617"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.send\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Send a value through the channel, blocking until the transmission could be completed.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.send","kind":"def","line":607,"name":"Std.Broadcast.Sync.send","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L607-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Try to send a value to the broadcast channel, if this can be completed right away without blocking return\n`true`, otherwise don't send the value and return `false`.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.trySend","kind":"def","line":603,"name":"Std.Broadcast.Sync.trySend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L603-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.new\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">capacity</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync\">Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a new broadcast channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.new","kind":"def","line":599,"name":"Std.Broadcast.Sync.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L599-L601"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span>.<span class=\"name\">Receiver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A receiver for a `Broadcast` channel that can asynchronously receive messages.\nEach receiver gets a copy of every message sent to the broadcast channel after\nthe receiver was created. Multiple receivers can exist for the same broadcast,\nand each will receive all messages independently.\n\nIt's the sync version of `Broadcast.Receiver`.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync.Receiver","kind":"def","line":587,"name":"Std.Broadcast.Sync.Receiver","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L587-L595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Sync\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multi-subscriber broadcast that delivers each message to all current subscribers.\nSupports only bounded buffering and an asynchronous API.\n\nIt's the sync version of `Broadcast`.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Sync","kind":"def","line":579,"name":"Std.Broadcast.Sync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L579-L585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.instAsyncWriteOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">instAsyncWriteOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncWrite\">Internal.Async.IO.AsyncWrite</a> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast\">Broadcast</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.instAsyncWriteOfInhabited","kind":"instance","line":572,"name":"Std.Broadcast.Receiver.instAsyncWriteOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L572-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.instAsyncReadOptionOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">instAsyncReadOptionOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncRead\">Internal.Async.IO.AsyncRead</a> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.instAsyncReadOptionOfInhabited","kind":"instance","line":569,"name":"Std.Broadcast.Receiver.instAsyncReadOptionOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L569-L570"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.instAsyncStreamOptionOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">instAsyncStreamOptionOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncStream\">Internal.Async.IO.AsyncStream</a> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.instAsyncStreamOptionOfInhabited","kind":"instance","line":565,"name":"Std.Broadcast.Receiver.instAsyncStreamOptionOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L565-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.forAsync\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">forAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"`ch.forAsync f` calls `f` for every message received on `ch`.\n\nNote that if this function is called twice, each message will only arrive at exactly one invocation.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.forAsync","kind":"def","line":556,"name":"Std.Broadcast.Receiver.forAsync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L556-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.unsubscribe\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">unsubscribe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Unsubscribes a `Receiver` from the `Broadcast` channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.unsubscribe","kind":"def","line":549,"name":"Std.Broadcast.Receiver.unsubscribe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L549-L554"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.recvSelector\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">recvSelector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a `Selector` that resolves once the broadcast channel `ch` has data available and provides that that data.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.recvSelector","kind":"def","line":542,"name":"Std.Broadcast.Receiver.recvSelector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L542-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.recv\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"Receive a value from the broadcast receiver, returning a task that will resolve with\nthe next available message. This will block until a message is available.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.recv","kind":"def","line":532,"name":"Std.Broadcast.Receiver.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L532-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Try to receive a value from the broadcast receiver, if a message is available right away\nreturn `some value`, otherwise return `none` without blocking.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver.tryRecv","kind":"def","line":524,"name":"Std.Broadcast.Receiver.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L524-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.send\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast\">Broadcast</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span></div></div>","info":{"doc":"Send a value through the broadcast channel, returning a task that will resolve once the transmission\ncould be completed.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.send","kind":"def","line":511,"name":"Std.Broadcast.send","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L511-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.close\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast\">Broadcast</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Closes a `Broadcast` channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.close","kind":"def","line":504,"name":"Std.Broadcast.close","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L504-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.subscribe\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">subscribe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast\">Broadcast</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\">Receiver</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Subscribes a new `Receiver` from the `Broadcast` channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.subscribe","kind":"def","line":497,"name":"Std.Broadcast.subscribe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L497-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast\">Broadcast</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Try to send a value to the broadcast channel, if this can be completed right away without blocking return\n`true`, otherwise don't send the value and return `false`.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.trySend","kind":"def","line":489,"name":"Std.Broadcast.trySend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L489-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.new\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">capacity</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Broadcast.html#Std.Broadcast\">Broadcast</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a new broadcast channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.new","kind":"def","line":482,"name":"Std.Broadcast.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L482-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Receiver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A receiver for a `Broadcast` channel that can asynchronously receive messages.\nEach receiver gets a copy of every message sent to the broadcast channel after\nthe receiver was created. Multiple receivers can exist for the same broadcast,\nand each will receive all messages independently.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Receiver","kind":"structure","line":470,"name":"Std.Broadcast.Receiver","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L470-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multi-subscriber broadcast that delivers each message to all current subscribers.\nSupports only bounded buffering and an asynchronous API; to switch into\nsynchronous mode use `Broadcast.sync`.\n\nUnlike `Std.Channel`, each message is received by **every** subscriber instead of just one.\nSubscribers only receive messages sent after they have subscribed (unless otherwise specified).\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast","kind":"structure","line":458,"name":"Std.Broadcast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L458-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.instMonadLiftBroadcastIO\"><span class=\"name\">Std</span>.<span class=\"name\">instMonadLiftBroadcastIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Broadcast.Error</a>)</span> <a href=\"./Init/System/IO.html#IO\">IO</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.instMonadLiftBroadcastIO","kind":"instance","line":58,"name":"Std.instMonadLiftBroadcastIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.instToStringBroadcastError\"><span class=\"name\">Std</span>.<span class=\"name\">instToStringBroadcastError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Broadcast.Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.instToStringBroadcastError","kind":"instance","line":52,"name":"Std.instToStringBroadcastError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L52-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.instHashableError.hash\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">instHashableError</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.instHashableError.hash","kind":"def","line":50,"name":"Std.Broadcast.instHashableError.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.instHashableError\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">instHashableError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.instHashableError","kind":"instance","line":50,"name":"Std.Broadcast.instHashableError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.instDecidableEqError\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">instDecidableEqError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.instDecidableEqError","kind":"instance","line":50,"name":"Std.Broadcast.instDecidableEqError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.instReprError.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">instReprError</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.instReprError.repr","kind":"def","line":50,"name":"Std.Broadcast.instReprError.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.instReprError\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">instReprError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.instReprError","kind":"instance","line":50,"name":"Std.Broadcast.instReprError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error.notSubscribed\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Error</span>.<span class=\"name\">notSubscribed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a></div></div>","info":{"doc":"Tried to unsubscribe a channel that already is not part of it.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Error.notSubscribed","kind":"ctor","line":45,"name":"Std.Broadcast.Error.notSubscribed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L45-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error.alreadyClosed\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Error</span>.<span class=\"name\">alreadyClosed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a></div></div>","info":{"doc":"Tried to close an already closed broadcast channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Error.alreadyClosed","kind":"ctor","line":40,"name":"Std.Broadcast.Error.alreadyClosed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error.closed\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Error</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\">Error</a></div></div>","info":{"doc":"Tried to send to a closed broadcast channel.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Error.closed","kind":"ctor","line":35,"name":"Std.Broadcast.Error.closed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Broadcast.html#Std.Broadcast.Error\"><span class=\"name\">Std</span>.<span class=\"name\">Broadcast</span>.<span class=\"name\">Error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Errors that may be thrown while interacting with the broadcast channel API.\n","docLink":"./Std/Sync/Broadcast.html#Std.Broadcast.Error","kind":"inductive","line":31,"name":"Std.Broadcast.Error","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Broadcast.lean#L31-L50"}}],"imports":["Std.Data","Init.Data.Queue","Init.Data.Vector","Std.Sync.Mutex","Std.Internal.Async.IO"],"instances":[{"className":"Repr","name":"Std.Broadcast.instReprError","typeNames":["Std.Broadcast.Error"]},{"className":"Decidable","name":"Std.Broadcast.instDecidableEqError","typeNames":["Eq"]},{"className":"Hashable","name":"Std.Broadcast.instHashableError","typeNames":["Std.Broadcast.Error"]},{"className":"ToString","name":"Std.instToStringBroadcastError","typeNames":["Std.Broadcast.Error"]},{"className":"MonadLift","name":"Std.instMonadLiftBroadcastIO","typeNames":["EIO","IO"]},{"className":"Std.Internal.Async.IO.AsyncStream","name":"Std.Broadcast.Receiver.instAsyncStreamOptionOfInhabited","typeNames":["Std.Broadcast.Receiver","Option"]},{"className":"Std.Internal.Async.IO.AsyncRead","name":"Std.Broadcast.Receiver.instAsyncReadOptionOfInhabited","typeNames":["Std.Broadcast.Receiver","Option"]},{"className":"Std.Internal.Async.IO.AsyncWrite","name":"Std.Broadcast.Receiver.instAsyncWriteOfInhabited","typeNames":["Std.Broadcast"]},{"className":"ForIn","name":"Std.Broadcast.Sync.Receiver.instForInOfInhabitedOfMonadLiftTBaseIO","typeNames":["Std.Broadcast.Sync.Receiver"]}],"name":"Std.Sync.Broadcast"}