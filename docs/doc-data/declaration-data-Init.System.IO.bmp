{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#Runtime.forget\"><span class=\"name\">Runtime</span>.<span class=\"name\">forget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Discards the passed owned reference. This leads to `a` any any object reachable from it never being\nfreed. This can be a useful optimization for eliding deallocation time of big object graphs that are\nkept alive close to the end of the process anyway (in which case calling `Runtime.markPersistent`\nwould be similarly costly to deallocation). It is still considered a safe operation as it cannot\nlead to undefined behavior.\n","docLink":"./Init/System/IO.html#Runtime.forget","kind":"def","line":1817,"name":"Runtime.forget","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1817-L1825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#Runtime.markPersistent\"><span class=\"name\">Runtime</span>.<span class=\"name\">markPersistent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Marks given value and its object graph closure as persistent. This will remove\nreference counter updates but prevent the closure from being deallocated until\nthe end of the process! It can still be useful to do eagerly when the value\nwill be marked persistent later anyway and there is available time budget to\nmark it now or it would be unnecessarily marked multi-threaded in between.\n\nThis function is only safe to use on objects (in the full closure) which are\nnot used concurrently or which are already persistent.\n","docLink":"./Init/System/IO.html#Runtime.markPersistent","kind":"def","line":1803,"name":"Runtime.markPersistent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1803-L1814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#Runtime.markMultiThreaded\"><span class=\"name\">Runtime</span>.<span class=\"name\">markMultiThreaded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Marks given value and its object graph closure as multi-threaded if currently\nmarked single-threaded. This will make reference counter updates atomic and\nthus more costly. It can still be useful to do eagerly when the value will be\nshared between threads later anyway and there is available time budget to mark\nit now. ","docLink":"./Init/System/IO.html#Runtime.markMultiThreaded","kind":"def","line":1794,"name":"Runtime.markMultiThreaded","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1794-L1801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#termPrintln!__\"><span class=\"name\">termPrintln!__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#termPrintln!__","kind":"def","line":1788,"name":"termPrintln!__","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1788-L1788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.withIsolatedStreams\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">withIsolatedStreams</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isolateStderr</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></div></div>","info":{"doc":"Runs an action with `stdin` emptied and `stdout` and `stderr` captured into a `String`. If\n`isolateStderr` is `false`, only `stdout` is captured.\n","docLink":"./Init/System/IO.html#IO.FS.withIsolatedStreams","kind":"def","line":1769,"name":"IO.FS.withIsolatedStreams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1769-L1783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.lines\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">lines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>","info":{"doc":"Reads the entire remaining contents of the stream as a UTF-8-encoded array of lines.\n\nNewline markers are not included in the lines.\n\nThe underlying stream is not automatically closed, and subsequent reads from the stream may block\nand/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.lines","kind":"def","line":1746,"name":"IO.FS.Stream.lines","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1746-L1765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.readToEnd\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">readToEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Reads the entire remaining contents of the stream as a UTF-8-encoded string. An exception is\nthrown if the contents are not valid UTF-8.\n\nThe underlying stream is not automatically closed, and subsequent reads from the stream may block\nand/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.readToEnd","kind":"def","line":1733,"name":"IO.FS.Stream.readToEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1733-L1744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.readBinToEnd\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">readBinToEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads the entire remaining contents of the stream until an end-of-file marker (EOF) is\nencountered.\n\nThe underlying stream is not automatically closed upon encountering an EOF, and subsequent reads from\nthe stream may block and/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.readBinToEnd","kind":"def","line":1723,"name":"IO.FS.Stream.readBinToEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1723-L1731"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.readBinToEndInto\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">readBinToEndInto</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">buf</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads the entire remaining contents of the stream until an end-of-file marker (EOF) is\nencountered.\n\nThe underlying stream is not automatically closed upon encountering an EOF, and subsequent reads from\nthe stream may block and/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.readBinToEndInto","kind":"def","line":1707,"name":"IO.FS.Stream.readBinToEndInto","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1707-L1721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.ofBuffer\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">ofBuffer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">Ref</a> <a href=\"./Init/System/IO.html#IO.FS.Stream.Buffer\">Buffer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a></div></div>","info":{"doc":"Creates a stream from a mutable reference to a buffer.\n\nThe resulting stream simulates a file, mutating the contents of the reference in response to writes\nand reading from it in response to reads. These streams can be used with `IO.withStdin`,\n`IO.setStdin`, and the corresponding operators for standard output and standard error to redirect\ninput and output.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.ofBuffer","kind":"def","line":1676,"name":"IO.FS.Stream.ofBuffer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1676-L1705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.Buffer.pos\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">Buffer</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream.Buffer\">Buffer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The read/write cursor's position in the buffer. ","docLink":"./Init/System/IO.html#IO.FS.Stream.Buffer.pos","kind":"def","line":1674,"name":"IO.FS.Stream.Buffer.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1674-L1674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.Buffer.data\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">Buffer</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream.Buffer\">Buffer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"The contents of the buffer. ","docLink":"./Init/System/IO.html#IO.FS.Stream.Buffer.data","kind":"def","line":1672,"name":"IO.FS.Stream.Buffer.data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1672-L1672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.Buffer.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">Buffer</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Stream.Buffer\">Buffer</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.Stream.Buffer.mk","kind":"ctor","line":1670,"name":"IO.FS.Stream.Buffer.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1670-L1670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.Buffer\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">Buffer</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A byte buffer that can simulate a file in memory.\n\nUse `IO.FS.Stream.ofBuffer` to create a stream from a buffer.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.Buffer","kind":"structure","line":1665,"name":"IO.FS.Stream.Buffer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1665-L1674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.ofHandle\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">ofHandle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a></div></div>","info":{"doc":"Creates a Lean stream from a file handle. Each stream operation is implemented by the corresponding\nfile handle operation.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.ofHandle","kind":"def","line":1652,"name":"IO.FS.Stream.ofHandle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1652-L1663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.CancelToken.isSet\"><span class=\"name\">IO</span>.<span class=\"name\">CancelToken</span>.<span class=\"name\">isSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <a href=\"./Init/System/IO.html#IO.CancelToken\">CancelToken</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the cancellation token has been activated. ","docLink":"./Init/System/IO.html#IO.CancelToken.isSet","kind":"def","line":1639,"name":"IO.CancelToken.isSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1639-L1641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.CancelToken.set\"><span class=\"name\">IO</span>.<span class=\"name\">CancelToken</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <a href=\"./Init/System/IO.html#IO.CancelToken\">CancelToken</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Activates a cancellation token. Idempotent. ","docLink":"./Init/System/IO.html#IO.CancelToken.set","kind":"def","line":1635,"name":"IO.CancelToken.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1635-L1637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.CancelToken.new\"><span class=\"name\">IO</span>.<span class=\"name\">CancelToken</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">CancelToken</a></span></div></div>","info":{"doc":"Creates a new cancellation token. ","docLink":"./Init/System/IO.html#IO.CancelToken.new","kind":"def","line":1631,"name":"IO.CancelToken.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1631-L1633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instNonemptyCancelToken\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyCancelToken</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">CancelToken</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instNonemptyCancelToken","kind":"instance","line":1627,"name":"IO.instNonemptyCancelToken","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1627-L1627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.CancelToken\"><span class=\"name\">IO</span>.<span class=\"name\">CancelToken</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Mutable cell that can be passed around for purposes of cooperative task cancellation: request\ncancellation with `CancelToken.set` and check for it with `CancelToken.isSet`.\n\nThis is a more flexible alternative to `Task.cancel` as the token can be shared between multiple\ntasks.\n","docLink":"./Init/System/IO.html#IO.CancelToken","kind":"structure","line":1618,"name":"IO.CancelToken","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1618-L1627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.mkRef\"><span class=\"name\">IO</span>.<span class=\"name\">mkRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">Ref</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a new mutable reference cell that contains `a`.\n","docLink":"./Init/System/IO.html#IO.mkRef","kind":"def","line":1612,"name":"IO.mkRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1612-L1616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instMonadLiftSTRealWorldBaseIO\"><span class=\"name\">IO</span>.<span class=\"name\">instMonadLiftSTRealWorldBaseIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">RealWorld</a>)</span> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instMonadLiftSTRealWorldBaseIO","kind":"instance","line":1610,"name":"IO.instMonadLiftSTRealWorldBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1610-L1610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Ref\"><span class=\"name\">IO</span>.<span class=\"name\">Ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Mutable reference cells that contain values of type `α`. These cells can read from and mutated in\nthe `IO` monad.\n","docLink":"./Init/System/IO.html#IO.Ref","kind":"def","line":1604,"name":"IO.Ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1604-L1608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.setAccessRights\"><span class=\"name\">IO</span>.<span class=\"name\">setAccessRights</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filename</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Init/System/IO.html#IO.FileRight\">FileRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets the POSIX-style permissions for a file.\n","docLink":"./Init/System/IO.html#IO.setAccessRights","kind":"def","line":1598,"name":"IO.setAccessRights","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1598-L1602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Prim.setAccessRights\"><span class=\"name\">IO</span>.<span class=\"name\">Prim</span>.<span class=\"name\">setAccessRights</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filename</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.Prim.setAccessRights","kind":"opaque","line":1596,"name":"IO.Prim.setAccessRights","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1596-L1596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FileRight.flags\"><span class=\"name\">IO</span>.<span class=\"name\">FileRight</span>.<span class=\"name\">flags</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/System/IO.html#IO.FileRight\">FileRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts POSIX-style file permissions to their numeric representation, with three bits each for the\nowner's permissions, the group's permissions, and others' permissions.\n","docLink":"./Init/System/IO.html#IO.FileRight.flags","kind":"def","line":1586,"name":"IO.FileRight.flags","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1586-L1594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FileRight.other\"><span class=\"name\">IO</span>.<span class=\"name\">FileRight</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FileRight\">FileRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a></div></div>","info":{"doc":"The permissions that all others have to access the file. ","docLink":"./Init/System/IO.html#IO.FileRight.other","kind":"def","line":1584,"name":"IO.FileRight.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1584-L1584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FileRight.group\"><span class=\"name\">IO</span>.<span class=\"name\">FileRight</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FileRight\">FileRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a></div></div>","info":{"doc":"The assigned group's permissions to access the file. ","docLink":"./Init/System/IO.html#IO.FileRight.group","kind":"def","line":1582,"name":"IO.FileRight.group","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1582-L1582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FileRight.user\"><span class=\"name\">IO</span>.<span class=\"name\">FileRight</span>.<span class=\"name\">user</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FileRight\">FileRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a></div></div>","info":{"doc":"The owner's permissions to access the file. ","docLink":"./Init/System/IO.html#IO.FileRight.user","kind":"def","line":1580,"name":"IO.FileRight.user","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1580-L1580"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FileRight.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FileRight</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">user </span><span class=\"fn\">group </span><span class=\"fn\">other</span> : <a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FileRight\">FileRight</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FileRight.mk","kind":"ctor","line":1578,"name":"IO.FileRight.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1578-L1578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FileRight\"><span class=\"name\">IO</span>.<span class=\"name\">FileRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"POSIX-style file permissions that describe access rights for a file's owner, members of its\nassigned group, and all others.\n","docLink":"./Init/System/IO.html#IO.FileRight","kind":"structure","line":1574,"name":"IO.FileRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1574-L1584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.AccessRight.flags\"><span class=\"name\">IO</span>.<span class=\"name\">AccessRight</span>.<span class=\"name\">flags</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts individual POSIX-style file permissions to their conventional three-bit representation.\n\nThis is the bitwise `or` of the following:\n* If the file can be read, `0x4`, otherwise `0`.\n* If the file can be written, `0x2`, otherwise `0`.\n* If the file can be executed, `0x1`, otherwise `0`.\n\nExamples:\n* `{read := true : AccessRight}.flags = 4`\n* `{read := true, write := true : AccessRight}.flags = 6`\n* `{read := true, execution := true : AccessRight}.flags = 5`\n","docLink":"./Init/System/IO.html#IO.AccessRight.flags","kind":"def","line":1555,"name":"IO.AccessRight.flags","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1555-L1572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.AccessRight.execution\"><span class=\"name\">IO</span>.<span class=\"name\">AccessRight</span>.<span class=\"name\">execution</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The file can be executed. ","docLink":"./Init/System/IO.html#IO.AccessRight.execution","kind":"def","line":1553,"name":"IO.AccessRight.execution","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1553-L1553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.AccessRight.write\"><span class=\"name\">IO</span>.<span class=\"name\">AccessRight</span>.<span class=\"name\">write</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The file can be written to. ","docLink":"./Init/System/IO.html#IO.AccessRight.write","kind":"def","line":1551,"name":"IO.AccessRight.write","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1551-L1551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.AccessRight.read\"><span class=\"name\">IO</span>.<span class=\"name\">AccessRight</span>.<span class=\"name\">read</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The file can be read. ","docLink":"./Init/System/IO.html#IO.AccessRight.read","kind":"def","line":1549,"name":"IO.AccessRight.read","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1549-L1549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.AccessRight.mk\"><span class=\"name\">IO</span>.<span class=\"name\">AccessRight</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">read </span><span class=\"fn\">write </span><span class=\"fn\">execution</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.AccessRight\">AccessRight</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.AccessRight.mk","kind":"ctor","line":1547,"name":"IO.AccessRight.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1547-L1547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.AccessRight\"><span class=\"name\">IO</span>.<span class=\"name\">AccessRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"POSIX-style file permissions.\n\nThe `FileRight` structure describes these permissions for a file's owner, members of it's designated\ngroup, and all others.\n","docLink":"./Init/System/IO.html#IO.AccessRight","kind":"structure","line":1541,"name":"IO.AccessRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1541-L1553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getTID\"><span class=\"name\">IO</span>.<span class=\"name\">getTID</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Returns the thread ID of the calling thread. ","docLink":"./Init/System/IO.html#IO.getTID","kind":"opaque","line":1538,"name":"IO.getTID","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1538-L1539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.forceExit\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">forceExit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Terminates the current process with the provided exit code. `0` indicates success, all other values\nindicate failure.\n\nCalling this function is equivalent to calling\n[`std::_Exit`](https://en.cppreference.com/w/cpp/utility/program/_Exit.html).\n","docLink":"./Init/System/IO.html#IO.Process.forceExit","kind":"opaque","line":1527,"name":"IO.Process.forceExit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1527-L1534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.exit\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">exit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Terminates the current process with the provided exit code. `0` indicates success, all other values\nindicate failure.\n","docLink":"./Init/System/IO.html#IO.Process.exit","kind":"opaque","line":1521,"name":"IO.Process.exit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1521-L1525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.run\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Runs a process to completion, blocking until it terminates.\nThe child process is run with a null standard input or the specified input if provided,\nIf the child process terminates successfully with exit code 0, its standard output is returned.\nAn exception is thrown if it terminates with any other exit code.\n\nThe specifications of standard input, output, and error handles in `args` are ignored.\n","docLink":"./Init/System/IO.html#IO.Process.run","kind":"def","line":1505,"name":"IO.Process.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1505-L1519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.output\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/IO.html#IO.Process.Output\">Output</a></span></div></div>","info":{"doc":"Runs a process to completion and captures its output and exit code.\nThe child process is run with a null standard input or the specified input if provided,\nand the current process blocks until it has run to completion.\n\nThe specifications of standard input, output, and error handles in `args` are ignored.\n","docLink":"./Init/System/IO.html#IO.Process.output","kind":"def","line":1483,"name":"IO.Process.output","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1483-L1503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Output.stderr\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Output</span>.<span class=\"name\">stderr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.Output\">Output</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Everything that was written to the process's standard error. ","docLink":"./Init/System/IO.html#IO.Process.Output.stderr","kind":"def","line":1481,"name":"IO.Process.Output.stderr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1481-L1481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Output.stdout\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Output</span>.<span class=\"name\">stdout</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.Output\">Output</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Everything that was written to the process's standard output. ","docLink":"./Init/System/IO.html#IO.Process.Output.stdout","kind":"def","line":1479,"name":"IO.Process.Output.stdout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1479-L1479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Output.exitCode\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Output</span>.<span class=\"name\">exitCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.Output\">Output</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"The process's exit code. ","docLink":"./Init/System/IO.html#IO.Process.Output.exitCode","kind":"def","line":1477,"name":"IO.Process.Output.exitCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1477-L1477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Output.mk\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Output</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exitCode</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stdout </span><span class=\"fn\">stderr</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Output\">Output</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.Process.Output.mk","kind":"ctor","line":1475,"name":"IO.Process.Output.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1475-L1475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Output\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Output</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of running a process to completion.\n","docLink":"./Init/System/IO.html#IO.Process.Output","kind":"structure","line":1472,"name":"IO.Process.Output","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1472-L1481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.pid\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">pid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"Returns the operating system process id of the child process. ","docLink":"./Init/System/IO.html#IO.Process.Child.pid","kind":"opaque","line":1469,"name":"IO.Process.Child.pid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1469-L1470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.takeStdin\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">takeStdin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cfg</span>.<a href=\"./Init/System/IO.html#IO.Process.StdioConfig.stdin\">stdin</a></span>.<a href=\"./Init/System/IO.html#IO.Process.Stdio.toHandleType\">toHandleType</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <a href=\"./Init/System/IO.html#IO.Process.StdioConfig.mk\">{</a> <span class=\"fn\">stdin</span> := <a href=\"./Init/System/IO.html#IO.Process.Stdio.null\">Stdio.null</a>, <span class=\"fn\">stdout</span> := <span class=\"fn\"><span class=\"fn\">cfg</span>.<a href=\"./Init/System/IO.html#IO.Process.StdioConfig.stdout\">stdout</a></span>, <span class=\"fn\">stderr</span> := <span class=\"fn\"><span class=\"fn\">cfg</span>.<a href=\"./Init/System/IO.html#IO.Process.StdioConfig.stderr\">stderr</a></span> <a href=\"./Init/System/IO.html#IO.Process.StdioConfig.mk\">}</a></span>)</span></span></div></div>","info":{"doc":"Extracts the `stdin` field from a `Child` object, allowing the handle to be closed while maintaining\na reference to the child process.\n\nFile handles are closed when the last reference to them is dropped. Closing the child's standard\ninput causes an end-of-file marker. Because the `Child` object has a reference to the standard\ninput, this operation is necessary in order to close the stream while the process is running (e.g.\nto extract its exit code after calling `Child.wait`). Many processes do not terminate until their\nstandard input is exhausted.\n","docLink":"./Init/System/IO.html#IO.Process.Child.takeStdin","kind":"opaque","line":1456,"name":"IO.Process.Child.takeStdin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1456-L1467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.kill\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">kill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Terminates the child process using the `SIGTERM` signal or a platform analogue.\n\nIf the process was started using `SpawnArgs.setsid`, terminates the entire process group instead.\n","docLink":"./Init/System/IO.html#IO.Process.Child.kill","kind":"opaque","line":1449,"name":"IO.Process.Child.kill","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1449-L1454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.tryWait\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">tryWait</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span></span></div></div>","info":{"doc":"Checks whether the child has exited. Returns `none` if the process has not exited, or its exit code\nif it has.\n","docLink":"./Init/System/IO.html#IO.Process.Child.tryWait","kind":"opaque","line":1442,"name":"IO.Process.Child.tryWait","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1442-L1447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.wait\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">wait</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></span></div></div>","info":{"doc":"Blocks until the child process has exited and return its exit code.\n","docLink":"./Init/System/IO.html#IO.Process.Child.wait","kind":"opaque","line":1437,"name":"IO.Process.Child.wait","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1437-L1440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.spawn\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">spawn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/System/IO.html#IO.Process.SpawnArgs.toStdioConfig\">toStdioConfig</a></span>)</span></span></div></div>","info":{"doc":"Starts a child process with the provided configuration. The child process is spawned using operating\nsystem primitives, and it can be written in any language.\n\nThe child process runs in parallel with the parent.\n\nIf the child process's standard input is a pipe, use `IO.Process.Child.takeStdin` to make it\npossible to close the child's standard input before the process terminates, which provides the child with an end-of-file marker.\n","docLink":"./Init/System/IO.html#IO.Process.spawn","kind":"opaque","line":1426,"name":"IO.Process.spawn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1426-L1435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.stderr\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">stderr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cfg</span>.<a href=\"./Init/System/IO.html#IO.Process.StdioConfig.stderr\">stderr</a></span>.<a href=\"./Init/System/IO.html#IO.Process.Stdio.toHandleType\">toHandleType</a></span></div></div>","info":{"doc":"The child process's standard error handle, if it was configured as `IO.Process.Stdio.piped`, or\n`()` otherwise.\n","docLink":"./Init/System/IO.html#IO.Process.Child.stderr","kind":"def","line":1424,"name":"IO.Process.Child.stderr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1424-L1424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.stdout\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">stdout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cfg</span>.<a href=\"./Init/System/IO.html#IO.Process.StdioConfig.stdout\">stdout</a></span>.<a href=\"./Init/System/IO.html#IO.Process.Stdio.toHandleType\">toHandleType</a></span></div></div>","info":{"doc":"The child process's standard output handle, if it was configured as `IO.Process.Stdio.piped`, or\n`()` otherwise.\n","docLink":"./Init/System/IO.html#IO.Process.Child.stdout","kind":"def","line":1419,"name":"IO.Process.Child.stdout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1419-L1419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child.stdin\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span>.<span class=\"name\">stdin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Child\">Child</a> <span class=\"fn\">cfg</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cfg</span>.<a href=\"./Init/System/IO.html#IO.Process.StdioConfig.stdin\">stdin</a></span>.<a href=\"./Init/System/IO.html#IO.Process.Stdio.toHandleType\">toHandleType</a></span></div></div>","info":{"doc":"The child process's standard input handle, if it was configured as `IO.Process.Stdio.piped`, or\n`()` otherwise.\n","docLink":"./Init/System/IO.html#IO.Process.Child.stdin","kind":"def","line":1414,"name":"IO.Process.Child.stdin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1414-L1414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Child\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Child</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A child process that was spawned with configuration `cfg`.\n\nThe configuration determines whether the child process's standard input, standard output, and\nstandard error are `IO.FS.Handle`s or `Unit`.\n","docLink":"./Init/System/IO.html#IO.Process.Child","kind":"structure","line":1403,"name":"IO.Process.Child","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1403-L1424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.setsid\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">setsid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Starts the child process in a new session and process group using `setsid`. Currently a no-op on\nnon-POSIX platforms.\n","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.setsid","kind":"def","line":1401,"name":"IO.Process.SpawnArgs.setsid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1401-L1401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.inheritEnv\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">inheritEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Inherit environment variables from the spawning process. ","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.inheritEnv","kind":"def","line":1396,"name":"IO.Process.SpawnArgs.inheritEnv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1396-L1396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.env\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></div></div>","info":{"doc":"Add or remove environment variables for the child process.\n\nThe child process inherits the parent's environment, as modified by `env`. Keys in the array are\nthe names of environment variables. A `none`, causes the entry to be removed from the environment,\nand `some` sets the variable to the new value, adding it if necessary. Variables are processed from left to right.\n","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.env","kind":"def","line":1394,"name":"IO.Process.SpawnArgs.env","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1394-L1394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.cwd\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">cwd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"The child process's working directory. Inherited from the parent current process if `none`. ","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.cwd","kind":"def","line":1386,"name":"IO.Process.SpawnArgs.cwd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1386-L1386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.args\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Arguments for the command. ","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.args","kind":"def","line":1384,"name":"IO.Process.SpawnArgs.args","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1384-L1384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.cmd\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">cmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Command name. ","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.cmd","kind":"def","line":1382,"name":"IO.Process.SpawnArgs.cmd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1382-L1382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.mk\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toStdioConfig</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cwd</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inheritEnv </span><span class=\"fn\">setsid</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.mk","kind":"ctor","line":1380,"name":"IO.Process.SpawnArgs.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1380-L1380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs.toStdioConfig\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span>.<span class=\"name\">toStdioConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.SpawnArgs\">SpawnArgs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs.toStdioConfig","kind":"def","line":1380,"name":"IO.Process.SpawnArgs.toStdioConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1380-L1401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.SpawnArgs\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">SpawnArgs</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">IO.Process.StdioConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for a child process to be spawned.\n\nUse `IO.Process.spawn` to start the child process. `IO.Process.output` and `IO.Process.run` can be\nused when the child process should be run to completion, with its output and/or error code captured.\n","docLink":"./Init/System/IO.html#IO.Process.SpawnArgs","kind":"structure","line":1374,"name":"IO.Process.SpawnArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1374-L1401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.StdioConfig.stderr\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">StdioConfig</span>.<span class=\"name\">stderr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a></div></div>","info":{"doc":"Configuration for the process' stderr handle. ","docLink":"./Init/System/IO.html#IO.Process.StdioConfig.stderr","kind":"def","line":1372,"name":"IO.Process.StdioConfig.stderr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1372-L1372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.StdioConfig.stdout\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">StdioConfig</span>.<span class=\"name\">stdout</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a></div></div>","info":{"doc":"Configuration for the process' stdout handle. ","docLink":"./Init/System/IO.html#IO.Process.StdioConfig.stdout","kind":"def","line":1370,"name":"IO.Process.StdioConfig.stdout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1370-L1370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.StdioConfig.stdin\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">StdioConfig</span>.<span class=\"name\">stdin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a></div></div>","info":{"doc":"Configuration for the process' stdin handle. ","docLink":"./Init/System/IO.html#IO.Process.StdioConfig.stdin","kind":"def","line":1368,"name":"IO.Process.StdioConfig.stdin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1368-L1368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.StdioConfig.mk\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">StdioConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stdin </span><span class=\"fn\">stdout </span><span class=\"fn\">stderr</span> : <a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.StdioConfig\">StdioConfig</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.Process.StdioConfig.mk","kind":"ctor","line":1366,"name":"IO.Process.StdioConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1366-L1366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.StdioConfig\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">StdioConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for the standard input, output, and error handles of a child process.\n","docLink":"./Init/System/IO.html#IO.Process.StdioConfig","kind":"structure","line":1363,"name":"IO.Process.StdioConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1363-L1372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Stdio.toHandleType\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Stdio</span>.<span class=\"name\">toHandleType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"The type of handles that can be used to communicate with a child process on its standard input,\noutput, or error streams.\n\nFor `IO.Process.Stdio.piped`, this type is `IO.FS.Handle`. Otherwise, it is `Unit`, because no\ncommunication is possible.\n","docLink":"./Init/System/IO.html#IO.Process.Stdio.toHandleType","kind":"def","line":1351,"name":"IO.Process.Stdio.toHandleType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1351-L1361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Stdio.null\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Stdio</span>.<span class=\"name\">null</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a></div></div>","info":{"doc":"The stream should be empty. ","docLink":"./Init/System/IO.html#IO.Process.Stdio.null","kind":"ctor","line":1348,"name":"IO.Process.Stdio.null","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1348-L1349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Stdio.inherit\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Stdio</span>.<span class=\"name\">inherit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a></div></div>","info":{"doc":"The stream should be inherited from the parent process. ","docLink":"./Init/System/IO.html#IO.Process.Stdio.inherit","kind":"ctor","line":1346,"name":"IO.Process.Stdio.inherit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1346-L1347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Stdio.piped\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Stdio</span>.<span class=\"name\">piped</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.Process.Stdio\">Stdio</a></div></div>","info":{"doc":"The stream should be attached to a pipe. ","docLink":"./Init/System/IO.html#IO.Process.Stdio.piped","kind":"ctor","line":1344,"name":"IO.Process.Stdio.piped","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1344-L1345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.Stdio\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">Stdio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Whether the standard input, output, and error handles of a child process should be attached to\npipes, inherited from the parent, or null.\n\nIf the stream is a pipe, then the parent process can use it to communicate with the child.\n","docLink":"./Init/System/IO.html#IO.Process.Stdio","kind":"inductive","line":1337,"name":"IO.Process.Stdio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1337-L1349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.getPID\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">getPID</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"Returns the process ID of the calling process. ","docLink":"./Init/System/IO.html#IO.Process.getPID","kind":"opaque","line":1334,"name":"IO.Process.getPID","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1334-L1335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.setCurrentDir\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">setCurrentDir</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets the current working directory of the calling process. ","docLink":"./Init/System/IO.html#IO.Process.setCurrentDir","kind":"opaque","line":1331,"name":"IO.Process.setCurrentDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1331-L1332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.Process.getCurrentDir\"><span class=\"name\">IO</span>.<span class=\"name\">Process</span>.<span class=\"name\">getCurrentDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Returns the current working directory of the calling process. ","docLink":"./Init/System/IO.html#IO.Process.getCurrentDir","kind":"opaque","line":1328,"name":"IO.Process.getCurrentDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1328-L1329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.withTempDir\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">withTempDir</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a temporary directory in the most secure manner possible, providing a its path to an `IO`\naction. Afterwards, all files in the temporary directory are recursively deleted, regardless of how\nor when they were created.\n\nThere are no race conditions in the directory’s creation. The directory is readable and writable\nonly by the creating user ID. Use `IO.FS.createTempDir` to avoid the automatic deletion of the\ndirectory's contents.\n","docLink":"./Init/System/IO.html#IO.FS.withTempDir","kind":"def","line":1307,"name":"IO.FS.withTempDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1307-L1322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.withTempFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">withTempFile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a> → <span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a temporary file in the most secure manner possible and calls `f` with both a `Handle` to\nthe already-opened file and its path. Afterwards, the temporary file is deleted.\n\nThere are no race conditions in the file’s creation. The file is readable and writable only by the\ncreating user ID. Additionally on UNIX style platforms the file is executable by nobody.\n\nUse `IO.FS.createTempFile` to avoid the automatic deletion of the temporary file.\n","docLink":"./Init/System/IO.html#IO.FS.withTempFile","kind":"def","line":1290,"name":"IO.FS.withTempFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1290-L1305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.removeDirAll\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">removeDirAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Fully remove given directory by deleting all contained files and directories in an unspecified order.\nSymlinks are deleted but not followed. Fails if any contained entry cannot be deleted or was newly\ncreated during execution.\n","docLink":"./Init/System/IO.html#IO.FS.removeDirAll","kind":"opaque","line":1276,"name":"IO.FS.removeDirAll","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1276-L1288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.createDirAll\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">createDirAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates a directory at the specified path, creating all missing parents as directories.\n","docLink":"./Init/System/IO.html#IO.FS.createDirAll","kind":"opaque","line":1259,"name":"IO.FS.createDirAll","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1259-L1274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.appDir\"><span class=\"name\">IO</span>.<span class=\"name\">appDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Returns the directory that the current executable is located in.\n","docLink":"./Init/System/IO.html#IO.appDir","kind":"def","line":1248,"name":"IO.appDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1248-L1255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.eprintln\"><span class=\"name\">IO</span>.<span class=\"name\">eprintln</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Converts `s` to a string using its `ToString α` instance, and prints it with a trailing newline to\nthe current standard error (as determined by `IO.getStderr`).\n","docLink":"./Init/System/IO.html#IO.eprintln","kind":"def","line":1233,"name":"IO.eprintln","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1233-L1238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.eprint\"><span class=\"name\">IO</span>.<span class=\"name\">eprint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Converts `s` to a string using its `ToString α` instance, and prints it to the current standard\nerror (as determined by `IO.getStderr`).\n","docLink":"./Init/System/IO.html#IO.eprint","kind":"def","line":1225,"name":"IO.eprint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1225-L1231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.println\"><span class=\"name\">IO</span>.<span class=\"name\">println</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Converts `s` to a string using its `ToString α` instance, and prints it with a trailing newline to\nthe current standard output (as determined by `IO.getStdout`).\n","docLink":"./Init/System/IO.html#IO.println","kind":"def","line":1218,"name":"IO.println","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1218-L1223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.print\"><span class=\"name\">IO</span>.<span class=\"name\">print</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Converts `s` to a string using its `ToString α` instance, and prints it to the current standard\noutput (as determined by `IO.getStdout`).\n","docLink":"./Init/System/IO.html#IO.print","kind":"def","line":1210,"name":"IO.print","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1210-L1216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.withStderr\"><span class=\"name\">IO</span>.<span class=\"name\">withStderr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs an action with the specified stream `h` as standard error, restoring the original standard\nerror stream afterwards.\n","docLink":"./Init/System/IO.html#IO.withStderr","kind":"def","line":1202,"name":"IO.withStderr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1202-L1208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.withStdout\"><span class=\"name\">IO</span>.<span class=\"name\">withStdout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs an action with the specified stream `h` as standard output, restoring the original standard\noutput stream afterwards.\n","docLink":"./Init/System/IO.html#IO.withStdout","kind":"def","line":1191,"name":"IO.withStdout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1191-L1200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.withStdin\"><span class=\"name\">IO</span>.<span class=\"name\">withStdin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs an action with the specified stream `h` as standard input, restoring the original standard\ninput stream afterwards.\n","docLink":"./Init/System/IO.html#IO.withStdin","kind":"def","line":1183,"name":"IO.withStdin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1183-L1189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.readFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">readFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Reads the entire contents of the UTF-8-encoded file at the given path as a `String`.\n\nAn exception is thrown if the contents of the file are not valid UTF-8. This is in addition to\nexceptions that may always be thrown as a result of failing to read files.\n","docLink":"./Init/System/IO.html#IO.FS.readFile","kind":"def","line":1169,"name":"IO.FS.readFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1169-L1179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.readBinFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">readBinFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads the entire contents of the binary file at the given path as an array of bytes.\n","docLink":"./Init/System/IO.html#IO.FS.readBinFile","kind":"def","line":1154,"name":"IO.FS.readBinFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1154-L1167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#System.FilePath.walkDir\"><span class=\"name\">System</span>.<span class=\"name\">FilePath</span>.<span class=\"name\">walkDir</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enter</span> : <span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a>)</span></span></div></div>","info":{"doc":"Traverses a filesystem starting at the path `p` and exploring directories that satisfy `enter`,\nreturning the paths visited.\n\nThe traversal is a preorder traversal, in which parent directories occur prior to any of their\nchildren. Symbolic links are followed.\n","docLink":"./Init/System/IO.html#System.FilePath.walkDir","kind":"def","line":1120,"name":"System.FilePath.walkDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1120-L1146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#System.FilePath.pathExists\"><span class=\"name\">System</span>.<span class=\"name\">FilePath</span>.<span class=\"name\">pathExists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the indicated path points to a file that exists. This function will traverse\nsymlinks.\n","docLink":"./Init/System/IO.html#System.FilePath.pathExists","kind":"def","line":1113,"name":"System.FilePath.pathExists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1113-L1118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#System.FilePath.isDir\"><span class=\"name\">System</span>.<span class=\"name\">FilePath</span>.<span class=\"name\">isDir</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the indicated path can be read and is a directory. This function will traverse\nsymlinks.\n","docLink":"./Init/System/IO.html#System.FilePath.isDir","kind":"def","line":1104,"name":"System.FilePath.isDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1104-L1111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#System.FilePath.symlinkMetadata\"><span class=\"name\">System</span>.<span class=\"name\">FilePath</span>.<span class=\"name\">symlinkMetadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/IO.html#IO.FS.Metadata\">IO.FS.Metadata</a></span></span></div></div>","info":{"doc":"Returns metadata for the indicated file without following symlinks. Throws an exception if the file\ndoes not exist or the metadata cannot be accessed.\n","docLink":"./Init/System/IO.html#System.FilePath.symlinkMetadata","kind":"opaque","line":1097,"name":"System.FilePath.symlinkMetadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1097-L1102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#System.FilePath.metadata\"><span class=\"name\">System</span>.<span class=\"name\">FilePath</span>.<span class=\"name\">metadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/IO.html#IO.FS.Metadata\">IO.FS.Metadata</a></span></span></div></div>","info":{"doc":"Returns metadata for the indicated file, following symlinks. Throws an exception if the file does\nnot exist or the metadata cannot be accessed.\n","docLink":"./Init/System/IO.html#System.FilePath.metadata","kind":"opaque","line":1090,"name":"System.FilePath.metadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1090-L1095"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#System.FilePath.readDir\"><span class=\"name\">System</span>.<span class=\"name\">FilePath</span>.<span class=\"name\">readDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">FilePath</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/IO.html#IO.FS.DirEntry\">IO.FS.DirEntry</a>)</span></span></span></div></div>","info":{"doc":"Returns the contents of the indicated directory. Throws an exception if the file does not exist or\nis not a directory.\n","docLink":"./Init/System/IO.html#System.FilePath.readDir","kind":"opaque","line":1083,"name":"System.FilePath.readDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1083-L1088"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprMetadata\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprMetadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprMetadata","kind":"instance","line":1075,"name":"IO.FS.instReprMetadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1075-L1075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprMetadata.repr\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprMetadata</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprMetadata.repr","kind":"def","line":1075,"name":"IO.FS.instReprMetadata.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1075-L1075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Metadata.type\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Metadata</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></div></div>","info":{"doc":"Whether the file is an ordinary file, a directory, a symbolic link, or some other kind of file.\n","docLink":"./Init/System/IO.html#IO.FS.Metadata.type","kind":"def","line":1074,"name":"IO.FS.Metadata.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1074-L1074"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Metadata.byteSize\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Metadata</span>.<span class=\"name\">byteSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"The size of the file in bytes. ","docLink":"./Init/System/IO.html#IO.FS.Metadata.byteSize","kind":"def","line":1070,"name":"IO.FS.Metadata.byteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1070-L1070"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Metadata.modified\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Metadata</span>.<span class=\"name\">modified</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></div></div>","info":{"doc":"File modification time. ","docLink":"./Init/System/IO.html#IO.FS.Metadata.modified","kind":"def","line":1068,"name":"IO.FS.Metadata.modified","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1068-L1068"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Metadata.accessed\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Metadata</span>.<span class=\"name\">accessed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></div></div>","info":{"doc":"File access time. ","docLink":"./Init/System/IO.html#IO.FS.Metadata.accessed","kind":"def","line":1066,"name":"IO.FS.Metadata.accessed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1066-L1066"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Metadata.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Metadata</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">accessed </span><span class=\"fn\">modified</span> : <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">byteSize</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Metadata\">Metadata</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.Metadata.mk","kind":"ctor","line":1063,"name":"IO.FS.Metadata.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1063-L1063"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Metadata\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Metadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"File metadata.\n\nThe metadata for a file can be accessed with `System.FilePath.metadata`/\n`System.FilePath.symlinkMetadata`.\n","docLink":"./Init/System/IO.html#IO.FS.Metadata","kind":"structure","line":1057,"name":"IO.FS.Metadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1057-L1075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instLESystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instLESystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instLESystemTime","kind":"instance","line":1055,"name":"IO.FS.instLESystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1055-L1055"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instLTSystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instLTSystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instLTSystemTime","kind":"instance","line":1054,"name":"IO.FS.instLTSystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1054-L1054"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instInhabitedSystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instInhabitedSystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instInhabitedSystemTime","kind":"instance","line":1052,"name":"IO.FS.instInhabitedSystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instInhabitedSystemTime.default\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instInhabitedSystemTime</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instInhabitedSystemTime.default","kind":"def","line":1052,"name":"IO.FS.instInhabitedSystemTime.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instOrdSystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instOrdSystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instOrdSystemTime","kind":"instance","line":1052,"name":"IO.FS.instOrdSystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instOrdSystemTime.ord\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instOrdSystemTime</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a> → <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instOrdSystemTime.ord","kind":"def","line":1052,"name":"IO.FS.instOrdSystemTime.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instBEqSystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instBEqSystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instBEqSystemTime","kind":"instance","line":1052,"name":"IO.FS.instBEqSystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instBEqSystemTime.beq\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instBEqSystemTime</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a> → <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instBEqSystemTime.beq","kind":"def","line":1052,"name":"IO.FS.instBEqSystemTime.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprSystemTime.repr\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprSystemTime</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprSystemTime.repr","kind":"def","line":1052,"name":"IO.FS.instReprSystemTime.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprSystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprSystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprSystemTime","kind":"instance","line":1052,"name":"IO.FS.instReprSystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1052-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.SystemTime.nsec\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">SystemTime</span>.<span class=\"name\">nsec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"The number of additional nanoseconds. ","docLink":"./Init/System/IO.html#IO.FS.SystemTime.nsec","kind":"def","line":1051,"name":"IO.FS.SystemTime.nsec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1051-L1051"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.SystemTime.sec\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">SystemTime</span>.<span class=\"name\">sec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The number of whole seconds. ","docLink":"./Init/System/IO.html#IO.FS.SystemTime.sec","kind":"def","line":1049,"name":"IO.FS.SystemTime.sec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1049-L1049"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.SystemTime.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">SystemTime</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nsec</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.SystemTime\">SystemTime</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.SystemTime.mk","kind":"ctor","line":1047,"name":"IO.FS.SystemTime.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1047-L1047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.SystemTime\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">SystemTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Low-level system time, tracked in whole seconds and additional nanoseconds.\n","docLink":"./Init/System/IO.html#IO.FS.SystemTime","kind":"structure","line":1044,"name":"IO.FS.SystemTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1044-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instBEqFileType\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instBEqFileType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instBEqFileType","kind":"instance","line":1042,"name":"IO.FS.instBEqFileType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1042-L1042"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instBEqFileType.beq\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instBEqFileType</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a> → <a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instBEqFileType.beq","kind":"def","line":1042,"name":"IO.FS.instBEqFileType.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1042-L1042"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprFileType\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprFileType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprFileType","kind":"instance","line":1042,"name":"IO.FS.instReprFileType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1042-L1042"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprFileType.repr\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprFileType</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprFileType.repr","kind":"def","line":1042,"name":"IO.FS.instReprFileType.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1042-L1042"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.FileType.other\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">FileType</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></div></div>","info":{"doc":"Files that are neither ordinary files, directories, or symbolic links. ","docLink":"./Init/System/IO.html#IO.FS.FileType.other","kind":"ctor","line":1040,"name":"IO.FS.FileType.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1040-L1041"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.FileType.symlink\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">FileType</span>.<span class=\"name\">symlink</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></div></div>","info":{"doc":"Symbolic links that are pointers to other named files. Note that `System.FilePath.metadata` never\nindicates this type as it follows symlinks; use `System.FilePath.symlinkMetadata` instead.\n","docLink":"./Init/System/IO.html#IO.FS.FileType.symlink","kind":"ctor","line":1035,"name":"IO.FS.FileType.symlink","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1035-L1039"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.FileType.file\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">FileType</span>.<span class=\"name\">file</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></div></div>","info":{"doc":"Ordinary files that have contents and are not directories. ","docLink":"./Init/System/IO.html#IO.FS.FileType.file","kind":"ctor","line":1033,"name":"IO.FS.FileType.file","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1033-L1034"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.FileType.dir\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">FileType</span>.<span class=\"name\">dir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.FileType\">FileType</a></div></div>","info":{"doc":"Directories don't have contents, but may contain other files. ","docLink":"./Init/System/IO.html#IO.FS.FileType.dir","kind":"ctor","line":1031,"name":"IO.FS.FileType.dir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1031-L1032"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.FileType\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">FileType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Types of files that may be found on a filesystem. ","docLink":"./Init/System/IO.html#IO.FS.FileType","kind":"inductive","line":1029,"name":"IO.FS.FileType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1029-L1042"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.DirEntry.path\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">DirEntry</span>.<span class=\"name\">path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Init/System/IO.html#IO.FS.DirEntry\">DirEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></div></div>","info":{"doc":"The path of the file indicated by the directory entry. ","docLink":"./Init/System/IO.html#IO.FS.DirEntry.path","kind":"def","line":1025,"name":"IO.FS.DirEntry.path","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1025-L1027"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprDirEntry\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprDirEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/System/IO.html#IO.FS.DirEntry\">DirEntry</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprDirEntry","kind":"instance","line":1023,"name":"IO.FS.instReprDirEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1023-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instReprDirEntry.repr\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instReprDirEntry</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.DirEntry\">DirEntry</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instReprDirEntry.repr","kind":"def","line":1023,"name":"IO.FS.instReprDirEntry.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1023-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.DirEntry.fileName\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">DirEntry</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.DirEntry\">DirEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The name of the entry. ","docLink":"./Init/System/IO.html#IO.FS.DirEntry.fileName","kind":"def","line":1022,"name":"IO.FS.DirEntry.fileName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1022-L1022"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.DirEntry.root\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">DirEntry</span>.<span class=\"name\">root</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.DirEntry\">DirEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></div></div>","info":{"doc":"The directory in which the entry is found. ","docLink":"./Init/System/IO.html#IO.FS.DirEntry.root","kind":"def","line":1020,"name":"IO.FS.DirEntry.root","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1020-L1020"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.DirEntry.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">DirEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.DirEntry\">DirEntry</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.DirEntry.mk","kind":"ctor","line":1018,"name":"IO.FS.DirEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1018-L1018"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.DirEntry\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">DirEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An entry in a directory on a filesystem. ","docLink":"./Init/System/IO.html#IO.FS.DirEntry","kind":"structure","line":1017,"name":"IO.FS.DirEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1017-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.putStrLn\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">putStrLn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">strm</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Writes the contents of the string to the stream, followed by a newline.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.putStrLn","kind":"def","line":1011,"name":"IO.FS.Stream.putStrLn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1011-L1015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.writeFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">writeFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Write contents of a string to a file at the specified path using UTF-8 encoding.\n","docLink":"./Init/System/IO.html#IO.FS.writeFile","kind":"def","line":1003,"name":"IO.FS.writeFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L1003-L1008"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.writeBinFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">writeBinFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Write the provided bytes to a binary file at the specified path.\n","docLink":"./Init/System/IO.html#IO.FS.writeBinFile","kind":"def","line":996,"name":"IO.FS.writeBinFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L996-L1001"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.lines\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">lines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>","info":{"doc":"Returns the contents of a UTF-8-encoded text file as an array of lines.\n\nNewline markers are not included in the lines.\n","docLink":"./Init/System/IO.html#IO.FS.lines","kind":"def","line":987,"name":"IO.FS.lines","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L987-L994"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.lines\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">lines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>","info":{"doc":"Reads the entire remaining contents of the file handle as a UTF-8-encoded array of lines.\n\nNewline markers are not included in the lines.\n\nThe underlying file is not automatically closed, and subsequent reads from the handle may block\nand/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.lines","kind":"def","line":966,"name":"IO.FS.Handle.lines","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L966-L985"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.readToEnd\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">readToEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Reads the entire remaining contents of the file handle as a UTF-8-encoded string. An exception is\nthrown if the contents are not valid UTF-8.\n\nThe underlying file is not automatically closed, and subsequent reads from the handle may block\nand/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.readToEnd","kind":"def","line":953,"name":"IO.FS.Handle.readToEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L953-L964"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.readBinToEnd\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">readBinToEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads the entire remaining contents of the file handle until an end-of-file marker (EOF) is\nencountered.\n\nThe underlying file is not automatically closed upon encountering an EOF, and subsequent reads from\nthe handle may block and/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.readBinToEnd","kind":"def","line":943,"name":"IO.FS.Handle.readBinToEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L943-L951"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.readBinToEndInto\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">readBinToEndInto</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">buf</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads the entire remaining contents of the file handle until an end-of-file marker (EOF) is\nencountered.\n\nThe underlying file is not automatically closed upon encountering an EOF, and subsequent reads from\nthe handle may block and/or return data.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.readBinToEndInto","kind":"def","line":927,"name":"IO.FS.Handle.readBinToEndInto","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L927-L941"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.putStrLn\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">putStrLn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Writes the contents of the string to the handle, followed by a newline. Uses UTF-8.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.putStrLn","kind":"def","line":921,"name":"IO.FS.Handle.putStrLn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L921-L925"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.withFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">withFile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Opens the file `fn` with the specified `mode` and passes the resulting file handle to `f`.\n\nThe file handle is closed when the last reference to it is dropped. If references escape `f`, then\nthe file remains open even after `IO.FS.withFile` has finished.\n","docLink":"./Init/System/IO.html#IO.FS.withFile","kind":"def","line":911,"name":"IO.FS.withFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L911-L919"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.currentDir\"><span class=\"name\">IO</span>.<span class=\"name\">currentDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Returns the current working directory of the executing process.\n","docLink":"./Init/System/IO.html#IO.currentDir","kind":"opaque","line":904,"name":"IO.currentDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L904-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.appPath\"><span class=\"name\">IO</span>.<span class=\"name\">appPath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Returns the file name of the currently-running executable.\n","docLink":"./Init/System/IO.html#IO.appPath","kind":"opaque","line":900,"name":"IO.appPath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L900-L903"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getEnv\"><span class=\"name\">IO</span>.<span class=\"name\">getEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>","info":{"doc":"Returns the value of the environment variable `var`, or `none` if it is not present in the\nenvironment.\n","docLink":"./Init/System/IO.html#IO.getEnv","kind":"opaque","line":895,"name":"IO.getEnv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L895-L899"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.createTempDir\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">createTempDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Creates a temporary directory in the most secure manner possible, returning the new directory's\npath. There are no race conditions in the directory’s creation. The directory is readable and\nwritable only by the creating user ID.\n\nIt is the caller's job to remove the directory after use. Use `withTempDir` to ensure that the\ntemporary directory is removed.\n","docLink":"./Init/System/IO.html#IO.FS.createTempDir","kind":"opaque","line":883,"name":"IO.FS.createTempDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L883-L891"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.createTempFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">createTempFile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></div></div>","info":{"doc":"Creates a temporary file in the most secure manner possible, returning both a `Handle` to the\nalready-opened file and its path.\n\nThere are no race conditions in the file’s creation. The file is readable and writable only by the\ncreating user ID. Additionally on UNIX style platforms the file is executable by nobody.\n\nIt is the caller's job to remove the file after use. Use `withTempFile` to ensure that the temporary\nfile is removed.\n","docLink":"./Init/System/IO.html#IO.FS.createTempFile","kind":"opaque","line":871,"name":"IO.FS.createTempFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L871-L881"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.hardLink\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">hardLink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">orig </span><span class=\"fn\">link</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates a new hard link.\n\nThe `link` path will be a link pointing to the `orig` path.\nNote that systems often require these two paths to both be located on the same filesystem.\nIf `orig` names a symbolic link, it is platform-specific whether the symbolic link is followed.\n\nThis function coincides with the [POSIX `link`\nfunction](https://pubs.opengroup.org/onlinepubs/9699919799/functions/link.html).\n","docLink":"./Init/System/IO.html#IO.FS.hardLink","kind":"opaque","line":859,"name":"IO.FS.hardLink","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L859-L869"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.rename\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">rename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old </span><span class=\"fn\">new</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Moves a file or directory `old` to the new location `new`.\n\nThis function coincides with the [POSIX `rename`\nfunction](https://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html).\n","docLink":"./Init/System/IO.html#IO.FS.rename","kind":"opaque","line":851,"name":"IO.FS.rename","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L851-L857"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.createDir\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">createDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Creates a directory at the specified path. The parent directory must already exist.\n\nThrows an exception if the directory cannot be created.\n","docLink":"./Init/System/IO.html#IO.FS.createDir","kind":"opaque","line":843,"name":"IO.FS.createDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L843-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.removeDir\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">removeDir</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Removes (deletes) a directory.\n\nRemoving a directory fails if the directory is not empty. Use `IO.FS.removeDirAll` to remove\ndirectories along with their contents.\n","docLink":"./Init/System/IO.html#IO.FS.removeDir","kind":"opaque","line":836,"name":"IO.FS.removeDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L836-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.removeFile\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">removeFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Removes (deletes) a file from the filesystem.\n\nTo remove a directory, use `IO.FS.removeDir` or `IO.FS.removeDirAll` instead.\n","docLink":"./Init/System/IO.html#IO.FS.removeFile","kind":"opaque","line":829,"name":"IO.FS.removeFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L829-L834"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.realPath\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">realPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"Resolves a path to an absolute path that contains no '.', '..', or symbolic links.\n\nThis function coincides with the [POSIX `realpath`\nfunction](https://pubs.opengroup.org/onlinepubs/9699919799/functions/realpath.html).\n","docLink":"./Init/System/IO.html#IO.FS.realPath","kind":"opaque","line":821,"name":"IO.FS.realPath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L821-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.putStr\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">putStr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Writes the provided string to the file handle using the UTF-8 encoding.\n\nWriting to a handle is typically buffered, and may not immediately modify the file on disk. Use\n`IO.FS.Handle.flush` to write changes to buffers to the associated device.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.putStr","kind":"opaque","line":811,"name":"IO.FS.Handle.putStr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L811-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.getLine\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">getLine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Reads UTF-8-encoded text up to and including the next line break from the handle. If the returned\nstring is empty, an end-of-file marker (EOF) has been reached.\n\nEncountering an EOF does not close a handle. Subsequent reads may block and return more data.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.getLine","kind":"opaque","line":804,"name":"IO.FS.Handle.getLine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L804-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.write\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">write</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">buffer</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Writes the provided bytes to the the handle.\n\nWriting to a handle is typically buffered, and may not immediately modify the file on disk. Use\n`IO.FS.Handle.flush` to write changes to buffers to the associated device.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.write","kind":"opaque","line":796,"name":"IO.FS.Handle.write","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L796-L802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.read\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">read</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bytes</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads up to the given number of bytes from the handle. If the returned array is empty, an\nend-of-file marker (EOF) has been reached.\n\nEncountering an EOF does not close a handle. Subsequent reads may block and return more data.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.read","kind":"opaque","line":789,"name":"IO.FS.Handle.read","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L789-L795"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.truncate\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">truncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Truncates the handle to its read/write cursor.\n\nThis operation does not automatically flush output buffers, so the contents of the output device may\nnot reflect the change immediately. This does not usually lead to problems because the read/write\ncursor includes buffered writes. However, buffered writes followed by `IO.FS.Handle.rewind`, then\n`IO.FS.Handle.truncate`, and then closing the file may lead to a non-empty file. If unsure, call\n`IO.FS.Handle.flush` before truncating.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.truncate","kind":"opaque","line":779,"name":"IO.FS.Handle.truncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L779-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.rewind\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">rewind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Rewinds the read/write cursor to the beginning of the handle's file.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.rewind","kind":"opaque","line":775,"name":"IO.FS.Handle.rewind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L775-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.flush\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">flush</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Flushes the output buffer associated with the handle, writing any unwritten data to the associated\noutput device.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.flush","kind":"opaque","line":770,"name":"IO.FS.Handle.flush","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L770-L774"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.isTty\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">isTty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if a handle refers to a Windows console or a Unix terminal.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.isTty","kind":"opaque","line":765,"name":"IO.FS.Handle.isTty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L765-L768"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.unlock\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">unlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Releases any previously-acquired lock on the handle. Succeeds even if no lock has been acquired.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.unlock","kind":"opaque","line":760,"name":"IO.FS.Handle.unlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L760-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.tryLock\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">tryLock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exclusive</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Tries to acquire an exclusive or shared lock on the handle and returns `true` if successful. Will\nnot block if the lock cannot be acquired, but instead returns `false`.\n\nAcquiring a exclusive lock while already possessing a shared lock will **not** reliably succeed: it\nworks on Unix-like systems but not on Windows.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.tryLock","kind":"opaque","line":752,"name":"IO.FS.Handle.tryLock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L752-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.lock\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">lock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exclusive</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Acquires an exclusive or shared lock on the handle. Blocks to wait for the lock if necessary.\n\nAcquiring a exclusive lock while already possessing a shared lock will **not** reliably succeed: it\nworks on Unix-like systems but not on Windows.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.lock","kind":"opaque","line":745,"name":"IO.FS.Handle.lock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L745-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/IO.html#IO.FS.Handle\">Handle</a></span></div></div>","info":{"doc":"Opens the file at `fn` with the given `mode`.\n\nAn exception is thrown if the file cannot be opened.\n","docLink":"./Init/System/IO.html#IO.FS.Handle.mk","kind":"opaque","line":738,"name":"IO.FS.Handle.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L738-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.iterate\"><span class=\"name\">IO</span>.<span class=\"name\">iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Iterates an `IO` action. Starting with an initial state, the action is applied repeatedly until it\nreturns a final value in `Sum.inr`. Each time it returns `Sum.inl`, the returned value is treated as\na new state.\n","docLink":"./Init/System/IO.html#IO.iterate","kind":"opaque","line":723,"name":"IO.iterate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L723-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.setStderr\"><span class=\"name\">IO</span>.<span class=\"name\">setStderr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a></span></span></div></div>","info":{"doc":"Replaces the standard error stream of the current thread and returns its previous value.\n\nUse `IO.getStderr` to get the current standard error stream.\n","docLink":"./Init/System/IO.html#IO.setStderr","kind":"opaque","line":716,"name":"IO.setStderr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L716-L721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.setStdout\"><span class=\"name\">IO</span>.<span class=\"name\">setStdout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a></span></span></div></div>","info":{"doc":"Replaces the standard output stream of the current thread and returns its previous value.\n\nUse `IO.getStdout` to get the current standard output stream.\n","docLink":"./Init/System/IO.html#IO.setStdout","kind":"opaque","line":710,"name":"IO.setStdout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L710-L715"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.setStdin\"><span class=\"name\">IO</span>.<span class=\"name\">setStdin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a></span></span></div></div>","info":{"doc":"Replaces the standard input stream of the current thread and returns its previous value.\n\nUse `IO.getStdin` to get the current standard input stream.\n","docLink":"./Init/System/IO.html#IO.setStdin","kind":"opaque","line":704,"name":"IO.setStdin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L704-L709"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getStderr\"><span class=\"name\">IO</span>.<span class=\"name\">getStderr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a></span></div></div>","info":{"doc":"Returns the current thread's standard error stream.\n\nUse `IO.setStderr` to replace the current thread's standard error stream.\n","docLink":"./Init/System/IO.html#IO.getStderr","kind":"opaque","line":697,"name":"IO.getStderr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L697-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getStdout\"><span class=\"name\">IO</span>.<span class=\"name\">getStdout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a></span></div></div>","info":{"doc":"Returns the current thread's standard output stream.\n\nUse `IO.setStdout` to replace the current thread's standard output stream.\n","docLink":"./Init/System/IO.html#IO.getStdout","kind":"opaque","line":691,"name":"IO.getStdout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L691-L696"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getStdin\"><span class=\"name\">IO</span>.<span class=\"name\">getStdin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">FS.Stream</a></span></div></div>","info":{"doc":"Returns the current thread's standard input stream.\n\nUse `IO.setStdin` to replace the current thread's standard input stream.\n","docLink":"./Init/System/IO.html#IO.getStdin","kind":"opaque","line":685,"name":"IO.getStdin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L685-L690"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instInhabitedStream\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instInhabitedStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instInhabitedStream","kind":"instance","line":681,"name":"IO.FS.instInhabitedStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L681-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.instInhabitedStream.default\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">instInhabitedStream</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.instInhabitedStream.default","kind":"def","line":681,"name":"IO.FS.instInhabitedStream.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L681-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.isTty\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">isTty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if a stream refers to a Windows console or Unix terminal. ","docLink":"./Init/System/IO.html#IO.FS.Stream.isTty","kind":"def","line":680,"name":"IO.FS.Stream.isTty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L680-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.putStr\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">putStr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Writes the provided string to the stream.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.putStr","kind":"def","line":678,"name":"IO.FS.Stream.putStr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L678-L678"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.getLine\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">getLine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Reads text up to and including the next newline from the stream.\n\nIf the returned string is empty, an end-of-file marker (EOF) has been reached.\nAn EOF does not actually close a stream, so further reads may block and return more data.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.getLine","kind":"def","line":674,"name":"IO.FS.Stream.getLine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L674-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.write\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">write</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Writes the provided bytes to the stream.\n\nIf the stream represents a physical output device such as a file on disk, then the results may be\nbuffered. Call `FS.Stream.flush` to synchronize their contents.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.write","kind":"def","line":667,"name":"IO.FS.Stream.write","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L667-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.read\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">read</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize\">USize</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"Reads up to the given number of bytes from the stream.\n\nIf the returned array is empty, an end-of-file marker (EOF) has been reached. An EOF does not\nactually close a stream, so further reads may block and return more data.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.read","kind":"def","line":660,"name":"IO.FS.Stream.read","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L660-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.flush\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">flush</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Flushes the stream's output buffers.\n","docLink":"./Init/System/IO.html#IO.FS.Stream.flush","kind":"def","line":653,"name":"IO.FS.Stream.flush","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L653-L653"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream.mk\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flush</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">read</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#USize\">USize</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">write</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getLine</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">putStr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isTty</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Stream\">Stream</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.FS.Stream.mk","kind":"ctor","line":649,"name":"IO.FS.Stream.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L649-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Stream\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Stream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A pure-Lean abstraction of POSIX streams. These streams may represent an underlying POSIX stream or\nbe implemented by Lean code.\n\nBecause standard input, standard output, and standard error are all `IO.FS.Stream`s that can be\noverridden, Lean code may capture and redirect input and output.\n","docLink":"./Init/System/IO.html#IO.FS.Stream","kind":"structure","line":642,"name":"IO.FS.Stream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L642-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Handle\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Handle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A reference to an opened file.\n\nFile handles wrap the underlying operating system's file descriptors. There is no explicit operation\nto close a file: when the last reference to a file handle is dropped, the file is closed\nautomatically.\n\nHandles have an associated read/write cursor that determines the where reads and writes occur in the\nfile.\n","docLink":"./Init/System/IO.html#IO.FS.Handle","kind":"opaque","line":630,"name":"IO.FS.Handle","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L630-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Mode.append\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Mode</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a></div></div>","info":{"doc":"The file should be opened for writing.\n\nIf the file does not already exist, it is created. If the file already exists, it is opened, and\nthe read/write cursor is positioned at the end of the file.\n\n* `open` flags: `O_WRONLY | O_CREAT | O_APPEND`\n* `fdopen` mode: `a`\n","docLink":"./Init/System/IO.html#IO.FS.Mode.append","kind":"ctor","line":619,"name":"IO.FS.Mode.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L619-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Mode.readWrite\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Mode</span>.<span class=\"name\">readWrite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a></div></div>","info":{"doc":"The file should be opened for both reading and writing.\n\nIt is an error if the file does not already exist. The read/write cursor is positioned at the\nstart of the file.\n\n* `open` flags: `O_RDWR`\n* `fdopen` mode: `r+`\n","docLink":"./Init/System/IO.html#IO.FS.Mode.readWrite","kind":"ctor","line":609,"name":"IO.FS.Mode.readWrite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L609-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Mode.writeNew\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Mode</span>.<span class=\"name\">writeNew</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a></div></div>","info":{"doc":"A new file should be created for writing.\n\nIt is an error if the file already exists. A new file is created, with the read/write cursor\npositioned at the start.\n\n* `open` flags: `O_WRONLY | O_CREAT | O_TRUNC | O_EXCL`\n* `fdopen` mode: `w`\n","docLink":"./Init/System/IO.html#IO.FS.Mode.writeNew","kind":"ctor","line":599,"name":"IO.FS.Mode.writeNew","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L599-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Mode.write\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Mode</span>.<span class=\"name\">write</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a></div></div>","info":{"doc":"The file should be opened for writing.\n\nIf the file already exists, it is truncated to zero length. Otherwise, a new file is created. The\nread/write cursor is positioned at the beginning of the file.\n\n* `open` flags: `O_WRONLY | O_CREAT | O_TRUNC`\n* `fdopen` mode: `w`\n","docLink":"./Init/System/IO.html#IO.FS.Mode.write","kind":"ctor","line":589,"name":"IO.FS.Mode.write","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L589-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Mode.read\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Mode</span>.<span class=\"name\">read</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.FS.Mode\">Mode</a></div></div>","info":{"doc":"The file should be opened for reading.\n\nThe read/write cursor is positioned at the beginning of the file. It is an error if the file does\nnot exist.\n\n* `open` flags: `O_RDONLY`\n* `fdopen` mode: `r`\n","docLink":"./Init/System/IO.html#IO.FS.Mode.read","kind":"ctor","line":579,"name":"IO.FS.Mode.read","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L579-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.FS.Mode\"><span class=\"name\">IO</span>.<span class=\"name\">FS</span>.<span class=\"name\">Mode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Whether a file should be opened for reading, writing, creation and writing, or appending.\n\nAt the operating system level, this translates to the mode of a file handle (i.e., a set of `open`\nflags and an `fdopen` mode).\n\nNone of the modes represented by this datatype translate line endings (i.e. `O_BINARY` on Windows).\nFurthermore, they are not inherited across process creation (i.e. `O_NOINHERIT` on Windows and\n`O_CLOEXEC` elsewhere).\n\n**Operating System Specifics:**\n* Windows:\n  [`_open`](https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/open-wopen?view=msvc-170),\n  [`_fdopen`](https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/fdopen-wfdopen?view=msvc-170)\n* Linux: [`open`](https://linux.die.net/man/2/open), [`fdopen`](https://linux.die.net/man/3/fdopen)\n","docLink":"./Init/System/IO.html#IO.FS.Mode","kind":"inductive","line":562,"name":"IO.FS.Mode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L562-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.addHeartbeats\"><span class=\"name\">IO</span>.<span class=\"name\">addHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">count</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adjusts the heartbeat counter of the current thread by the given amount. This can be useful to give\nallocation-avoiding code additional “weight” and is also used to adjust the counter after resuming\nfrom a snapshot.\n\nHeartbeats are a means of implementing “deterministic” timeouts. The heartbeat counter is the number\nof “small” memory allocations performed on the current execution thread.\n","docLink":"./Init/System/IO.html#IO.addHeartbeats","kind":"def","line":550,"name":"IO.addHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L550-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.setNumHeartbeats\"><span class=\"name\">IO</span>.<span class=\"name\">setNumHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">count</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets the heartbeat counter of the current thread to the given amount. This can be used to avoid\ncounting heartbeats of code whose execution time is non-deterministic.\n","docLink":"./Init/System/IO.html#IO.setNumHeartbeats","kind":"opaque","line":544,"name":"IO.setNumHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L544-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getNumHeartbeats\"><span class=\"name\">IO</span>.<span class=\"name\">getNumHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Returns the number of _heartbeats_ that have occurred during the current thread's execution. The\nheartbeat count is the number of “small” memory allocations performed in a thread.\n\nHeartbeats used to implement timeouts that are more deterministic across different hardware.\n","docLink":"./Init/System/IO.html#IO.getNumHeartbeats","kind":"opaque","line":536,"name":"IO.getNumHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L536-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.wait\"><span class=\"name\">IO</span>.<span class=\"name\">wait</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Waits for the task to finish, then returns its result.\n","docLink":"./Init/System/IO.html#IO.wait","kind":"opaque","line":530,"name":"IO.wait","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L530-L534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.hasFinished\"><span class=\"name\">IO</span>.<span class=\"name\">hasFinished</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">task</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the task has finished execution, at which point calling `Task.get` will return\nimmediately.\n","docLink":"./Init/System/IO.html#IO.hasFinished","kind":"def","line":523,"name":"IO.hasFinished","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L523-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">getTaskState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></span></div></div>","info":{"doc":"Returns the current state of a task in the Lean runtime's task manager.\n\nFor tasks derived from `Promise`s, the states `waiting` and `running` should be considered\nequivalent.\n","docLink":"./Init/System/IO.html#IO.getTaskState","kind":"opaque","line":515,"name":"IO.getTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L515-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instToStringTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instToStringTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instToStringTaskState","kind":"instance","line":513,"name":"IO.instToStringTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L513-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.TaskState.toString\"><span class=\"name\">IO</span>.<span class=\"name\">TaskState</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Converts a task state to a string.\n","docLink":"./Init/System/IO.html#IO.TaskState.toString","kind":"def","line":505,"name":"IO.TaskState.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L505-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instMaxTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instMaxTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instMaxTaskState","kind":"instance","line":503,"name":"IO.instMaxTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L503-L503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instMinTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instMinTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instMinTaskState","kind":"instance","line":502,"name":"IO.instMinTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L502-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instLETaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instLETaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instLETaskState","kind":"instance","line":501,"name":"IO.instLETaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L501-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instLTTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instLTTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instLTTaskState","kind":"instance","line":500,"name":"IO.instLTTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L500-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instOrdTaskState.ord\"><span class=\"name\">IO</span>.<span class=\"name\">instOrdTaskState</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a> → <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instOrdTaskState.ord","kind":"def","line":498,"name":"IO.instOrdTaskState.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instOrdTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instOrdTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instOrdTaskState","kind":"instance","line":498,"name":"IO.instOrdTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instDecidableEqTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instDecidableEqTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instDecidableEqTaskState","kind":"instance","line":498,"name":"IO.instDecidableEqTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instReprTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instReprTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instReprTaskState","kind":"instance","line":498,"name":"IO.instReprTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instReprTaskState.repr\"><span class=\"name\">IO</span>.<span class=\"name\">instReprTaskState</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instReprTaskState.repr","kind":"def","line":498,"name":"IO.instReprTaskState.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instInhabitedTaskState.default\"><span class=\"name\">IO</span>.<span class=\"name\">instInhabitedTaskState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instInhabitedTaskState.default","kind":"def","line":498,"name":"IO.instInhabitedTaskState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.instInhabitedTaskState\"><span class=\"name\">IO</span>.<span class=\"name\">instInhabitedTaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.instInhabitedTaskState","kind":"instance","line":498,"name":"IO.instInhabitedTaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.TaskState.finished\"><span class=\"name\">IO</span>.<span class=\"name\">TaskState</span>.<span class=\"name\">finished</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></div></div>","info":{"doc":"The `Task` has finished running and its result is available. Calling `Task.get` or `IO.wait` on\nthe task will not block.\n","docLink":"./Init/System/IO.html#IO.TaskState.finished","kind":"ctor","line":493,"name":"IO.TaskState.finished","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L493-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.TaskState.running\"><span class=\"name\">IO</span>.<span class=\"name\">TaskState</span>.<span class=\"name\">running</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></div></div>","info":{"doc":"The `Task` is actively running on a thread or, in the case of a `Promise`, waiting for a call to\n`IO.Promise.resolve`.\n","docLink":"./Init/System/IO.html#IO.TaskState.running","kind":"ctor","line":488,"name":"IO.TaskState.running","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L488-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.TaskState.waiting\"><span class=\"name\">IO</span>.<span class=\"name\">TaskState</span>.<span class=\"name\">waiting</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.TaskState\">TaskState</a></div></div>","info":{"doc":"The `Task` is waiting to be run.\n\nIt can be waiting for dependencies to complete or sitting in the task manager queue waiting for a\nthread to run on.\n","docLink":"./Init/System/IO.html#IO.TaskState.waiting","kind":"ctor","line":481,"name":"IO.TaskState.waiting","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L481-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.TaskState\"><span class=\"name\">IO</span>.<span class=\"name\">TaskState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The current state of a `Task` in the Lean runtime's task manager. ","docLink":"./Init/System/IO.html#IO.TaskState","kind":"inductive","line":479,"name":"IO.TaskState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L479-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.cancel\"><span class=\"name\">IO</span>.<span class=\"name\">cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Requests cooperative cancellation of the task. The task must explicitly call `IO.checkCanceled` to\nreact to the cancellation.\n","docLink":"./Init/System/IO.html#IO.cancel","kind":"opaque","line":473,"name":"IO.cancel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L473-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.checkCanceled\"><span class=\"name\">IO</span>.<span class=\"name\">checkCanceled</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the current task's cancellation flag has been set by calling `IO.cancel` or by\ndropping the last reference to the task.\n","docLink":"./Init/System/IO.html#IO.checkCanceled","kind":"opaque","line":467,"name":"IO.checkCanceled","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L467-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.mapTasks\"><span class=\"name\">IO</span>.<span class=\"name\">mapTasks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">Error</a> <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"`IO` specialization of `EIO.mapTasks`. ","docLink":"./Init/System/IO.html#IO.mapTasks","kind":"def","line":462,"name":"IO.mapTasks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L462-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.chainTask\"><span class=\"name\">IO</span>.<span class=\"name\">chainTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete and then runs the `IO` action `f` on its result.\nThis new task has priority `prio`.\n\nThis is a version of `IO.mapTask` that ignores the result value.\n\nRunning the resulting `IO` action causes the task to be started eagerly. Unlike pure tasks created\nby `Task.spawn`, tasks created by this function will run even if the last reference to the task is\ndropped. The act should explicitly check for cancellation via `IO.checkCanceled` if it should be\nterminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#IO.chainTask","kind":"def","line":447,"name":"IO.chainTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L447-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.bindTask\"><span class=\"name\">IO</span>.<span class=\"name\">bindTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">Error</a> <span class=\"fn\">β</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">Error</a> <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete, runs the `IO` action `f` on its result, and then\ncontinues as the resulting task. This new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes this new task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped. Because `IO` actions\nmay throw an exception of type `IO.Error`, the result of the task is an `Except IO.Error α`.\n","docLink":"./Init/System/IO.html#IO.bindTask","kind":"def","line":433,"name":"IO.bindTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L433-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.mapTask\"><span class=\"name\">IO</span>.<span class=\"name\">mapTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">Error</a> <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete and then runs the `IO` action `f` on its result.\nThis new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped. Because `IO` actions\nmay throw an exception of type `IO.Error`, the result of the task is an `Except IO.Error α`.\n","docLink":"./Init/System/IO.html#IO.mapTask","kind":"def","line":419,"name":"IO.mapTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L419-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.asTask\"><span class=\"name\">IO</span>.<span class=\"name\">asTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">Error</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"Runs `act` in a separate `Task`, with priority `prio`. Because `IO` actions may throw an exception\nof type `IO.Error`, the result of the task is an `Except IO.Error α`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Pure accesses to the\n`Task` do not influence the impure `act`. Because `IO` actions may throw an exception of type\n`IO.Error`, the result of the task is an `Except IO.Error α`.\n\nUnlike pure tasks created by `Task.spawn`, tasks created by this function will run even if the last\nreference to the task is dropped. The `act` should explicitly check for cancellation via\n`IO.checkCanceled` if it should be terminated or otherwise react to the last reference being\ndropped.\n","docLink":"./Init/System/IO.html#IO.asTask","kind":"def","line":403,"name":"IO.asTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L403-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.sleep\"><span class=\"name\">IO</span>.<span class=\"name\">sleep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pauses execution for the specified number of milliseconds.\n","docLink":"./Init/System/IO.html#IO.sleep","kind":"opaque","line":396,"name":"IO.sleep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L396-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.getRandomBytes\"><span class=\"name\">IO</span>.<span class=\"name\">getRandomBytes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nBytes</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"Reads bytes from a system entropy source. It is not guaranteed to be cryptographically secure.\n\nIf `nBytes` is `0`, returns immediately with an empty buffer.\n","docLink":"./Init/System/IO.html#IO.getRandomBytes","kind":"opaque","line":389,"name":"IO.getRandomBytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L389-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.monoNanosNow\"><span class=\"name\">IO</span>.<span class=\"name\">monoNanosNow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Monotonically increasing time since an unspecified past point in nanoseconds. There is no relation\nto wall clock time.\n","docLink":"./Init/System/IO.html#IO.monoNanosNow","kind":"opaque","line":383,"name":"IO.monoNanosNow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L383-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.monoMsNow\"><span class=\"name\">IO</span>.<span class=\"name\">monoMsNow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Monotonically increasing time since an unspecified past point in milliseconds. There is no relation\nto wall clock time.\n","docLink":"./Init/System/IO.html#IO.monoMsNow","kind":"opaque","line":377,"name":"IO.monoMsNow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L377-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.lazyPure\"><span class=\"name\">IO</span>.<span class=\"name\">lazyPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates an IO action that will invoke `fn` if and when it is executed, returning the result.\n","docLink":"./Init/System/IO.html#IO.lazyPure","kind":"def","line":371,"name":"IO.lazyPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L371-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.ofExcept\"><span class=\"name\">IO</span>.<span class=\"name\">ofExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Converts an `Except ε` action into an `IO` action.\n\nIf the `Except ε` action throws an exception, then the exception type's `ToString` instance is used\nto convert it into an `IO.Error`, which is thrown. Otherwise, the value is returned.\n","docLink":"./Init/System/IO.html#IO.ofExcept","kind":"def","line":360,"name":"IO.ofExcept","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L360-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.mapTasks\"><span class=\"name\">EIO</span>.<span class=\"name\">mapTasks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for all the tasks in the list `tasks` to complete, and then runs the\n`EIO ε` action `f` on their results. This new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#EIO.mapTasks","kind":"def","line":343,"name":"EIO.mapTasks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L343-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.chainTask\"><span class=\"name\">EIO</span>.<span class=\"name\">chainTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete and then runs the `EIO ε` action `f` on its result.\nThis new task has priority `prio`.\n\nThis is a version of `EIO.mapTask` that ignores the result value.\n\nRunning the resulting `EIO ε` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#EIO.chainTask","kind":"def","line":328,"name":"EIO.chainTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L328-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.bindTask\"><span class=\"name\">EIO</span>.<span class=\"name\">bindTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete, runs the `EIO ε` action `f` on its result, and\nthen continues as the resulting task. This new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes this new task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped. Because `EIO ε` actions\nmay throw an exception of type `ε`, the result of the task is an `Except ε α`.\n","docLink":"./Init/System/IO.html#EIO.bindTask","kind":"def","line":313,"name":"EIO.bindTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L313-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.mapTask\"><span class=\"name\">EIO</span>.<span class=\"name\">mapTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">β</span>)</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete and then runs the `IO` action `f` on its result.\nThis new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped. Because `EIO ε` actions\nmay throw an exception of type `ε`, the result of the task is an `Except ε α`.\n","docLink":"./Init/System/IO.html#EIO.mapTask","kind":"def","line":299,"name":"EIO.mapTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L299-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.asTask\"><span class=\"name\">EIO</span>.<span class=\"name\">asTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"Runs `act` in a separate `Task`, with priority `prio`. Because `EIO ε` actions may throw an exception\nof type `ε`, the result of the task is an `Except ε α`.\n\nRunning the resulting `IO` action causes the task to be started eagerly. Pure accesses to the `Task`\ndo not influence the impure `act`.\n\nUnlike pure tasks created by `Task.spawn`, tasks created by this function will run even if the last\nreference to the task is dropped. The `act` should explicitly check for cancellation via\n`IO.checkCanceled` if it should be terminated or otherwise react to the last reference being\ndropped.\n","docLink":"./Init/System/IO.html#EIO.asTask","kind":"def","line":284,"name":"EIO.asTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L284-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.mapTasks\"><span class=\"name\">BaseIO</span>.<span class=\"name\">mapTasks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for all the tasks in the list `tasks` to complete, and then runs the\n`IO` action `f` on their results. This new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#BaseIO.mapTasks","kind":"def","line":257,"name":"BaseIO.mapTasks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L257-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.chainTask\"><span class=\"name\">BaseIO</span>.<span class=\"name\">chainTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete and then runs the `IO` action `f` on its result.\nThis new task has priority `prio`.\n\nThis is a version of `BaseIO.mapTask` that ignores the result value.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#BaseIO.chainTask","kind":"def","line":242,"name":"BaseIO.chainTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L242-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.bindTask\"><span class=\"name\">BaseIO</span>.<span class=\"name\">bindTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">β</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete, runs the `IO` action `f` on its result, and then\ncontinues as the resulting task. This new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes this new task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#BaseIO.bindTask","kind":"opaque","line":228,"name":"BaseIO.bindTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L228-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.mapTask\"><span class=\"name\">BaseIO</span>.<span class=\"name\">mapTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Creates a new task that waits for `t` to complete and then runs the `BaseIO` action `f` on its\nresult. This new task has priority `prio`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Unlike pure tasks\ncreated by `Task.spawn`, tasks created by this function will run even if the last reference to the\ntask is dropped. The `act` should explicitly check for cancellation via `IO.checkCanceled` if it\nshould be terminated or otherwise react to the last reference being dropped.\n","docLink":"./Init/System/IO.html#BaseIO.mapTask","kind":"opaque","line":214,"name":"BaseIO.mapTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L214-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.asTask\"><span class=\"name\">BaseIO</span>.<span class=\"name\">asTask</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Runs `act` in a separate `Task`, with priority `prio`.\n\nRunning the resulting `BaseIO` action causes the task to be started eagerly. Pure accesses to the\n`Task` do not influence the impure `act`.\n\nUnlike pure tasks created by `Task.spawn`, tasks created by this function will run even if the last\nreference to the task is dropped. The `act` should explicitly check for cancellation via\n`IO.checkCanceled` if it should be terminated or otherwise react to the last reference being\ndropped.\n","docLink":"./Init/System/IO.html#BaseIO.asTask","kind":"opaque","line":199,"name":"BaseIO.asTask","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L199-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.initializing\"><span class=\"name\">IO</span>.<span class=\"name\">initializing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if and only if it is invoked during initialization.\n\nPrograms can execute `IO` actions during an initialization phase that occurs before the `main`\nfunction is executed. The attribute `@[init <action>]` specifies which IO action is executed to set\nthe value of an opaque constant.\n","docLink":"./Init/System/IO.html#IO.initializing","kind":"opaque","line":188,"name":"IO.initializing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L188-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#allocprof\"><span class=\"name\">allocprof</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#allocprof","kind":"opaque","line":186,"name":"allocprof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#timeit\"><span class=\"name\">timeit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Times the execution of an `IO` action.\n\nThe provided message `msg` and the time take are printed to the current standard error as a side\neffect.\n","docLink":"./Init/System/IO.html#timeit","kind":"opaque","line":178,"name":"timeit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L178-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#unsafeIO\"><span class=\"name\">unsafeIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A monad that can have side effects on the external world or throw exceptions of type `ε`.\n\n`BaseIO` is a version of this monad that cannot throw exceptions. `IO` sets the exception type to\n`IO.Error`.\n","docLink":"./Init/System/IO.html#unsafeIO","kind":"def","line":174,"name":"unsafeIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L174-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#unsafeEIO\"><span class=\"name\">unsafeEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Executes arbitrary side effects in a pure context, with exceptions indicated via `Except`. This a\n**dangerous** operation that can easily undermine important assumptions about the meaning of Lean\nprograms, and it should only be used with great care and a thorough understanding of compiler\ninternals, and even then only to implement observationally pure operations.\n\nThis function is not a good way to convert an `EIO α` or `IO α` into an `α`. Instead, use\n[`do`-notation](https://lean-lang.org/doc/reference/4.25.0-rc2/find/?domain=Verso.Genre.Manual.section&name=do-notation).\n\nBecause the resulting value is treated as a side-effect-free term, the compiler may re-order,\nduplicate, or delete calls to this function. The side effect may even be hoisted into a constant,\ncausing the side effect to occur at initialization time, even if it would otherwise never be called.\n","docLink":"./Init/System/IO.html#unsafeEIO","kind":"def","line":158,"name":"unsafeEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L158-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#unsafeBaseIO\"><span class=\"name\">unsafeBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Executes arbitrary side effects in a pure context. This a **dangerous** operation that can easily\nundermine important assumptions about the meaning of Lean programs, and it should only be used with\ngreat care and a thorough understanding of compiler internals, and even then only to implement\nobservationally pure operations.\n\nThis function is not a good way to convert a `BaseIO α` into an `α`. Instead, use\n[`do`-notation](https://lean-lang.org/doc/reference/4.25.0-rc2/find/?domain=Verso.Genre.Manual.section&name=do-notation).\n\nBecause the resulting value is treated as a side-effect-free term, the compiler may re-order,\nduplicate, or delete calls to this function. The side effect may even be hoisted into a constant,\ncausing the side effect to occur at initialization time, even if it would otherwise never be called.\n","docLink":"./Init/System/IO.html#unsafeBaseIO","kind":"def","line":141,"name":"unsafeBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L141-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.toEIO\"><span class=\"name\">IO</span>.<span class=\"name\">toEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/System/IOError.html#IO.Error\">Error</a> → <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs an `IO` action in some other `EIO` monad, using `f` to translate `IO` exceptions.\n","docLink":"./Init/System/IO.html#IO.toEIO","kind":"def","line":131,"name":"IO.toEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L131-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.toIO'\"><span class=\"name\">EIO</span>.<span class=\"name\">toIO'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Converts an `EIO ε` action that might throw an exception of type `ε` into an exception-free `IO`\naction that returns an `Except` value.\n","docLink":"./Init/System/IO.html#EIO.toIO'","kind":"def","line":124,"name":"EIO.toIO'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L124-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.toIO\"><span class=\"name\">EIO</span>.<span class=\"name\">toIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Converts an `EIO ε` action into an `IO` action by translating any exceptions that it throws into\n`IO.Error`s using `f`.\n","docLink":"./Init/System/IO.html#EIO.toIO","kind":"def","line":117,"name":"EIO.toIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L117-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.toIO\"><span class=\"name\">BaseIO</span>.<span class=\"name\">toIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs a `BaseIO` action, which cannot throw an exception, as an `IO` action.\n\nThis function is usually used implicitly via [automatic monadic\nlifting](https://lean-lang.org/doc/reference/4.25.0-rc2/find/?domain=Verso.Genre.Manual.section&name=lifting-monads) rather than being called explicitly.\n","docLink":"./Init/System/IO.html#BaseIO.toIO","kind":"def","line":108,"name":"BaseIO.toIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L108-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO\"><span class=\"name\">IO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"A monad that supports arbitrary side effects and throwing exceptions of type `IO.Error`.\n","docLink":"./Init/System/IO.html#IO","kind":"def","line":103,"name":"IO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L103-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.ofExcept\"><span class=\"name\">EIO</span>.<span class=\"name\">ofExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Converts an `Except ε` action into an `EIO ε` action.\n\nIf the `Except ε` action throws an exception, then the resulting `EIO ε` action throws the same\nexception. Otherwise, the value is returned.\n","docLink":"./Init/System/IO.html#EIO.ofExcept","kind":"def","line":91,"name":"EIO.ofExcept","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L91-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.catchExceptions\"><span class=\"name\">EIO</span>.<span class=\"name\">catchExceptions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Handles any exception that might be thrown by an `EIO ε` action, transforming it into an\nexception-free `BaseIO` action.\n","docLink":"./Init/System/IO.html#EIO.catchExceptions","kind":"def","line":81,"name":"EIO.catchExceptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L81-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO.toBaseIO\"><span class=\"name\">EIO</span>.<span class=\"name\">toBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Converts an `EIO ε` action that might throw an exception of type `ε` into an exception-free `BaseIO`\naction that returns an `Except` value.\n","docLink":"./Init/System/IO.html#EIO.toBaseIO","kind":"def","line":71,"name":"EIO.toBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L71-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instMonadLiftBaseIOEIO\"><span class=\"name\">instMonadLiftBaseIOEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instMonadLiftBaseIOEIO","kind":"instance","line":69,"name":"instMonadLiftBaseIOEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO.toEIO\"><span class=\"name\">BaseIO</span>.<span class=\"name\">toEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs a `BaseIO` action, which cannot throw an exception, in any other `EIO` monad.\n\nThis function is usually used implicitly via [automatic monadic\nlifting](https://lean-lang.org/doc/reference/4.25.0-rc2/find/?domain=Verso.Genre.Manual.section&name=lifting-monads) rather being than called explicitly.\n","docLink":"./Init/System/IO.html#BaseIO.toEIO","kind":"def","line":58,"name":"BaseIO.toEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L58-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instMonadFinallyBaseIO\"><span class=\"name\">instMonadFinallyBaseIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instMonadFinallyBaseIO","kind":"instance","line":56,"name":"instMonadFinallyBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instMonadBaseIO\"><span class=\"name\">instMonadBaseIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instMonadBaseIO","kind":"instance","line":55,"name":"instMonadBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#BaseIO\"><span class=\"name\">BaseIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"An `IO` monad that cannot throw exceptions.\n","docLink":"./Init/System/IO.html#BaseIO","kind":"def","line":50,"name":"BaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L50-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instInhabitedEIO\"><span class=\"name\">instInhabitedEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instInhabitedEIO","kind":"instance","line":48,"name":"instInhabitedEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instOrElseEIO\"><span class=\"name\">instOrElseEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse\">OrElse</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instOrElseEIO","kind":"instance","line":47,"name":"instOrElseEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instMonadExceptOfEIO\"><span class=\"name\">instMonadExceptOfEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instMonadExceptOfEIO","kind":"instance","line":46,"name":"instMonadExceptOfEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instMonadFinallyEIO\"><span class=\"name\">instMonadFinallyEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instMonadFinallyEIO","kind":"instance","line":45,"name":"instMonadFinallyEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#instMonadEIO\"><span class=\"name\">instMonadEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#instMonadEIO","kind":"instance","line":44,"name":"instMonadEIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#EIO\"><span class=\"name\">EIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"A monad that can have side effects on the external world or throw exceptions of type `ε`.\n\n`BaseIO` is a version of this monad that cannot throw exceptions. `IO` sets the exception type to\n`IO.Error`.\n","docLink":"./Init/System/IO.html#EIO","kind":"def","line":29,"name":"EIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L29-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.RealWorld.instNonempty\"><span class=\"name\">IO</span>.<span class=\"name\">RealWorld</span>.<span class=\"name\">instNonempty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">RealWorld</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.RealWorld.instNonempty","kind":"instance","line":26,"name":"IO.RealWorld.instNonempty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.RealWorld\"><span class=\"name\">IO</span>.<span class=\"name\">RealWorld</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A representation of “the real world” that's used in `IO` monads to ensure that `IO` actions are not\nreordered.\n","docLink":"./Init/System/IO.html#IO.RealWorld","kind":"def","line":20,"name":"IO.RealWorld","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L20-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/IO.html#IO.RealWorld.nonemptyType\"><span class=\"name\">IO</span>.<span class=\"name\">RealWorld</span>.<span class=\"name\">nonemptyType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>","info":{"doc":"","docLink":"./Init/System/IO.html#IO.RealWorld.nonemptyType","kind":"opaque","line":18,"name":"IO.RealWorld.nonemptyType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/IO.lean#L18-L18"}}],"imports":["Init.System.IOError","Init.System.FilePath","Init.Data.Ord.UInt","Init.Data.String.Extra"],"instances":[{"className":"Nonempty","name":"IO.RealWorld.instNonempty","typeNames":["IO.RealWorld"]},{"className":"Monad","name":"instMonadEIO","typeNames":["EIO"]},{"className":"MonadFinally","name":"instMonadFinallyEIO","typeNames":["EIO"]},{"className":"MonadExceptOf","name":"instMonadExceptOfEIO","typeNames":["EIO"]},{"className":"OrElse","name":"instOrElseEIO","typeNames":["EIO"]},{"className":"Inhabited","name":"instInhabitedEIO","typeNames":["EIO"]},{"className":"Monad","name":"instMonadBaseIO","typeNames":["BaseIO"]},{"className":"MonadFinally","name":"instMonadFinallyBaseIO","typeNames":["BaseIO"]},{"className":"MonadLift","name":"instMonadLiftBaseIOEIO","typeNames":["BaseIO","EIO"]},{"className":"Inhabited","name":"IO.instInhabitedTaskState","typeNames":["IO.TaskState"]},{"className":"Repr","name":"IO.instReprTaskState","typeNames":["IO.TaskState"]},{"className":"Decidable","name":"IO.instDecidableEqTaskState","typeNames":["Eq"]},{"className":"Ord","name":"IO.instOrdTaskState","typeNames":["IO.TaskState"]},{"className":"LT","name":"IO.instLTTaskState","typeNames":["IO.TaskState"]},{"className":"LE","name":"IO.instLETaskState","typeNames":["IO.TaskState"]},{"className":"Min","name":"IO.instMinTaskState","typeNames":["IO.TaskState"]},{"className":"Max","name":"IO.instMaxTaskState","typeNames":["IO.TaskState"]},{"className":"ToString","name":"IO.instToStringTaskState","typeNames":["IO.TaskState"]},{"className":"Inhabited","name":"IO.FS.instInhabitedStream","typeNames":["IO.FS.Stream"]},{"className":"Repr","name":"IO.FS.instReprDirEntry","typeNames":["IO.FS.DirEntry"]},{"className":"Repr","name":"IO.FS.instReprFileType","typeNames":["IO.FS.FileType"]},{"className":"BEq","name":"IO.FS.instBEqFileType","typeNames":["IO.FS.FileType"]},{"className":"Repr","name":"IO.FS.instReprSystemTime","typeNames":["IO.FS.SystemTime"]},{"className":"BEq","name":"IO.FS.instBEqSystemTime","typeNames":["IO.FS.SystemTime"]},{"className":"Ord","name":"IO.FS.instOrdSystemTime","typeNames":["IO.FS.SystemTime"]},{"className":"Inhabited","name":"IO.FS.instInhabitedSystemTime","typeNames":["IO.FS.SystemTime"]},{"className":"LT","name":"IO.FS.instLTSystemTime","typeNames":["IO.FS.SystemTime"]},{"className":"LE","name":"IO.FS.instLESystemTime","typeNames":["IO.FS.SystemTime"]},{"className":"Repr","name":"IO.FS.instReprMetadata","typeNames":["IO.FS.Metadata"]},{"className":"MonadLift","name":"IO.instMonadLiftSTRealWorldBaseIO","typeNames":["ST","BaseIO"]},{"className":"Nonempty","name":"IO.instNonemptyCancelToken","typeNames":["IO.CancelToken"]}],"name":"Init.System.IO"}