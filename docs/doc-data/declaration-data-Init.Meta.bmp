{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`dsimp!` is shorthand for `dsimp` with `autoUnfold := true`.\nThis will unfold applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be used to partially evaluate many definitions. ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold","kind":"def","line":96,"name":"Lean.Parser.Tactic.dsimpAutoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L96-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithBang\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArithBang</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_all_arith!` has been deprecated. It was a shorthand for `simp_all! +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithBang","kind":"def","line":89,"name":"Lean.Parser.Tactic.simpAllArithBang","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L89-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_all_arith` has been deprecated. It was a shorthand for `simp_all +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith","kind":"def","line":83,"name":"Lean.Parser.Tactic.simpAllArith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L83-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_all!` is shorthand for `simp_all` with `autoUnfold := true`.\nThis will unfold applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be used to partially evaluate many definitions. ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold","kind":"def","line":78,"name":"Lean.Parser.Tactic.simpAllAutoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L78-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArithBang\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArithBang</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_arith!` has been deprecated. It was a shorthand for `simp! +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArithBang","kind":"def","line":72,"name":"Lean.Parser.Tactic.simpArithBang","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L72-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_arith` has been deprecated. It was a shorthand for `simp +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArith","kind":"def","line":66,"name":"Lean.Parser.Tactic.simpArith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L66-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp!` is shorthand for `simp` with `autoUnfold := true`.\nThis will unfold applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be used to partially evaluate many definitions. ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold","kind":"def","line":61,"name":"Lean.Parser.Tactic.simpAutoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L61-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">declareSimpLikeTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic","kind":"def","line":42,"name":"Lean.Parser.Tactic.declareSimpLikeTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L42-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind","kind":"def","line":40,"name":"Lean.Parser.Tactic.dsimpKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind","kind":"def","line":39,"name":"Lean.Parser.Tactic.simpAllKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.tacticErw___\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticErw___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`erw [rules]` is a shorthand for `rw (transparency := .default) [rules]`.\nThis does rewriting up to unfolding of regular definitions (by comparison to regular `rw`\nwhich only unfolds `@[reducible]` definitions). ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.tacticErw___","kind":"def","line":36,"name":"Lean.Parser.Tactic.tacticErw___","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prio_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prio_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.termEval_prio_","kind":"def","line":29,"name":"Lean.termEval_prio_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prec_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prec_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.termEval_prec_","kind":"def","line":21,"name":"Lean.termEval_prec_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Meta.lean#L21-L21"}}],"imports":["Init.Meta.Defs","Init.Meta.Defs"],"instances":[],"name":"Init.Meta"}