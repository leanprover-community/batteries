{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.List.stream_take_eq_take_drop\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">stream_take_eq_take_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">Stream.take</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.List.stream_take_eq_take_drop","kind":"theorem","line":89,"name":"Std.List.stream_take_eq_take_drop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L89-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.List.stream_drop_eq_drop\"><span class=\"name\">Std</span>.<span class=\"name\">List</span>.<span class=\"name\">stream_drop_eq_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Stream.html#Std.Stream.drop\">Stream.drop</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.List.stream_drop_eq_drop","kind":"theorem","line":81,"name":"Std.List.stream_drop_eq_drop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L81-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.take_eq_takeTR\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">take_eq_takeTR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR\">takeTR</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.take_eq_takeTR","kind":"theorem","line":76,"name":"Std.Stream.take_eq_takeTR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.snd_takeTR\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">snd_takeTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR\">takeTR</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/Stream.html#Std.Stream.drop\">drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.snd_takeTR","kind":"theorem","line":73,"name":"Std.Stream.snd_takeTR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.snd_takeTR_loop\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">snd_takeTR_loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR.loop\">takeTR.loop</a> <span class=\"fn\">s</span> <span class=\"fn\">acc</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/Stream.html#Std.Stream.drop\">drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.snd_takeTR_loop","kind":"theorem","line":67,"name":"Std.Stream.snd_takeTR_loop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L67-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.fst_takeTR\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">fst_takeTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR\">takeTR</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.fst_takeTR","kind":"theorem","line":64,"name":"Std.Stream.fst_takeTR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L64-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.fst_takeTR_loop\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">fst_takeTR_loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR.loop\">takeTR.loop</a> <span class=\"fn\">s</span> <span class=\"fn\">acc</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.fst_takeTR_loop","kind":"theorem","line":58,"name":"Std.Stream.fst_takeTR_loop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L58-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR.loop\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">takeTR</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"Inner loop for `Stream.takeTR`. ","docLink":"./Batteries/Data/Stream.html#Std.Stream.takeTR.loop","kind":"def","line":52,"name":"Std.Stream.takeTR.loop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L52-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.takeTR\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">takeTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></div></div>","info":{"doc":"Tail recursive version of `Stream.take`. ","docLink":"./Batteries/Data/Stream.html#Std.Stream.takeTR","kind":"def","line":47,"name":"Std.Stream.takeTR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L47-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.snd_take_eq_drop\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">snd_take_eq_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/Stream.html#Std.Stream.drop\">drop</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.snd_take_eq_drop","kind":"theorem","line":39,"name":"Std.Stream.snd_take_eq_drop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L39-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.fst_take_succ\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">fst_take_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <span class=\"fn\">s</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream.next?\">next?</a> <span class=\"fn\">s</span></span> with\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.fst_take_succ","kind":"theorem","line":33,"name":"Std.Stream.fst_take_succ","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L33-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.fst_take_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">fst_take_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/Stream.html#Std.Stream.take\">take</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Stream.html#Std.Stream.fst_take_zero","kind":"theorem","line":30,"name":"Std.Stream.fst_take_zero","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.take\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"Read up to `n` values from the stream `s` as a list from first to last. ","docLink":"./Batteries/Data/Stream.html#Std.Stream.take","kind":"def","line":20,"name":"Std.Stream.take","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L20-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Stream.html#Std.Stream.drop\"><span class=\"name\">Std</span>.<span class=\"name\">Stream</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Stream</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"Drop up to `n` values from the stream `s`. ","docLink":"./Batteries/Data/Stream.html#Std.Stream.drop","kind":"def","line":12,"name":"Std.Stream.drop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Stream.lean#L12-L18"}}],"imports":["Init"],"instances":[],"name":"Batteries.Data.Stream"}