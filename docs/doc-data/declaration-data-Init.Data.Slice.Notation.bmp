{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Rii</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rii\">Rii</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable.mkSlice","kind":"def","line":105,"name":"Std.Rii.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Rii</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rii\">Rii</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable.mk","kind":"ctor","line":104,"name":"Std.Rii.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Rii</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over the full range in the\nindex type `β`\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Rii.Sliceable","kind":"class","line":98,"name":"Std.Rii.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L98-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Rio</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rio\">Rio</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable.mkSlice","kind":"def","line":96,"name":"Std.Rio.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Rio</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rio\">Rio</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable.mk","kind":"ctor","line":95,"name":"Std.Rio.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Rio</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being left\\-unbounded right\\-open\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Rio.Sliceable","kind":"class","line":89,"name":"Std.Rio.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L89-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Ric</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Ric\">Ric</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable.mkSlice","kind":"def","line":87,"name":"Std.Ric.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Ric</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Ric\">Ric</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable.mk","kind":"ctor","line":86,"name":"Std.Ric.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Ric</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being left\\-unbounded right\\-closed\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Ric.Sliceable","kind":"class","line":80,"name":"Std.Ric.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L80-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Roi</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Roi\">Roi</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable.mkSlice","kind":"def","line":78,"name":"Std.Roi.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Roi</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Roi\">Roi</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable.mk","kind":"ctor","line":77,"name":"Std.Roi.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Roi</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being left\\-open right\\-unbounded\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Roi.Sliceable","kind":"class","line":71,"name":"Std.Roi.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L71-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Roo</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Roo\">Roo</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable.mkSlice","kind":"def","line":69,"name":"Std.Roo.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Roo</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Roo\">Roo</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable.mk","kind":"ctor","line":68,"name":"Std.Roo.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Roo</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being open\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Roo.Sliceable","kind":"class","line":62,"name":"Std.Roo.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L62-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Roc</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Roc\">Roc</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable.mkSlice","kind":"def","line":60,"name":"Std.Roc.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Roc</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Roc\">Roc</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable.mk","kind":"ctor","line":59,"name":"Std.Roc.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Roc</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being left\\-open right\\-closed\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Roc.Sliceable","kind":"class","line":53,"name":"Std.Roc.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L53-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Rci</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rci\">Rci</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable.mkSlice","kind":"def","line":51,"name":"Std.Rci.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Rci</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rci\">Rci</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable.mk","kind":"ctor","line":50,"name":"Std.Rci.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Rci</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being left\\-closed right\\-unbounded\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Rci.Sliceable","kind":"class","line":44,"name":"Std.Rci.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L44-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Rco</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rco\">Rco</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable.mkSlice","kind":"def","line":42,"name":"Std.Rco.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Rco</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rco\">Rco</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable.mk","kind":"ctor","line":41,"name":"Std.Rco.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Rco</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being left\\-closed right\\-open\\.\n\nThe type of resulting the slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Rco.Sliceable","kind":"class","line":35,"name":"Std.Rco.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L35-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable.mkSlice\"><span class=\"name\">Std</span>.<span class=\"name\">Rcc</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mkSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rcc\">Rcc</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable.mkSlice","kind":"def","line":33,"name":"Std.Rcc.Sliceable.mkSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Rcc</span>.<span class=\"name\">Sliceable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkSlice</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rcc\">Rcc</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable\">Sliceable</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable.mk","kind":"ctor","line":32,"name":"Std.Rcc.Sliceable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable\"><span class=\"name\">Std</span>.<span class=\"name\">Rcc</span>.<span class=\"name\">Sliceable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> w)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>","info":{"doc":"This typeclass indicates how to obtain slices of elements of `α` over ranges in the index type\n`β`, the ranges being closed\\.\n\nThe type of the resulting slices is `γ`\\.\n","docLink":"./Init/Data/Slice/Notation.html#Std.Rcc.Sliceable","kind":"class","line":26,"name":"Std.Rcc.Sliceable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Notation.lean#L26-L33"}}],"imports":["Init.Data.Range.Polymorphic.PRange"],"instances":[],"name":"Init.Data.Slice.Notation"}