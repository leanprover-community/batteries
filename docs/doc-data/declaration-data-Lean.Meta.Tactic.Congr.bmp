{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrN\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">closePre </span><span class=\"fn\">closePost</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Given a goal of the form `⊢ f as = f bs`, `⊢ (p → q) = (p' → q')`, or `⊢ f as ≍ f bs`, try to apply congruence.\nIt takes proof irrelevance into account, and the fact that `Decidable p` is a subsingleton.\n\n* Applies `congr` recursively up to depth `depth`.\n* If `closePre := true`, it will attempt to close new goals\n  using `Eq.refl`, `HEq.refl`, and `assumption` with reducible transparency.\n* If `closePost := true`, it will try again on goals on which `congr` failed to make progress\n  with default transparency.\n","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrN","kind":"def","line":93,"name":"Lean.MVarId.congrN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Congr.lean#L93-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrCore\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Given a goal of the form `⊢ f as = f bs`, `⊢ (p → q) = (p' → q')`, or `⊢ f as ≍ f bs`, try to apply congruence.\nIt takes proof irrelevance into account, and the fact that `Decidable p` is a subsingleton.\n","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrCore","kind":"def","line":79,"name":"Lean.MVarId.congrCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Congr.lean#L79-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrImplies?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrImplies?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>","info":{"doc":"Try to apply `implies_congr`.\n","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrImplies?","kind":"def","line":70,"name":"Lean.MVarId.congrImplies?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Congr.lean#L70-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.hcongr?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">hcongr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>","info":{"doc":"Try to apply a `hcongr` congruence theorem, and then tries to close resulting goals\nusing `Eq.refl`, `HEq.refl`, and assumption.\n","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.hcongr?","kind":"def","line":54,"name":"Lean.MVarId.hcongr?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Congr.lean#L54-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congr?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>","info":{"doc":"Try to apply a `simp` congruence theorem.\n","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congr?","kind":"def","line":41,"name":"Lean.MVarId.congr?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Congr.lean#L41-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrPre\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrPre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Preprocessor before applying congruence theorem.\nTries to close new goals using `Eq.refl`, `HEq.refl`, and `assumption`.\nIt also tries to apply `heq_of_eq`.\n","docLink":"./Lean/Meta/Tactic/Congr.html#Lean.MVarId.congrPre","kind":"def","line":19,"name":"Lean.MVarId.congrPre","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Congr.lean#L19-L29"}}],"imports":["Lean.Meta.CongrTheorems","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Refl","Lean.Meta.Tactic.Assumption"],"instances":[],"name":"Lean.Meta.Tactic.Congr"}