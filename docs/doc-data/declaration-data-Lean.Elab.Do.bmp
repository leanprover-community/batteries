{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn","kind":"def","line":1827,"name":"Lean.Elab.Term.expandTermReturn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1827-L1828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermUnless</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless","kind":"def","line":1824,"name":"Lean.Elab.Term.expandTermUnless","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1824-L1825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermTry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry","kind":"def","line":1821,"name":"Lean.Elab.Term.expandTermTry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1821-L1822"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor","kind":"def","line":1818,"name":"Lean.Elab.Term.expandTermFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1818-L1819"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">elabDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo","kind":"def","line":1800,"name":"Lean.Elab.Term.Do.elabDo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1800-L1808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doStx </span><span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run","kind":"def","line":1795,"name":"Lean.Elab.Term.Do.ToCodeBlock.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1795-L1796"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doSeqToCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","kind":"opaque","line":1712,"name":"Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1712-L1792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doTryToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doTry</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doTry; doElems`\n```\ndef doTry := leading_parser \"try \" >> doSeq >> many (doCatch <|> doCatchMatch) >> optional doFinally\ndef doCatch      := leading_parser \"catch \" >> binderIdent >> optional (\":\" >> termParser) >> darrow >> doSeq\ndef doCatchMatch := leading_parser \"catch \" >> doMatchAlts\ndef doFinally    := leading_parser \"finally \" >> doSeq\n```\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","kind":"opaque","line":1652,"name":"Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1652-L1710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doMatchExprToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doMatchExpr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doMatchExpr; doElems` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode","kind":"opaque","line":1634,"name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1634-L1650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doMatchToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doMatch</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doMatch; doElems` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","kind":"opaque","line":1616,"name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1616-L1632"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doForToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doFor</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doFor; doElems`\n`doFor` is of the form\n```\ndef doForDecl := leading_parser termParser >> \" in \" >> withForbidden \"do\" termParser\ndef doFor := leading_parser \"for \" >> sepBy1 doForDecl \", \" >> \"do \" >> doSeq\n```\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode","kind":"opaque","line":1524,"name":"Lean.Elab.Term.Do.ToCodeBlock.doForToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1524-L1614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doUnlessToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doUnless</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doUnless; doElems`\n`doUnless` is of the form\n```\n\"unless \" >> termParser >> \"do \" >> doSeq\n```  ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","kind":"opaque","line":1512,"name":"Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1512-L1522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doIfToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doIf</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doIf; doElems`\n`doIf` is of the form\n```\n\"if \" >> optIdent >> termParser >> \" then \" >> doSeq\n >> many (group (try (group (\" else \" >> \" if \")) >> optIdent >> termParser >> \" then \" >> doSeq))\n >> optional (\" else \" >> doSeq)\n```  ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","kind":"opaque","line":1498,"name":"Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1498-L1510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doReassignArrowToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doReassignArrow</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doReassignArrow; doElems`\n`doReassignArrow` is of the form\n```\n(doIdDecl <|> doPatDecl)\n```\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","kind":"opaque","line":1473,"name":"Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1473-L1496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doLetElseToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetElse</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","kind":"opaque","line":1459,"name":"Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1459-L1471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doLetArrowToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetArrow</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doLetArrow; doElems`\n`doLetArrow` is of the form\n```\n\"let \" >> optional \"mut \" >> (doIdDecl <|> doPatDecl)\n```\nwhere\n```\ndef doIdDecl   := leading_parser ident >> optType >> leftArrow >> doElemParser\ndef doPatDecl  := leading_parser termParser >> leftArrow >> doElemParser >> optional (\" | \" >> doSeq)\n```\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","kind":"opaque","line":1410,"name":"Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1410-L1457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">concatWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"\"Concatenate\" `c` with `doSeqToCode doElems` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith","kind":"opaque","line":1401,"name":"Lean.Elab.Term.Do.ToCodeBlock.concatWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1401-L1408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">tryCatchPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryCode</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finallyCode?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","kind":"def","line":1393,"name":"Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1393-L1398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">getTryCatchUpdatedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryCode</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finallyCode?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","kind":"def","line":1385,"name":"Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1385-L1391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">codeBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","kind":"def","line":1383,"name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1383-L1383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">optType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","kind":"def","line":1382,"name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1382-L1382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x","kind":"def","line":1381,"name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.x","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1381-L1381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">optType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeBlock</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","kind":"ctor","line":1380,"name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1380-L1380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch","kind":"structure","line":1380,"name":"Lean.Elab.Term.Do.ToCodeBlock.Catch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1380-L1383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doReturnToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doReturn</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Generate `CodeBlock` for `doReturn` which is of the form\n```\n\"return \" >> optional termParser\n```\n`doElems` is only used for sanity checking. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","kind":"def","line":1369,"name":"Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1369-L1378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkLetArrowRHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","kind":"def","line":1359,"name":"Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1359-L1367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">expandLiftMethod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","kind":"def","line":1351,"name":"Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1351-L1357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ensureEOS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","kind":"def","line":1311,"name":"Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1311-L1313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ensureInsideFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","kind":"def","line":1307,"name":"Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1307-L1309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">mkForInBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\">(<span class=\"fn\">forInBody</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>) → <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","kind":"def","line":1300,"name":"Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1300-L1305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","kind":"def","line":1298,"name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1298-L1298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","kind":"def","line":1297,"name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1297-L1297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","kind":"ctor","line":1296,"name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1296-L1296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","kind":"structure","line":1296,"name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1296-L1298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">withFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor","kind":"def","line":1293,"name":"Lean.Elab.Term.Do.ToCodeBlock.withFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1293-L1294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkNotShadowingMutable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","kind":"def","line":1285,"name":"Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1285-L1291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkReassignable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","kind":"def","line":1277,"name":"Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1277-L1283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">withNewMutableVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutable</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","kind":"def","line":1274,"name":"Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1274-L1275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M","kind":"def","line":1272,"name":"Lean.Elab.Term.Do.ToCodeBlock.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1272-L1272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">insideFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","kind":"def","line":1270,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1270-L1270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">mutableVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","kind":"def","line":1269,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1269-L1269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Syntax to reference the result of the monadic computation performed by the do notation. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","kind":"def","line":1268,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1268-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Syntax representing the monad associated with the do notation. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m","kind":"def","line":1266,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context.m","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1266-L1266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref","kind":"def","line":1264,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1264-L1264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutableVars</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insideFor</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk","kind":"ctor","line":1263,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1263-L1263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context","kind":"structure","line":1263,"name":"Lean.Elab.Term.Do.ToCodeBlock.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1263-L1270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">isMutableLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet","kind":"def","line":1255,"name":"Lean.Elab.Term.Do.isMutableLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1255-L1259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">matchNestedTermResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">r </span><span class=\"fn\">bc</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>","info":{"doc":"Given a term `term` produced by `ToTerm.run`, pattern match on its result.\nSee comment at the beginning of the `ToTerm` namespace.\n\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\nThe result is a sequence of `doElem` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","kind":"def","line":1200,"name":"Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1200-L1251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkNestedTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">r </span><span class=\"fn\">bc</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm","kind":"def","line":1197,"name":"Lean.Elab.Term.Do.ToTerm.mkNestedTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1197-L1198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkNestedKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">r </span><span class=\"fn\">bc</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"Given\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\ngenerate Kind. See comment at the beginning of the `ToTerm` namespace. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind","kind":"def","line":1180,"name":"Lean.Elab.Term.Do.ToTerm.mkNestedKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1180-L1195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a> := <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular\">Kind.regular</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run","kind":"def","line":1177,"name":"Lean.Elab.Term.Do.ToTerm.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1177-L1178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">toTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm","kind":"opaque","line":1133,"name":"Lean.Elab.Term.Do.ToTerm.toTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1133-L1175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp","kind":"def","line":1130,"name":"Lean.Elab.Term.Do.ToTerm.mkJmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1130-L1131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkJoinPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint","kind":"def","line":1101,"name":"Lean.Elab.Term.Do.ToTerm.mkJoinPoint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1101-L1128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optIdent </span><span class=\"fn\">cond </span><span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte","kind":"def","line":1094,"name":"Lean.Elab.Term.Do.ToTerm.mkIte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1094-L1099"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">reassignToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reassign </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm","kind":"def","line":1086,"name":"Lean.Elab.Term.Do.ToTerm.reassignToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1086-L1092"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">declToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm","kind":"def","line":1055,"name":"Lean.Elab.Term.Do.ToTerm.declToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1055-L1084"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">seqToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm","kind":"def","line":1041,"name":"Lean.Elab.Term.Do.ToTerm.seqToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1041-L1053"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">actionTerminalToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","kind":"def","line":1029,"name":"Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1029-L1039"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">breakToTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm","kind":"def","line":1017,"name":"Lean.Elab.Term.Do.ToTerm.breakToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1017-L1027"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">continueToTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm","kind":"def","line":1005,"name":"Lean.Elab.Term.Do.ToTerm.continueToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L1005-L1015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">returnToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm","kind":"def","line":993,"name":"Lean.Elab.Term.Do.ToTerm.returnToTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L993-L1003"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkUVarTuple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple","kind":"def","line":989,"name":"Lean.Elab.Term.Do.ToTerm.mkUVarTuple","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L989-L991"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M","kind":"def","line":987,"name":"Lean.Elab.Term.Do.ToTerm.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L987-L987"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind","kind":"def","line":985,"name":"Lean.Elab.Term.Do.ToTerm.Context.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L985-L985"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars","kind":"def","line":984,"name":"Lean.Elab.Term.Do.ToTerm.Context.uvars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L984-L984"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Syntax to reference the result of the monadic computation performed by the do notation. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType","kind":"def","line":983,"name":"Lean.Elab.Term.Do.ToTerm.Context.returnType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L983-L983"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Syntax to reference the monad associated with the do notation. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m","kind":"def","line":981,"name":"Lean.Elab.Term.Do.ToTerm.Context.m","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L981-L981"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk","kind":"ctor","line":979,"name":"Lean.Elab.Term.Do.ToTerm.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L979-L979"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context","kind":"structure","line":979,"name":"Lean.Elab.Term.Do.ToTerm.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L979-L985"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">isRegular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular","kind":"def","line":975,"name":"Lean.Elab.Term.Do.ToTerm.Kind.isRegular","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L975-L977"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">instInhabitedKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind","kind":"instance","line":973,"name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L973-L973"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedPRBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","kind":"ctor","line":971,"name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L971-L971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedSBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","kind":"ctor","line":970,"name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L970-L970"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedPR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","kind":"ctor","line":969,"name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L969-L969"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","kind":"ctor","line":968,"name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L968-L968"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">forInWithReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","kind":"ctor","line":967,"name":"Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L967-L967"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">forIn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn","kind":"ctor","line":966,"name":"Lean.Elab.Term.Do.ToTerm.Kind.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L966-L966"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular","kind":"ctor","line":965,"name":"Lean.Elab.Term.Do.ToTerm.Kind.regular","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L965-L965"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind","kind":"inductive","line":964,"name":"Lean.Elab.Term.Do.ToTerm.Kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L964-L971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">annotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Helper method for annotating `term` with the raw syntax `ref`.\nWe use this method to implement finer-grained term infos for `do`-blocks.\n\nWe use `withRef term` to make sure the synthetic position for the `with_annotate_term` is equal\nto the one for `term`. This is important for producing error messages when there is a type mismatch.\nConsider the following example:\n```\nopaque f : IO Nat\n\ndef g : IO String := do\n  f\n```\nThere is at type mismatch at `f`, but it is detected when elaborating the expanded term\ncontaining the `with_annotate_term .. f`. The current `getRef` when this `annotate` is invoked\nis not necessarily `f`. Actually, it is the whole `do`-block. By using `withRef` we ensure\nthe synthetic position for the `with_annotate_term ..` is equal to `term`.\nRecall that synthetic positions are used when generating error messages.\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate","kind":"def","line":940,"name":"Lean.Elab.Term.Do.annotate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L940-L960"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">isDoExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Return `some action` if `doElem` is a `doExpr <action>`","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?","kind":"def","line":816,"name":"Lean.Elab.Term.Do.isDoExpr?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L816-L821"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">elseBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch","kind":"def","line":787,"name":"Lean.Elab.Term.Do.DoIfView.elseBranch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L787-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">thenBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch","kind":"def","line":786,"name":"Lean.Elab.Term.Do.DoIfView.thenBranch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L786-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">cond</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond","kind":"def","line":785,"name":"Lean.Elab.Term.Do.DoIfView.cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L785-L785"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">optIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent","kind":"def","line":784,"name":"Lean.Elab.Term.Do.DoIfView.optIdent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L784-L784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref","kind":"def","line":783,"name":"Lean.Elab.Term.Do.DoIfView.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L783-L783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">optIdent </span><span class=\"fn\">cond </span><span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk","kind":"ctor","line":782,"name":"Lean.Elab.Term.Do.DoIfView.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L782-L782"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView","kind":"structure","line":782,"name":"Lean.Elab.Term.Do.DoIfView","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L782-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkDoSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq","kind":"def","line":748,"name":"Lean.Elab.Term.Do.mkDoSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L748-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoReassignVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doReassign</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars","kind":"def","line":739,"name":"Lean.Elab.Term.Do.getDoReassignVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L739-L746"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetArrowVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetArrow</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars","kind":"def","line":730,"name":"Lean.Elab.Term.Do.getDoLetArrowVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L730-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoPatDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doPatDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars","kind":"def","line":725,"name":"Lean.Elab.Term.Do.getDoPatDeclVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L725-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoIdDeclVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doIdDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar","kind":"def","line":721,"name":"Lean.Elab.Term.Do.getDoIdDeclVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L721-L722"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetRecVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetRec</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars","kind":"def","line":710,"name":"Lean.Elab.Term.Do.getDoLetRecVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L710-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoHaveVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doHave</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars","kind":"def","line":706,"name":"Lean.Elab.Term.Do.getDoHaveVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L706-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLet</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars","kind":"def","line":702,"name":"Lean.Elab.Term.Do.getDoLetVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L702-L704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars","kind":"def","line":690,"name":"Lean.Elab.Term.Do.getLetDeclVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L690-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetEqnsDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letEqnsDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVars","kind":"def","line":684,"name":"Lean.Elab.Term.Do.getLetEqnsDeclVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L684-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetPatDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letPatDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars","kind":"def","line":679,"name":"Lean.Elab.Term.Do.getLetPatDeclVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L679-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getPatternsVarsEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx","kind":"def","line":675,"name":"Lean.Elab.Term.Do.getPatternsVarsEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L675-L677"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getPatternVarsEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx","kind":"def","line":671,"name":"Lean.Elab.Term.Do.getPatternVarsEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L671-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetIdDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letIdDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVars","kind":"def","line":664,"name":"Lean.Elab.Term.Do.getLetIdDeclVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L664-L668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetIdVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letId</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdVars","kind":"def","line":654,"name":"Lean.Elab.Term.Do.getLetIdVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L654-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">terminal</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Return a code block that executes `terminal` and then `k` with the value produced by `terminal`.\nThis method assumes `terminal` is a terminal ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat","kind":"def","line":639,"name":"Lean.Elab.Term.Do.concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L639-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkMatchExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«meta»</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatchExpr","kind":"def","line":629,"name":"Lean.Elab.Term.Do.mkMatchExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L629-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">genParam </span><span class=\"fn\">discrs </span><span class=\"fn\">optMotive</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch","kind":"def","line":621,"name":"Lean.Elab.Term.Do.mkMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L621-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkUnless</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless","kind":"def","line":617,"name":"Lean.Elab.Term.Do.mkUnless","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L617-L619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkPureUnitAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction","kind":"def","line":614,"name":"Lean.Elab.Term.Do.mkPureUnitAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L614-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">optIdent </span><span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte","kind":"def","line":600,"name":"Lean.Elab.Term.Do.mkIte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L600-L606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkContinue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue","kind":"def","line":597,"name":"Lean.Elab.Term.Do.mkContinue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L597-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkBreak</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak","kind":"def","line":594,"name":"Lean.Elab.Term.Do.mkBreak","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L594-L595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn","kind":"def","line":591,"name":"Lean.Elab.Term.Do.mkReturn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L591-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkTerminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction","kind":"def","line":588,"name":"Lean.Elab.Term.Do.mkTerminalAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L588-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq","kind":"def","line":585,"name":"Lean.Elab.Term.Do.mkSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L585-L586"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkReassignCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Extending code blocks with reassignments: `x : t := v` and `x : t ← v`.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `(x, y) ← t`\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore","kind":"def","line":571,"name":"Lean.Elab.Term.Do.mkReassignCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L571-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkVarDeclCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"Extending code blocks with variable declarations: `let x : t := v` and `let x : t ← v`.\nWe remove `x` from the collection of updated variables.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `let (x, y) := t`\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore","kind":"def","line":559,"name":"Lean.Elab.Term.Do.mkVarDeclCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L559-L569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">homogenize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></div></div>","info":{"doc":"Given two code blocks `c₁` and `c₂`, make sure they have the same set of updated variables.\nLet `ws` the union of the updated variables in `c₁‵ and ‵c₂`.\nWe use `extendUpdatedVars c₁ ws` and `extendUpdatedVars c₂ ws`\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize","kind":"def","line":548,"name":"Lean.Elab.Term.Do.homogenize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L548-L557"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>","info":{"doc":"Extend the set of updated variables. It assumes `ws` is a super set of `c.uvars`.\nWe **cannot** simply update the field `c.uvars`, because `c` may have shadowed some variable in `ws`.\nSee discussion at `pullExitPoints`.\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars","kind":"def","line":533,"name":"Lean.Elab.Term.Do.extendUpdatedVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L533-L543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVarsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux","kind":"def","line":497,"name":"Lean.Elab.Term.Do.extendUpdatedVarsAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L497-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">pullExitPoints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"Auxiliary operation for adding new variables to the collection of updated variables in a CodeBlock.\nWhen a new variable is not already in the collection, but is shadowed by some declaration in `c`,\nwe create auxiliary join points to make sure we preserve the semantics of the code block.\nExample: suppose we have the code block `print x; let x := 10; return x`. And we want to extend it\nwith the reassignment `x := x + 1`. We first use `pullExitPoints` to create\n```\nlet jp (x!1) :=  return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nand then we add the reassignment\n```\nx := x + 1\nlet jp (x!1) := return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nNote that we created a fresh variable `x!1` to avoid accidental name capture.\nAs another example, consider\n```\nprint x;\nlet x := 10\ny := y + 1;\nreturn x;\n```\nWe transform it into\n```\nlet jp (y x!1) := return x!1;\nprint x;\nlet x := 10\ny := y + 1;\njmp jp y x\n```\nand then we add the reassignment as in the previous example.\nWe need to include `y` in the jump, because each exit point is implicitly returning the set of\nupdate variables.\n\nWe implement the method as follows. Let `us` be `c.uvars`, then\n1- for each `return _ y` in `c`, we create a join point\n  `let j (us y!1) := return y!1`\n   and replace the `return _ y` with `jmp us y`\n2- for each `break`, we create a join point\n  `let j (us) := break`\n   and replace the `break` with `jmp us`.\n3- Same as 2 for `continue`.\n","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints","kind":"def","line":441,"name":"Lean.Elab.Term.Do.pullExitPoints","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L441-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">pullExitPointsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"`pullExitPointsAux rs c` auxiliary method for `pullExitPoints`, `rs` is the set of update variable in the current path.  ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux","kind":"opaque","line":416,"name":"Lean.Elab.Term.Do.pullExitPointsAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L416-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkJPBody</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"Create a new join point that takes `rs` and `val` as arguments. `val` must be syntax representing a pure value.\nThe body of the join point is created using `mkJPBody yFresh`, where `yFresh`\nis a fresh variable created by this method. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp","kind":"def","line":403,"name":"Lean.Elab.Term.Do.mkJmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L403-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkSimpleJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"Create a new join point for `c`, and jump to it with the variables `rs` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp","kind":"def","line":393,"name":"Lean.Elab.Term.Do.mkSimpleJmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L393-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">eraseOptVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar","kind":"def","line":388,"name":"Lean.Elab.Term.Do.eraseOptVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L388-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">eraseVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars","kind":"def","line":385,"name":"Lean.Elab.Term.Do.eraseVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L385-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">insertVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars","kind":"def","line":382,"name":"Lean.Elab.Term.Do.insertVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L382-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">addFreshJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP","kind":"def","line":377,"name":"Lean.Elab.Term.Do.addFreshJP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L377-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkFreshJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP","kind":"def","line":365,"name":"Lean.Elab.Term.Do.mkFreshJP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L365-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">attachJPs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs","kind":"def","line":362,"name":"Lean.Elab.Term.Do.attachJPs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L362-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">attachJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecl</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP","kind":"def","line":359,"name":"Lean.Elab.Term.Do.attachJP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L359-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body","kind":"def","line":357,"name":"Lean.Elab.Term.Do.JPDecl.body","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L357-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params","kind":"def","line":356,"name":"Lean.Elab.Term.Do.JPDecl.params","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L356-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name","kind":"def","line":355,"name":"Lean.Elab.Term.Do.JPDecl.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L355-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk","kind":"ctor","line":354,"name":"Lean.Elab.Term.Do.JPDecl.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L354-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl","kind":"structure","line":354,"name":"Lean.Elab.Term.Do.JPDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L354-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">convertTerminalActionIntoJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jp</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"Convert `action _ e` instructions in `c` into `let y ← e; jmp _ jp (xs y)`. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp","kind":"def","line":332,"name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L332-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkAuxDeclFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkCont</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor","kind":"def","line":324,"name":"Lean.Elab.Term.Do.mkAuxDeclFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L324-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasBreakContinueReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn","kind":"def","line":317,"name":"Lean.Elab.Term.Do.hasBreakContinueReturn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L317-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasBreakContinue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue","kind":"def","line":311,"name":"Lean.Elab.Term.Do.hasBreakContinue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L311-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasTerminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction","kind":"def","line":306,"name":"Lean.Elab.Term.Do.hasTerminalAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L306-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn","kind":"def","line":301,"name":"Lean.Elab.Term.Do.hasReturn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L301-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint","kind":"def","line":298,"name":"Lean.Elab.Term.Do.hasExitPoint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPointPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return true if the give code contains an exit point that satisfies `p` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred","kind":"def","line":284,"name":"Lean.Elab.Term.Do.hasExitPointPred","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L284-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeBlock</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.toMessageData","kind":"def","line":258,"name":"Lean.Elab.Term.Do.CodeBlock.toMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L258-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars","kind":"def","line":250,"name":"Lean.Elab.Term.Do.CodeBlock.uvars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L250-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code","kind":"def","line":249,"name":"Lean.Elab.Term.Do.CodeBlock.code","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk","kind":"ctor","line":248,"name":"Lean.Elab.Term.Do.CodeBlock.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L248-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A code block, and the collection of variables updated by it. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock","kind":"structure","line":247,"name":"Lean.Elab.Term.Do.CodeBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L247-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">VarSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet","kind":"def","line":245,"name":"Lean.Elab.Term.Do.VarSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L245-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">getRef?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?","kind":"def","line":231,"name":"Lean.Elab.Term.Do.Code.getRef?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L231-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode","kind":"instance","line":229,"name":"Lean.Elab.Term.Do.instInhabitedCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedCode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode.default","kind":"def","line":229,"name":"Lean.Elab.Term.Do.instInhabitedCode.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp","kind":"ctor","line":228,"name":"Lean.Elab.Term.Do.Code.jmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.matchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">matchExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«meta»</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.matchExpr","kind":"ctor","line":227,"name":"Lean.Elab.Term.Do.Code.matchExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">match</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">gen </span><span class=\"fn\">discrs </span><span class=\"fn\">optMotive</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match","kind":"ctor","line":226,"name":"Lean.Elab.Term.Do.Code.match","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L226-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optIdent </span><span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"Recall that an if-then-else may declare a variable using `optIdent` for the branches `thenBranch` and `elseBranch`. We store the variable name at `var?`. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite","kind":"ctor","line":224,"name":"Lean.Elab.Term.Do.Code.ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L224-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">return</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return","kind":"ctor","line":223,"name":"Lean.Elab.Term.Do.Code.return","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">continue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue","kind":"ctor","line":222,"name":"Lean.Elab.Term.Do.Code.continue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">break</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break","kind":"ctor","line":221,"name":"Lean.Elab.Term.Do.Code.break","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">action</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action","kind":"ctor","line":220,"name":"Lean.Elab.Term.Do.Code.action","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L220-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq","kind":"ctor","line":219,"name":"Lean.Elab.Term.Do.Code.seq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L219-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">joinpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body </span><span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"The Boolean value in `params` indicates whether we should use `(x : typeof! x)` when generating term Syntax or not ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint","kind":"ctor","line":217,"name":"Lean.Elab.Term.Do.Code.joinpoint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L217-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">reassign</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign","kind":"ctor","line":216,"name":"Lean.Elab.Term.Do.Code.reassign","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L216-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl","kind":"ctor","line":215,"name":"Lean.Elab.Term.Do.Code.decl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L215-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary datastructure for representing a `do` code block, and compiling \"reassignments\" (e.g., `x := x + 1`).\nWe convert `Code` into a `Syntax` term representing the:\n- `do`-block, or\n- the visitor argument for the `forIn` combinator.\n\nWe say the following constructors are terminals:\n- `break`:    for interrupting a `for x in s`\n- `continue`: for interrupting the current iteration of a `for x in s`\n- `return e`: for returning `e` as the result for the whole `do` computation block\n- `action a`: for executing action `a` as a terminal\n- `ite`:      if-then-else\n- `match`:    pattern matching\n- `jmp`       a goto to a join-point\n\nWe say the terminals `break`, `continue`, `action`, and `return` are \"exit points\"\n\nNote that, `return e` is not equivalent to `action (pure e)`. Here is an example:\n```\ndef f (x : Nat) : IO Unit := do\nif x == 0 then\n   return ()\nIO.println \"hello\"\n```\nExecuting `#eval f 0` will not print \"hello\". Now, consider\n```\ndef g (x : Nat) : IO Unit := do\nif x == 0 then\n   pure ()\nIO.println \"hello\"\n```\nThe `if` statement is essentially a noop, and \"hello\" is printed when we execute `g 0`.\n\n- `decl` represents all declaration-like `doElem`s (e.g., `let`, `have`, `let rec`).\n  The field `stx` is the actual `doElem`,\n  `vars` is the array of variables declared by it, and `cont` is the next instruction in the `do` code block.\n  `vars` is an array since we have declarations such as `let (a, b) := s`.\n\n- `reassign` is an reassignment-like `doElem` (e.g., `x := x + 1`).\n\n- `joinpoint` is a join point declaration: an auxiliary `let`-declaration used to represent the control-flow.\n\n- `seq a k` executes action `a`, ignores its result, and then executes `k`.\n  We also store the do-elements `dbg_trace` and `assert!` as actions in a `seq`.\n\nA code block `C` is well-formed if\n- For every `jmp ref j as` in `C`, there is a `joinpoint j ps b k` and `jmp ref j as` is in `k`, and\n  `ps.size == as.size` ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code","kind":"inductive","line":166,"name":"Lean.Elab.Term.Do.Code","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L166-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.vars","kind":"def","line":156,"name":"Lean.Elab.Term.Do.AltExpr.vars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L156-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAltExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr","kind":"instance","line":154,"name":"Lean.Elab.Term.Do.instInhabitedAltExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAltExpr</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr.default","kind":"def","line":154,"name":"Lean.Elab.Term.Do.instInhabitedAltExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.rhs","kind":"def","line":153,"name":"Lean.Elab.Term.Do.AltExpr.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.pvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">pvars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.pvars","kind":"def","line":152,"name":"Lean.Elab.Term.Do.AltExpr.pvars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.funName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">funName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.funName","kind":"def","line":151,"name":"Lean.Elab.Term.Do.AltExpr.funName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.var?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">var?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.var?","kind":"def","line":150,"name":"Lean.Elab.Term.Do.AltExpr.var?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.ref","kind":"def","line":149,"name":"Lean.Elab.Term.Do.AltExpr.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L149-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.mk","kind":"ctor","line":148,"name":"Lean.Elab.Term.Do.AltExpr.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `doMatchExpr` alternative. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr","kind":"structure","line":147,"name":"Lean.Elab.Term.Do.AltExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L147-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAlt</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt.default","kind":"def","line":145,"name":"Lean.Elab.Term.Do.instInhabitedAlt.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt","kind":"instance","line":145,"name":"Lean.Elab.Term.Do.instInhabitedAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs","kind":"def","line":144,"name":"Lean.Elab.Term.Do.Alt.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">patterns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns","kind":"def","line":143,"name":"Lean.Elab.Term.Do.Alt.patterns","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars","kind":"def","line":142,"name":"Lean.Elab.Term.Do.Alt.vars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref","kind":"def","line":141,"name":"Lean.Elab.Term.Do.Alt.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk","kind":"ctor","line":140,"name":"Lean.Elab.Term.Do.Alt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `doMatch` alternative. `vars` is the array of variables declared by `patterns`. ","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt","kind":"structure","line":139,"name":"Lean.Elab.Term.Do.Alt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L139-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var","kind":"def","line":137,"name":"Lean.Elab.Term.Do.Var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">expectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType","kind":"def","line":99,"name":"Lean.Elab.Term.ExtractMonadResult.expectedType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType","kind":"def","line":98,"name":"Lean.Elab.Term.ExtractMonadResult.returnType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m","kind":"def","line":97,"name":"Lean.Elab.Term.ExtractMonadResult.m","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk","kind":"ctor","line":96,"name":"Lean.Elab.Term.ExtractMonadResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult","kind":"structure","line":96,"name":"Lean.Elab.Term.ExtractMonadResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L96-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabLiftMethod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod","kind":"def","line":35,"name":"Lean.Elab.Term.elabLiftMethod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Do.lean#L35-L36"}}],"imports":["Lean.Elab.BindersUtil","Lean.Elab.PatternVar","Lean.Elab.Quotation.Util","Lean.Parser.Do"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Term.Do.instInhabitedAlt","typeNames":["Lean.Elab.Term.Do.Alt"]},{"className":"Inhabited","name":"Lean.Elab.Term.Do.instInhabitedAltExpr","typeNames":["Lean.Elab.Term.Do.AltExpr"]},{"className":"Inhabited","name":"Lean.Elab.Term.Do.instInhabitedCode","typeNames":["Lean.Elab.Term.Do.Code"]},{"className":"Inhabited","name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","typeNames":["Lean.Elab.Term.Do.ToTerm.Kind"]}],"name":"Lean.Elab.Do"}