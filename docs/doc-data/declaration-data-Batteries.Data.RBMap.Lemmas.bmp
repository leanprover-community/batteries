{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_insert","kind":"theorem","line":1243,"name":"Batteries.RBMap.find?_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1243-L1245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_insert","kind":"theorem","line":1239,"name":"Batteries.RBMap.findEntry?_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1239-L1241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_insert_of_ne\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?_insert_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k' </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_insert_of_ne","kind":"theorem","line":1236,"name":"Batteries.RBMap.find?_insert_of_ne","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1236-L1237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_insert_of_ne\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_insert_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k' </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_insert_of_ne","kind":"theorem","line":1232,"name":"Batteries.RBMap.findEntry?_insert_of_ne","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1232-L1234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_insert_of_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k' </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_insert_of_eq","kind":"theorem","line":1229,"name":"Batteries.RBMap.find?_insert_of_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1229-L1230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_insert_of_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k' </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_insert_of_eq","kind":"theorem","line":1225,"name":"Batteries.RBMap.findEntry?_insert_of_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1225-L1227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">k₂</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_congr","kind":"theorem","line":1222,"name":"Batteries.RBMap.find?_congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1222-L1223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k₂</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_congr","kind":"theorem","line":1218,"name":"Batteries.RBMap.findEntry?_congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1218-L1220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mem_toList_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_insert","kind":"theorem","line":1214,"name":"Batteries.RBMap.mem_toList_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1214-L1216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_insert_of_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mem_toList_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_insert_of_mem","kind":"theorem","line":1211,"name":"Batteries.RBMap.mem_toList_insert_of_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1211-L1212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_insert_self\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mem_toList_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_insert_self","kind":"theorem","line":1208,"name":"Batteries.RBMap.mem_toList_insert_self","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1208-L1209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.size_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.size_eq","kind":"theorem","line":1206,"name":"Batteries.RBMap.size_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1206-L1206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.contains_iff_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">contains_iff_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.contains\">contains</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.contains_iff_find?","kind":"theorem","line":1200,"name":"Batteries.RBMap.contains_iff_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1200-L1204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.contains_iff_findEntry?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">contains_iff_findEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.contains\">contains</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.contains_iff_findEntry?","kind":"theorem","line":1197,"name":"Batteries.RBMap.contains_iff_findEntry?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1197-L1198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_some","kind":"theorem","line":1191,"name":"Batteries.RBMap.find?_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1191-L1195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_some","kind":"theorem","line":1188,"name":"Batteries.RBMap.findEntry?_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1188-L1189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.instIsStrictCutByKeyOfTransCmp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instIsStrictCutByKeyOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">(<a href=\"./Batteries/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <span class=\"fn\">f</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">y</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.instIsStrictCutByKeyOfTransCmp","kind":"instance","line":1182,"name":"Batteries.RBMap.instIsStrictCutByKeyOfTransCmp","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1182-L1186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.instIsStrictCut\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">instIsStrictCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"A \"representable cut\" is one generated by `cmp a` for some `a`. This is always a valid cut. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.instIsStrictCut","kind":"instance","line":1176,"name":"Batteries.RBMap.instIsStrictCut","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1176-L1180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_unique\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mem_toList_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList_unique","kind":"theorem","line":1172,"name":"Batteries.RBMap.mem_toList_unique","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1172-L1174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_some_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">find?_some_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.find?_some_mem_toList","kind":"theorem","line":1167,"name":"Batteries.RBMap.find?_some_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1167-L1170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_some_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_some_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_some_mem_toList","kind":"theorem","line":1164,"name":"Batteries.RBMap.findEntry?_some_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1164-L1165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_some_eq_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">findEntry?_some_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.findEntry?\">findEntry?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> → <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.findEntry?_some_eq_eq","kind":"theorem","line":1161,"name":"Batteries.RBMap.findEntry?_some_eq_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1161-L1162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.toList_sorted\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">toList_sorted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">RBNode.cmpLT</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">x1</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">x2</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span></span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.toList_sorted","kind":"theorem","line":1158,"name":"Batteries.RBMap.toList_sorted","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1158-L1159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.toStream_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">toStream_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Stream.html#Std.ToStream.toStream\">Std.toStream</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.toStream_toList","kind":"theorem","line":1155,"name":"Batteries.RBMap.toStream_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1155-L1156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.toStream_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">toStream_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream.toStream\">Std.toStream</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toStream\">toStream</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.toStream_eq","kind":"theorem","line":1153,"name":"Batteries.RBMap.toStream_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1153-L1153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.forIn_eq_forIn_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α✝</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.forIn_eq_forIn_toList","kind":"theorem","line":1150,"name":"Batteries.RBMap.forIn_eq_forIn_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1150-L1151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.forM_eq_forM_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.forM_eq_forM_toList","kind":"theorem","line":1146,"name":"Batteries.RBMap.forM_eq_forM_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1146-L1148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.foldlM_eq_foldlM_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldlM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">a✝</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">a✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">(fun (<span class=\"fn\">r</span> : <span class=\"fn\">a✝</span>) (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.foldlM_eq_foldlM_toList","kind":"theorem","line":1142,"name":"Batteries.RBMap.foldlM_eq_foldlM_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1142-L1144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.foldr_eq_foldr_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) (<span class=\"fn\">r</span> : <span class=\"fn\">α✝</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.foldr_eq_foldr_toList","kind":"theorem","line":1138,"name":"Batteries.RBMap.foldr_eq_foldr_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1138-L1140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.foldl_eq_foldl_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α✝</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">r</span> : <span class=\"fn\">α✝</span>) (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.foldl_eq_foldl_toList","kind":"theorem","line":1134,"name":"Batteries.RBMap.foldl_eq_foldl_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1134-L1136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mem_toList","kind":"theorem","line":1132,"name":"Batteries.RBMap.mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1132-L1132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.single_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">single_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.single\">single</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.single_toList","kind":"theorem","line":1130,"name":"Batteries.RBMap.single_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1130-L1130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.empty_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">empty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.empty_toList","kind":"theorem","line":1129,"name":"Batteries.RBMap.empty_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1129-L1129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.default_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">default_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.default_eq","kind":"theorem","line":1128,"name":"Batteries.RBMap.default_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1128-L1128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.empty_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">empty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.empty\">empty</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.empty_eq","kind":"theorem","line":1127,"name":"Batteries.RBMap.empty_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1127-L1127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mkRBSet_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mkRBSet_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.mkRBMap\">mkRBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.mkRBSet_eq","kind":"theorem","line":1126,"name":"Batteries.RBMap.mkRBSet_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1126-L1126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.val_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">val_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBMap.val_toList","kind":"theorem","line":1124,"name":"Batteries.RBMap.val_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1124-L1124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_lt\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_lt","kind":"theorem","line":1115,"name":"Batteries.RBSet.lowerBound?_lt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1115-L1117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lt_upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lt_upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">z</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">z</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lt_upperBound?","kind":"theorem","line":1111,"name":"Batteries.RBSet.lt_upperBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1111-L1113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_lt\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"A stronger version of `lowerBoundP?_greatest` that holds when the cut is strict. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_lt","kind":"theorem","line":1104,"name":"Batteries.RBSet.lowerBoundP?_lt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1104-L1109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lt_upperBoundP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lt_upperBoundP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"A stronger version of `upperBoundP?_least` that holds when the cut is strict. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lt_upperBoundP?","kind":"theorem","line":1097,"name":"Batteries.RBSet.lt_upperBoundP?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1097-L1102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_lowerBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_iff_lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_lowerBound?","kind":"theorem","line":1094,"name":"Batteries.RBSet.mem_iff_lowerBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1094-L1095"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_iff_upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_upperBound?","kind":"theorem","line":1091,"name":"Batteries.RBSet.mem_iff_upperBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1091-L1092"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.memP_iff_lowerBoundP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">memP_iff_lowerBoundP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.memP_iff_lowerBoundP?","kind":"theorem","line":1088,"name":"Batteries.RBSet.memP_iff_lowerBoundP?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1088-L1089"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.memP_iff_upperBoundP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">memP_iff_upperBoundP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.memP_iff_upperBoundP?","kind":"theorem","line":1085,"name":"Batteries.RBSet.memP_iff_upperBoundP?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1085-L1086"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_greatest\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_greatest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"A statement of the greatest-ness of the result of `lowerBoundP?`. If `x` is the return value of\n`lowerBoundP?` and it is strictly less than the cut, then any other `y > x` in the tree is in fact\nstrictly greater than the cut (so there is no exact match, and nothing closer to the cut).\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_greatest","kind":"theorem","line":1073,"name":"Batteries.RBSet.lowerBoundP?_greatest","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1073-L1083"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_least\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?_least</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"A statement of the least-ness of the result of `upperBoundP?`. If `x` is the return value of\n`upperBoundP?` and it is strictly greater than the cut, then any other `y < x` in the tree is in\nfact strictly less than the cut (so there is no exact match, and nothing closer to the cut).\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_least","kind":"theorem","line":1061,"name":"Batteries.RBSet.upperBoundP?_least","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1061-L1071"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_exists\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_exists","kind":"theorem","line":1058,"name":"Batteries.RBSet.lowerBound?_exists","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1058-L1059"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_exists\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBound?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_exists","kind":"theorem","line":1055,"name":"Batteries.RBSet.upperBound?_exists","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1055-L1056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_exists\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_exists","kind":"theorem","line":1048,"name":"Batteries.RBSet.lowerBoundP?_exists","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1048-L1053"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_exists\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_exists","kind":"theorem","line":1041,"name":"Batteries.RBSet.upperBoundP?_exists","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1041-L1046"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_mem","kind":"theorem","line":1038,"name":"Batteries.RBSet.lowerBound?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1038-L1039"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBound?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_mem","kind":"theorem","line":1035,"name":"Batteries.RBSet.upperBound?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1035-L1036"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_mem","kind":"theorem","line":1032,"name":"Batteries.RBSet.lowerBoundP?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1032-L1033"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_mem","kind":"theorem","line":1029,"name":"Batteries.RBSet.upperBoundP?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1029-L1030"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_mem_toList","kind":"theorem","line":1026,"name":"Batteries.RBSet.lowerBound?_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1026-L1027"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_mem_toList","kind":"theorem","line":1023,"name":"Batteries.RBSet.lowerBoundP?_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1023-L1024"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBound?_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_mem_toList","kind":"theorem","line":1020,"name":"Batteries.RBSet.upperBound?_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1020-L1021"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_mem_toList","kind":"theorem","line":1017,"name":"Batteries.RBSet.upperBoundP?_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1017-L1018"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></div></div>","info":{"doc":"The value `y` returned by `lowerBound? x` is less or equal to `x`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_le","kind":"theorem","line":1013,"name":"Batteries.RBSet.lowerBound?_le","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1013-L1015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></div></div>","info":{"doc":"The value `x` returned by `lowerBoundP?` is less or equal to the `cut`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_le","kind":"theorem","line":1009,"name":"Batteries.RBSet.lowerBoundP?_le","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1009-L1011"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_ge\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBound?_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></div></div>","info":{"doc":"The value `y` returned by `upperBound? x` is greater or equal to `x`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_ge","kind":"theorem","line":1005,"name":"Batteries.RBSet.upperBound?_ge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1005-L1007"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_ge\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></div></div>","info":{"doc":"The value `x` returned by `upperBoundP?` is greater or equal to the `cut`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_ge","kind":"theorem","line":1001,"name":"Batteries.RBSet.upperBoundP?_ge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L1001-L1003"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_eq_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBound?_eq_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBound?\">lowerBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBound?_eq_find?","kind":"theorem","line":998,"name":"Batteries.RBSet.lowerBound?_eq_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L998-L999"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_eq_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBound?_eq_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBound?\">upperBound?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBound?_eq_find?","kind":"theorem","line":995,"name":"Batteries.RBSet.upperBound?_eq_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L995-L996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_eq_findP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">lowerBoundP?_eq_findP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.lowerBoundP?\">lowerBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.lowerBoundP?_eq_findP?","kind":"theorem","line":992,"name":"Batteries.RBSet.lowerBoundP?_eq_findP?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L992-L993"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_eq_findP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">upperBoundP?_eq_findP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.upperBoundP?\">upperBoundP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.upperBoundP?_eq_findP?","kind":"theorem","line":989,"name":"Batteries.RBSet.upperBoundP?_eq_findP?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L989-L990"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">v'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_insert","kind":"theorem","line":986,"name":"Batteries.RBSet.find?_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L986-L987"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_insert","kind":"theorem","line":982,"name":"Batteries.RBSet.findP?_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L982-L984"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_insert_of_ne\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_insert_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v' </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_insert_of_ne","kind":"theorem","line":979,"name":"Batteries.RBSet.find?_insert_of_ne","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L979-L980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_insert_of_ne\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_insert_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_insert_of_ne","kind":"theorem","line":971,"name":"Batteries.RBSet.findP?_insert_of_ne","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L971-L977"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_insert_of_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v' </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_insert_of_eq","kind":"theorem","line":968,"name":"Batteries.RBSet.find?_insert_of_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L968-L969"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_insert_of_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_insert_of_eq","kind":"theorem","line":964,"name":"Batteries.RBSet.findP?_insert_of_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L964-L966"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v₁ </span><span class=\"fn\">v₂</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v₁</span> <span class=\"fn\">v₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v₂</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_congr","kind":"theorem","line":961,"name":"Batteries.RBSet.find?_congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L961-L962"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert","kind":"theorem","line":953,"name":"Batteries.RBSet.mem_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L953-L959"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_insert","kind":"theorem","line":948,"name":"Batteries.RBSet.mem_toList_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L948-L951"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_of_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_of_mem","kind":"theorem","line":943,"name":"Batteries.RBSet.mem_insert_of_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L943-L946"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_of_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_of_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_of_mem_toList","kind":"theorem","line":937,"name":"Batteries.RBSet.mem_insert_of_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L937-L941"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_insert_of_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_insert_of_mem","kind":"theorem","line":932,"name":"Batteries.RBSet.mem_toList_insert_of_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L932-L935"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_of_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_of_eq","kind":"theorem","line":929,"name":"Batteries.RBSet.mem_insert_of_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L929-L930"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_self\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_insert_self","kind":"theorem","line":926,"name":"Batteries.RBSet.mem_insert_self","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L926-L927"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_insert_self\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.insert\">insert</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_insert_self","kind":"theorem","line":923,"name":"Batteries.RBSet.mem_toList_insert_self","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L923-L924"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.size_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.size_eq","kind":"theorem","line":921,"name":"Batteries.RBSet.size_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L921-L921"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.instDecidableMemOfTransCmp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">instDecidableMemOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.instDecidableMemOfTransCmp","kind":"instance","line":918,"name":"Batteries.RBSet.instDecidableMemOfTransCmp","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L918-L919"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.contains_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.contains\">contains</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.contains_iff","kind":"theorem","line":915,"name":"Batteries.RBSet.contains_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L915-L916"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_iff_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_find?","kind":"theorem","line":912,"name":"Batteries.RBSet.mem_iff_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L912-L913"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.memP_iff_findP?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">memP_iff_findP?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.memP_iff_findP?","kind":"theorem","line":909,"name":"Batteries.RBSet.memP_iff_findP?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L909-L910"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some","kind":"theorem","line":906,"name":"Batteries.RBSet.find?_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L906-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">RBNode.IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some","kind":"theorem","line":902,"name":"Batteries.RBSet.findP?_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L902-L904"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_unique\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList_unique","kind":"theorem","line":898,"name":"Batteries.RBSet.mem_toList_unique","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L898-L900"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some_mem","kind":"theorem","line":895,"name":"Batteries.RBSet.find?_some_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L895-L896"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some_memP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_some_memP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some_memP","kind":"theorem","line":892,"name":"Batteries.RBSet.findP?_some_memP","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L892-L893"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some_mem_toList","kind":"theorem","line":889,"name":"Batteries.RBSet.find?_some_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L889-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_some_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some_mem_toList","kind":"theorem","line":886,"name":"Batteries.RBSet.findP?_some_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L886-L887"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some_eq_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">find?_some_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.find?\">find?</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.find?_some_eq_eq","kind":"theorem","line":883,"name":"Batteries.RBSet.find?_some_eq_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L883-L884"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some_eq_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">findP?_some_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.findP?\">findP?</a></span> <span class=\"fn\">cut</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.findP?_some_eq_eq","kind":"theorem","line":880,"name":"Batteries.RBSet.findP?_some_eq_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L880-L881"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.toList_sorted\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toList_sorted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">RBNode.cmpLT</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.toList_sorted","kind":"theorem","line":877,"name":"Batteries.RBSet.toList_sorted","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L877-L878"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.isEmpty_iff_toList_eq_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">isEmpty_iff_toList_eq_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.isEmpty_iff_toList_eq_nil","kind":"theorem","line":874,"name":"Batteries.RBSet.isEmpty_iff_toList_eq_nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L874-L875"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.toStream_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toStream_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Stream.html#Std.ToStream.toStream\">Std.toStream</a> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.toStream_toList","kind":"theorem","line":871,"name":"Batteries.RBSet.toStream_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L871-L872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.toStream_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">toStream_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.ToStream.toStream\">Std.toStream</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toStream\">toStream</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.toStream_eq","kind":"theorem","line":869,"name":"Batteries.RBSet.toStream_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L869-L869"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.forIn_eq_forIn_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α✝</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.forIn_eq_forIn_toList","kind":"theorem","line":866,"name":"Batteries.RBSet.forIn_eq_forIn_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L866-L867"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.forM_eq_forM_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.forM_eq_forM_toList","kind":"theorem","line":863,"name":"Batteries.RBSet.forM_eq_forM_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L863-L864"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.foldlM_eq_foldlM_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldlM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">a✝</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">a✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.foldlM_eq_foldlM_toList","kind":"theorem","line":860,"name":"Batteries.RBSet.foldlM_eq_foldlM_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L860-L861"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.foldr_eq_foldr_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.foldr_eq_foldr_toList","kind":"theorem","line":857,"name":"Batteries.RBSet.foldr_eq_foldr_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L857-L858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.foldl_eq_foldl_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.foldl_eq_foldl_toList","kind":"theorem","line":854,"name":"Batteries.RBSet.foldl_eq_foldl_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L854-L855"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_of_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_of_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_of_mem_toList","kind":"theorem","line":851,"name":"Batteries.RBSet.mem_of_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L851-L852"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_iff_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_iff_mem_toList","kind":"theorem","line":848,"name":"Batteries.RBSet.mem_iff_mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L848-L849"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_congr","kind":"theorem","line":845,"name":"Batteries.RBSet.mem_congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L845-L846"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mem_toList","kind":"theorem","line":843,"name":"Batteries.RBSet.mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L843-L843"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.single_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">single_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.single\">single</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.single_toList","kind":"theorem","line":841,"name":"Batteries.RBSet.single_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L841-L841"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.empty_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">empty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.empty_toList","kind":"theorem","line":840,"name":"Batteries.RBSet.empty_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L840-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.default_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">default_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.default_eq","kind":"theorem","line":839,"name":"Batteries.RBSet.default_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L839-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.empty_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">empty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.empty\">empty</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.empty_eq","kind":"theorem","line":838,"name":"Batteries.RBSet.empty_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L838-L838"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mkRBSet_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mkRBSet_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.mkRBSet\">mkRBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.mkRBSet_eq","kind":"theorem","line":837,"name":"Batteries.RBSet.mkRBSet_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L837-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.val_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">val_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBSet.val_toList","kind":"theorem","line":835,"name":"Batteries.RBSet.val_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L835-L835"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_insert","kind":"theorem","line":806,"name":"Batteries.RBNode.mem_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L806-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_insert_self\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_insert_self","kind":"theorem","line":801,"name":"Batteries.RBNode.find?_insert_self","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L801-L804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.exists_find?_insert_self\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">exists_find?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.exists_find?_insert_self","kind":"theorem","line":796,"name":"Batteries.RBNode.exists_find?_insert_self","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L796-L799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_insert_of_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_insert_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_insert_of_mem","kind":"theorem","line":783,"name":"Batteries.RBNode.mem_insert_of_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L783-L794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_insert_self\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_insert_self","kind":"theorem","line":777,"name":"Batteries.RBNode.mem_insert_self","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L777-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.exists_insert_toList_zoom_node\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">exists_insert_toList_zoom_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c'</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c'</span> <span class=\"fn\">l</span> <span class=\"fn\">v'</span> <span class=\"fn\">r</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">L</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">R</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">R</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.exists_insert_toList_zoom_node","kind":"theorem","line":771,"name":"Batteries.RBNode.exists_insert_toList_zoom_node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L771-L775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.insert_toList_zoom_node\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_toList_zoom_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c'</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c'</span> <span class=\"fn\">l</span> <span class=\"fn\">v'</span> <span class=\"fn\">r</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.insert_toList_zoom_node","kind":"theorem","line":767,"name":"Batteries.RBNode.insert_toList_zoom_node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L767-L769"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.exists_insert_toList_zoom_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">exists_insert_toList_zoom_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil\">nil</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">L</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">R</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">R</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.exists_insert_toList_zoom_nil","kind":"theorem","line":762,"name":"Batteries.RBNode.exists_insert_toList_zoom_nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L762-L765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.insert_toList_zoom_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_toList_zoom_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil\">nil</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">v</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.insert_toList_zoom_nil","kind":"theorem","line":758,"name":"Batteries.RBNode.insert_toList_zoom_nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L758-L760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.insert_toList_zoom\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_toList_zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRoot\">setRoot</a> <span class=\"fn\">v</span> <span class=\"fn\">t'</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.insert_toList_zoom","kind":"theorem","line":753,"name":"Batteries.RBNode.insert_toList_zoom","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L753-L756"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.AllR\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">AllR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Asserts that `p` holds on all elements to the right of the hole. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.AllR","kind":"def","line":745,"name":"Batteries.RBNode.Path.AllR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L745-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.AllL\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">AllL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Asserts that `p` holds on all elements to the left of the hole. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.AllL","kind":"def","line":739,"name":"Batteries.RBNode.Path.AllL","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L739-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.del\">del</a></span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.del\">RBNode.del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span>\n      <span class=\"fn\">(match <span class=\"fn\">t</span> with\n      | <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> =&gt; <span class=\"fn\">c</span>\n      | <span class=\"fn\">x</span> =&gt; <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.del\">del</a></span> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.delRoot\">delRoot</a></span>\n      <span class=\"fn\">(match <span class=\"fn\">t'</span> with\n      | <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> =&gt; <span class=\"fn\">c</span>\n      | <span class=\"fn\">x</span> =&gt; <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_del","kind":"theorem","line":721,"name":"Batteries.RBNode.Path.zoom_del","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L721-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insert\">insert</a></span> <span class=\"fn\">t'</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_insert","kind":"theorem","line":712,"name":"Batteries.RBNode.Path.zoom_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L712-L719"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.ins_eq_fill\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ins_eq_fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\">ins</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.ins_eq_fill","kind":"theorem","line":705,"name":"Batteries.RBNode.Path.ins_eq_fill","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L705-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.insertNew_eq_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insertNew_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil\">nil</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insertNew\">insertNew</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.insert\">RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.insertNew_eq_insert","kind":"theorem","line":701,"name":"Batteries.RBNode.Path.insertNew_eq_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L701-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\">ins</a></span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.ins\">RBNode.ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\">ins</a></span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRoot\">setRoot</a> <span class=\"fn\">v</span> <span class=\"fn\">t'</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_ins","kind":"theorem","line":690,"name":"Batteries.RBNode.Path.zoom_ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L690-L699"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.Ordered.erase\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.erase\">erase</a></span> <span class=\"fn\">t</span>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.Ordered.erase","kind":"theorem","line":685,"name":"Batteries.RBNode.Path.Ordered.erase","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L685-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.Ordered.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span>)</span> <span class=\"fn\">t</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\">OnRoot</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insert\">insert</a></span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span></span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.Ordered.insert","kind":"theorem","line":678,"name":"Batteries.RBNode.Path.Ordered.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L678-L683"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.Balanced.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insert\">insert</a></span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.Balanced.insert","kind":"theorem","line":672,"name":"Batteries.RBNode.Path.Balanced.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L672-L676"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.insert_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insert_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insert\">insert</a></span> <span class=\"fn\">t</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRoot\">setRoot</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.insert_toList","kind":"theorem","line":668,"name":"Batteries.RBNode.Path.insert_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L668-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.insertNew_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">insertNew_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insertNew\">insertNew</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">v</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.insertNew_toList","kind":"theorem","line":665,"name":"Batteries.RBNode.Path.insertNew_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L665-L666"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.ins_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ins_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\">ins</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.ins_toList","kind":"theorem","line":660,"name":"Batteries.RBNode.Path.ins_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L660-L663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.zoom_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">zoom_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.zoom_toList","kind":"theorem","line":657,"name":"Batteries.RBNode.zoom_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L657-L658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.fill_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">fill_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\">withList</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.fill_toList","kind":"theorem","line":654,"name":"Batteries.RBNode.Path.fill_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L654-L655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_zoomed₁\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_zoomed₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\">OnRoot</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α✝</span>) =&gt; <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\">t'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.zoom_zoomed₁","kind":"theorem","line":644,"name":"Batteries.RBNode.Path.zoom_zoomed₁","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L644-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.ordered_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">ordered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listL\">listL</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listR\">listR</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listL\">listL</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listR\">listR</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.ordered_iff","kind":"theorem","line":623,"name":"Batteries.RBNode.Path.ordered_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L623-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.rootOrdered_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">rootOrdered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listL\">listL</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">v</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listR\">listR</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.rootOrdered_iff","kind":"theorem","line":616,"name":"Batteries.RBNode.Path.rootOrdered_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L616-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">withList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Wraps a list of elements with the left and right elements of the path. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.withList","kind":"def","line":613,"name":"Batteries.RBNode.Path.withList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L613-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listR\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">listR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"The list of elements to the right of the hole.\n(This function is intended for specification purposes only.) ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listR","kind":"def","line":606,"name":"Batteries.RBNode.Path.listR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L606-L611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listL\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">listL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"The list of elements to the left of the hole.\n(This function is intended for specification purposes only.) ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Path.listL","kind":"def","line":599,"name":"Batteries.RBNode.Path.listL","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L599-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lt_upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lt_upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"A stronger version of `upperBound?_least` that holds when the cut is strict. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lt_upperBound?","kind":"theorem","line":585,"name":"Batteries.RBNode.Ordered.lt_upperBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L585-L591"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_lt\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"A stronger version of `lowerBound?_greatest` that holds when the cut is strict. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_lt","kind":"theorem","line":574,"name":"Batteries.RBNode.Ordered.lowerBound?_lt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L574-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.memP_iff_lowerBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">memP_iff_lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.memP_iff_lowerBound?","kind":"theorem","line":562,"name":"Batteries.RBNode.Ordered.memP_iff_lowerBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L562-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.memP_iff_upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">memP_iff_upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.memP_iff_upperBound?","kind":"theorem","line":550,"name":"Batteries.RBNode.Ordered.memP_iff_upperBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L550-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_greatest\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_greatest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"A statement of the greatest-ness of the result of `lowerBound?`. If `x` is the return value of\n`lowerBound?` and it is strictly less than the cut, then any other `y > x` in the tree is in fact\nstrictly greater than the cut (so there is no exact match, and nothing closer to the cut).\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_greatest","kind":"theorem","line":540,"name":"Batteries.RBNode.Ordered.lowerBound?_greatest","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L540-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.upperBound?_least\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">upperBound?_least</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xy</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"A statement of the least-ness of the result of `upperBound?`. If `x` is the return value of\n`upperBound?` and it is strictly greater than the cut, then any other `y < x` in the tree is in fact\nstrictly less than the cut (so there is no exact match, and nothing closer to the cut).\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.upperBound?_least","kind":"theorem","line":530,"name":"Batteries.RBNode.Ordered.upperBound?_least","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L530-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_greatest_lb\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_greatest_lb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lb</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">lb</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span>)</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_greatest_lb","kind":"theorem","line":520,"name":"Batteries.RBNode.Ordered.lowerBound?_greatest_lb","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L520-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.upperBound?_least_ub\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">upperBound?_least_ub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ub</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hub</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">ub</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">ub</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.upperBound?_least_ub","kind":"theorem","line":498,"name":"Batteries.RBNode.Ordered.upperBound?_least_ub","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L498-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_exists\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">lowerBound?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.lowerBound?_exists","kind":"theorem","line":492,"name":"Batteries.RBNode.Ordered.lowerBound?_exists","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L492-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.upperBound?_exists\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">upperBound?_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.upperBound?_exists","kind":"theorem","line":477,"name":"Batteries.RBNode.Ordered.upperBound?_exists","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L477-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_of_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_of_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_of_some","kind":"theorem","line":474,"name":"Batteries.RBNode.lowerBound?_of_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L474-L475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_of_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_of_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_of_some","kind":"theorem","line":471,"name":"Batteries.RBNode.upperBound?_of_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L471-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_mem","kind":"theorem","line":468,"name":"Batteries.RBNode.lowerBound?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L468-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_mem_lb\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_mem_lb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lb</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">lb</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_mem_lb","kind":"theorem","line":464,"name":"Batteries.RBNode.lowerBound?_mem_lb","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L464-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_mem","kind":"theorem","line":461,"name":"Batteries.RBNode.upperBound?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L461-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_mem_ub\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_mem_ub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ub</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">ub</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">ub</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_mem_ub","kind":"theorem","line":457,"name":"Batteries.RBNode.upperBound?_mem_ub","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L457-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.lowerBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">lowerBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.lowerBound?","kind":"theorem","line":454,"name":"Batteries.RBNode.All.lowerBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L454-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.lowerBound?_lb\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">lowerBound?_lb</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lb</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">lb</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">RBNode.lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.lowerBound?_lb","kind":"theorem","line":449,"name":"Batteries.RBNode.All.lowerBound?_lb","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L449-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.upperBound?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">upperBound?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">RBNode.upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.upperBound?","kind":"theorem","line":446,"name":"Batteries.RBNode.All.upperBound?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L446-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.upperBound?_ub\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">upperBound?_ub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ub</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">ub</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">RBNode.upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">ub</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All.upperBound?_ub","kind":"theorem","line":436,"name":"Batteries.RBNode.All.upperBound?_ub","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L436-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></div></div>","info":{"doc":"The value `x` returned by `lowerBound?` is less or equal to the `cut`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_le","kind":"theorem","line":432,"name":"Batteries.RBNode.lowerBound?_le","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L432-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_le'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lb</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">lb</span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></div></div>","info":{"doc":"The value `x` returned by `lowerBound?` is less or equal to the `cut`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_le'","kind":"theorem","line":426,"name":"Batteries.RBNode.lowerBound?_le'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L426-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_ge\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></div></div>","info":{"doc":"The value `x` returned by `upperBound?` is greater or equal to the `cut`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_ge","kind":"theorem","line":422,"name":"Batteries.RBNode.upperBound?_ge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L422-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_ge'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_ge'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ub</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ub</span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">ub</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></div></div>","info":{"doc":"The value `x` returned by `upperBound?` is greater or equal to the `cut`. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_ge'","kind":"theorem","line":411,"name":"Batteries.RBNode.upperBound?_ge'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L411-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_eq_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_eq_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lb</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_eq_find?","kind":"theorem","line":406,"name":"Batteries.RBNode.lowerBound?_eq_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L406-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_eq_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_eq_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ub</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">ub</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_eq_find?","kind":"theorem","line":397,"name":"Batteries.RBNode.upperBound?_eq_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L397-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">lowerBound?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lb</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <span class=\"fn\">lb</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cut</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">lb</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.lowerBound?_reverse","kind":"theorem","line":393,"name":"Batteries.RBNode.lowerBound?_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L393-L395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">upperBound?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ub</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.upperBound?\">upperBound?</a> <span class=\"fn\">cut</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <span class=\"fn\">ub</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.lowerBound?\">lowerBound?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cut</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">ub</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.upperBound?_reverse","kind":"theorem","line":388,"name":"Batteries.RBNode.upperBound?_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L388-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.delRoot\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">delRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Auxiliary definition for `zoom_ins`: set the root of the tree to `v`, creating a node if necessary.\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.delRoot","kind":"def","line":377,"name":"Batteries.RBNode.delRoot","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L377-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRoot\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Auxiliary definition for `zoom_ins`: set the root of the tree to `v`, creating a node if necessary.\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRoot","kind":"def","line":370,"name":"Batteries.RBNode.setRoot","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L370-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cut</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>)</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_reverse","kind":"theorem","line":365,"name":"Batteries.RBNode.find?_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L365-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.find?_some\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">find?_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.find?_some","kind":"theorem","line":359,"name":"Batteries.RBNode.Ordered.find?_some","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L359-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.unique\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.unique","kind":"theorem","line":341,"name":"Batteries.RBNode.Ordered.unique","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L341-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.memP_iff_find?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">memP_iff_find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.memP_iff_find?","kind":"theorem","line":317,"name":"Batteries.RBNode.Ordered.memP_iff_find?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L317-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_some_memP\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_some_memP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_some_memP","kind":"theorem","line":314,"name":"Batteries.RBNode.find?_some_memP","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L314-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_some_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_some_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_some_mem","kind":"theorem","line":311,"name":"Batteries.RBNode.find?_some_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L311-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_some_eq_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_some_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.find?_some_eq_eq","kind":"theorem","line":307,"name":"Batteries.RBNode.find?_some_eq_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L307-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Mem_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Mem_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedCmp\">Std.OrientedCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\">Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\">Mem</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Mem_reverse","kind":"theorem","line":301,"name":"Batteries.RBNode.Mem_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L301-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.memP_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">memP_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cut</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>)</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.memP_reverse","kind":"theorem","line":298,"name":"Batteries.RBNode.memP_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Any_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Any_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any\">Any</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any\">Any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Any_reverse","kind":"theorem","line":296,"name":"Batteries.RBNode.Any_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.reverse_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">reverse_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.reverse_size","kind":"theorem","line":294,"name":"Batteries.RBNode.reverse_size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L294-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.size_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.size_eq","kind":"theorem","line":291,"name":"Batteries.RBNode.size_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L291-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balRight_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balRight_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balRight\">balRight</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balRight_toList","kind":"theorem","line":287,"name":"Batteries.RBNode.balRight_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L287-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balLeft_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balLeft_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balLeft\">balLeft</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balLeft_toList","kind":"theorem","line":283,"name":"Batteries.RBNode.balLeft_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L283-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balance2_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance2\">balance2</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balance2_toList","kind":"theorem","line":279,"name":"Batteries.RBNode.balance2_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L279-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balance1_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.balance1\">balance1</a></span> <span class=\"fn\">v</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.balance1_toList","kind":"theorem","line":275,"name":"Batteries.RBNode.balance1_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L275-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRed_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setRed_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setRed\">setRed</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setRed_toList","kind":"theorem","line":272,"name":"Batteries.RBNode.setRed_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L272-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setBlack_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setBlack_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.setBlack\">setBlack</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.setBlack_toList","kind":"theorem","line":269,"name":"Batteries.RBNode.setBlack_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L269-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.le_max?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">le_max?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.le_max?","kind":"theorem","line":265,"name":"Batteries.RBNode.Ordered.le_max?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L265-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.max?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">max?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.max?_mem","kind":"theorem","line":262,"name":"Batteries.RBNode.max?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L262-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.min?_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">min?_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.min?_le","kind":"theorem","line":253,"name":"Batteries.RBNode.Ordered.min?_le","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L253-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.min?_mem\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">min?_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.min?_mem","kind":"theorem","line":248,"name":"Batteries.RBNode.min?_mem","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L248-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.toList_sorted\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">toList_sorted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Ordered.toList_sorted","kind":"theorem","line":245,"name":"Batteries.RBNode.Ordered.toList_sorted","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L245-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.ordered_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">ordered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.ordered_iff","kind":"theorem","line":236,"name":"Batteries.RBNode.ordered_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L236-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.next?_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">next?_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.next?\">next?</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span>.<a href=\"./Batteries/Data/List/Basic.html#List.next?\">next?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.next?_toList","kind":"theorem","line":232,"name":"Batteries.RBNode.Stream.next?_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L232-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toStream_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toStream_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toStream\">toStream</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toStream_toList","kind":"theorem","line":229,"name":"Batteries.RBNode.toStream_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L229-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toStream_toList'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toStream_toList'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toStream\">toStream</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toStream_toList'","kind":"theorem","line":226,"name":"Batteries.RBNode.toStream_toList'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L226-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.forIn_eq_forIn_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α✝</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.forIn_eq_forIn_toList","kind":"theorem","line":219,"name":"Batteries.RBNode.Stream.forIn_eq_forIn_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L219-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.foldl_eq_foldl_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.foldl_eq_foldl_toList","kind":"theorem","line":216,"name":"Batteries.RBNode.Stream.foldl_eq_foldl_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L216-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.foldr_eq_foldr_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.foldr_eq_foldr_toList","kind":"theorem","line":213,"name":"Batteries.RBNode.Stream.foldr_eq_foldr_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L213-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.toList_cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">toList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.cons\">cons</a> <span class=\"fn\">x</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.toList_cons","kind":"theorem","line":209,"name":"Batteries.RBNode.Stream.toList_cons","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L209-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.toList_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.nil\">nil</a>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.toList_nil","kind":"theorem","line":207,"name":"Batteries.RBNode.Stream.toList_nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.foldr_cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Stream</span>.<span class=\"name\">foldr_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream\">RBNode.Stream</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.foldr\">foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Stream.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Stream.foldr_cons","kind":"theorem","line":204,"name":"Batteries.RBNode.Stream.foldr_cons","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L204-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.forIn_eq_forIn_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α✝</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">t</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.forIn_eq_forIn_toList","kind":"theorem","line":193,"name":"Batteries.RBNode.forIn_eq_forIn_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L193-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.forIn_visit_eq_bindList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forIn_visit_eq_bindList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">α✝</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forIn.visit\">forIn.visit</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Control/ForInStep/Basic.html#ForInStep.bindList\">ForInStep.bindList</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">init</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.forIn_visit_eq_bindList","kind":"theorem","line":189,"name":"Batteries.RBNode.forIn_visit_eq_bindList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L189-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldlM_eq_foldlM_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldlM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">a✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">a✝</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">a✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldlM_eq_foldlM_toList","kind":"theorem","line":185,"name":"Batteries.RBNode.foldlM_eq_foldlM_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L185-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.forM_eq_forM_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.forM_eq_forM_toList","kind":"theorem","line":182,"name":"Batteries.RBNode.forM_eq_forM_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L182-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldr_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldl\">foldl</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldr_reverse","kind":"theorem","line":178,"name":"Batteries.RBNode.foldr_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L178-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldl_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldl_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldr\">foldr</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">init</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldl_reverse","kind":"theorem","line":173,"name":"Batteries.RBNode.foldl_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L173-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldl_eq_foldl_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldl_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldl_eq_foldl_toList","kind":"theorem","line":170,"name":"Batteries.RBNode.foldl_eq_foldl_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L170-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldr_eq_foldr_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr_eq_foldr_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldr_eq_foldr_toList","kind":"theorem","line":167,"name":"Batteries.RBNode.foldr_eq_foldr_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L167-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.max?_eq_toList_getLast?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">max?_eq_toList_getLast?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.getLast?\">getLast?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.max?_eq_toList_getLast?","kind":"theorem","line":164,"name":"Batteries.RBNode.max?_eq_toList_getLast?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L164-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.min?_eq_toList_head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">min?_eq_toList_head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.min?_eq_toList_head?","kind":"theorem","line":158,"name":"Batteries.RBNode.min?_eq_toList_head?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L158-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_reverse","kind":"theorem","line":156,"name":"Batteries.RBNode.mem_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_toList","kind":"theorem","line":153,"name":"Batteries.RBNode.mem_toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L153-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toList_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toList_reverse","kind":"theorem","line":150,"name":"Batteries.RBNode.toList_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L150-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toList_node\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toList_node","kind":"theorem","line":147,"name":"Batteries.RBNode.toList_node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L147-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toList_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">toList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil\">nil</a>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.toList_nil","kind":"theorem","line":145,"name":"Batteries.RBNode.toList_nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldr_cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">foldr_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.foldr\">foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.foldr_cons","kind":"theorem","line":139,"name":"Batteries.RBNode.foldr_cons","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L139-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instIsStrictCutFlipOrderingSwap\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instIsStrictCutFlipOrderingSwap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cut</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instIsStrictCutFlipOrderingSwap","kind":"instance","line":132,"name":"Batteries.RBNode.instIsStrictCutFlipOrderingSwap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L132-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instIsStrictCut\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instIsStrictCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"A \"representable cut\" is one generated by `cmp a` for some `a`. This is always a valid cut. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instIsStrictCut","kind":"instance","line":126,"name":"Batteries.RBNode.instIsStrictCut","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L126-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut.exact\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"If `cut = x`, then `cut` and `x` have compare the same with respect to other elements. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut.exact","kind":"theorem","line":124,"name":"Batteries.RBNode.IsStrictCut.exact","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toIsCut</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exact</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} [<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut.mk","kind":"ctor","line":122,"name":"Batteries.RBNode.IsStrictCut.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut.toIsCut\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span>.<span class=\"name\">toIsCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\">IsStrictCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut.toIsCut","kind":"theorem","line":122,"name":"Batteries.RBNode.IsStrictCut.toIsCut","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L122-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsStrictCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">Batteries.RBNode.IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"`IsStrictCut` upgrades the `IsCut` property to ensure that at most one element of the tree\ncan match the cut, and hence `find?` will return the unique such element if one exists.\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsStrictCut","kind":"class","line":118,"name":"Batteries.RBNode.IsStrictCut","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L118-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instIsCutFlipOrderingSwap\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instIsCutFlipOrderingSwap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cut</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instIsCutFlipOrderingSwap","kind":"instance","line":110,"name":"Batteries.RBNode.instIsCutFlipOrderingSwap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L110-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.congr","kind":"theorem","line":99,"name":"Batteries.RBNode.IsCut.congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L99-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.gt_trans\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">gt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.gt_trans","kind":"theorem","line":95,"name":"Batteries.RBNode.IsCut.gt_trans","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.lt_trans\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.lt_trans","kind":"theorem","line":91,"name":"Batteries.RBNode.IsCut.lt_trans","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L91-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.le_gt_trans\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">le_gt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></span></div></div>","info":{"doc":"The set `{x | cut x = .gt}` is upward-closed. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.le_gt_trans","kind":"theorem","line":89,"name":"Batteries.RBNode.IsCut.le_gt_trans","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.le_lt_trans\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">le_lt_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></span></div></div>","info":{"doc":"The set `{x | cut x = .lt}` is downward-closed. ","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.le_lt_trans","kind":"theorem","line":87,"name":"Batteries.RBNode.IsCut.le_lt_trans","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le_lt_trans</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} [<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le_gt_trans</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>} [<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>], <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> → <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\">IsCut</a> <span class=\"fn\">cmp</span> <span class=\"fn\">cut</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut.mk","kind":"ctor","line":85,"name":"Batteries.RBNode.IsCut.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsCut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A cut is like a homomorphism of orderings: it is a monotonic predicate with respect to `cmp`,\nbut it can make things that are distinguished by `cmp` equal.\nThis is sufficient for `find?` to locate an element on which `cut` returns `.eq`,\nbut there may be other elements, not returned by `find?`, on which `cut` also returns `.eq`.\n","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.IsCut","kind":"class","line":79,"name":"Batteries.RBNode.IsCut","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L79-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instDecidableOrderedOfTransCmp\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">instDecidableOrderedOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.instDecidableOrderedOfTransCmp","kind":"instance","line":76,"name":"Batteries.RBNode.instDecidableOrderedOfTransCmp","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.isOrdered_iff\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isOrdered_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isOrdered\">isOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.isOrdered_iff","kind":"theorem","line":73,"name":"Batteries.RBNode.isOrdered_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.isOrdered_iff'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">isOrdered_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.isOrdered\">isOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">L</span> <span class=\"fn\">R</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">R</span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">t</span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">L</span> → <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">R</span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpLT\">cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.isOrdered_iff'","kind":"theorem","line":51,"name":"Batteries.RBNode.isOrdered_iff'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L51-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">Std.TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\">Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\">Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_congr","kind":"theorem","line":47,"name":"Batteries.RBNode.mem_congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L47-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_def\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Mem\">Mem</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α✝</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_def","kind":"theorem","line":45,"name":"Batteries.RBNode.mem_def","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.memP_def\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">memP_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.MemP\">MemP</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α✝</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cut</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.memP_def","kind":"theorem","line":43,"name":"Batteries.RBNode.memP_def","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Any_def\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Any_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Any\">Any</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.Any_def","kind":"theorem","line":40,"name":"Batteries.RBNode.Any_def","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All_def\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.All_def","kind":"theorem","line":37,"name":"Batteries.RBNode.All_def","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_node\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.node\">node</a> <span class=\"fn\">c</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_node","kind":"theorem","line":34,"name":"Batteries.RBNode.mem_node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.nil\">nil</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.mem_nil","kind":"theorem","line":33,"name":"Batteries.RBNode.mem_nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.max?_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">max?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?\">max?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?\">min?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.max?_reverse","kind":"theorem","line":30,"name":"Batteries.RBNode.max?_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.min?_reverse\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">min?_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.reverse\">reverse</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.min?\">min?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.max?\">max?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Lemmas.html#Batteries.RBNode.min?_reverse","kind":"theorem","line":24,"name":"Batteries.RBNode.min?_reverse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Lemmas.lean#L24-L28"}}],"imports":["Init","Batteries.Tactic.Basic","Batteries.Data.RBMap.Alter","Batteries.Data.List.Lemmas"],"instances":[{"className":"Decidable","name":"Batteries.RBNode.instDecidableOrderedOfTransCmp","typeNames":["Batteries.RBNode.Ordered"]},{"className":"Batteries.RBNode.IsCut","name":"Batteries.RBNode.instIsCutFlipOrderingSwap","typeNames":["flip"]},{"className":"Batteries.RBNode.IsStrictCut","name":"Batteries.RBNode.instIsStrictCut","typeNames":[]},{"className":"Batteries.RBNode.IsStrictCut","name":"Batteries.RBNode.instIsStrictCutFlipOrderingSwap","typeNames":["flip"]},{"className":"Decidable","name":"Batteries.RBSet.instDecidableMemOfTransCmp","typeNames":["Membership.mem"]},{"className":"Batteries.RBNode.IsStrictCut","name":"Batteries.RBMap.instIsStrictCut","typeNames":[]},{"className":"Batteries.RBNode.IsStrictCut","name":"Batteries.RBMap.instIsStrictCutByKeyOfTransCmp","typeNames":["Ordering.byKey"]}],"name":"Batteries.Data.RBMap.Lemmas"}