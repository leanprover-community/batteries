{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.toMonadStateOf\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">toMonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Creates a `MonadStateOf` instance from a reference cell.\n\nThis allows programs written against the [state monad](https://lean-lang.org/doc/reference/4.25.0-rc2/find/?domain=Verso.Genre.Manual.section&name=state-monads) API to\nbe executed using a mutable reference cell to track the state.\n","docLink":"./Init/System/ST.html#ST.Ref.toMonadStateOf","kind":"def","line":172,"name":"ST.Ref.toMonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L172-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.modifyGet\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Atomically modifies a mutable reference cell by replacing its contents with the result of a function\ncall that simultaneously computes a value to return.\n","docLink":"./Init/System/ST.html#ST.Ref.modifyGet","kind":"def","line":166,"name":"ST.Ref.modifyGet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L166-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.modify\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Atomically modifies a mutable reference cell by replacing its contents with the result of a function\ncall.\n","docLink":"./Init/System/ST.html#ST.Ref.modify","kind":"def","line":161,"name":"ST.Ref.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L161-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.ptrEq\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">ptrEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r1 </span><span class=\"fn\">r2</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether two reference cells are in fact aliases for the same cell.\n\nEven if they contain the same value, two references allocated by different executions of `IO.mkRef`\nor `ST.mkRef` are distinct. Modifying one has no effect on the other. Likewise, a single reference\ncell may be aliased, and modifications to one alias also modify the other.\n","docLink":"./Init/System/ST.html#ST.Ref.ptrEq","kind":"def","line":153,"name":"ST.Ref.ptrEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L153-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.take\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Reads the value of a mutable reference cell, removing it.\n\nThis causes subsequent attempts to read from or take the reference cell to block until a new value\nis written using `ST.Ref.set`.\n","docLink":"./Init/System/ST.html#ST.Ref.take","kind":"def","line":146,"name":"ST.Ref.take","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L146-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.swap\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Atomically swaps the value of a mutable reference cell with another value. The reference cell's\noriginal value is returned.\n","docLink":"./Init/System/ST.html#ST.Ref.swap","kind":"def","line":141,"name":"ST.Ref.swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L141-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.set\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Replaces the value of a mutable reference.\n","docLink":"./Init/System/ST.html#ST.Ref.set","kind":"def","line":137,"name":"ST.Ref.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L137-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.get\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Reads the value of a mutable reference.\n","docLink":"./Init/System/ST.html#ST.Ref.get","kind":"def","line":133,"name":"ST.Ref.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L133-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.mkRef\"><span class=\"name\">ST</span>.<span class=\"name\">mkRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a new mutable reference that contains the provided value `a`.\n","docLink":"./Init/System/ST.html#ST.mkRef","kind":"def","line":129,"name":"ST.mkRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L129-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.modifyGet\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.modifyGet","kind":"def","line":117,"name":"ST.Prim.Ref.modifyGet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L117-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.modify\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.modify","kind":"def","line":112,"name":"ST.Prim.Ref.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L112-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.modifyGetUnsafe\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">modifyGetUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.modifyGetUnsafe","kind":"def","line":106,"name":"ST.Prim.Ref.modifyGetUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L106-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.modifyUnsafe\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">modifyUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.modifyUnsafe","kind":"def","line":102,"name":"ST.Prim.Ref.modifyUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L102-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.ptrEq\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">ptrEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r1 </span><span class=\"fn\">r2</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.ptrEq","kind":"opaque","line":99,"name":"ST.Prim.Ref.ptrEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L99-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.take\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.take","kind":"opaque","line":97,"name":"ST.Prim.Ref.take","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.swap\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.swap","kind":"opaque","line":95,"name":"ST.Prim.Ref.swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L95-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.set\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.set","kind":"opaque","line":93,"name":"ST.Prim.Ref.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L93-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.Ref.get\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">Ref</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.Ref.get","kind":"opaque","line":91,"name":"ST.Prim.Ref.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L91-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Prim.mkRef\"><span class=\"name\">ST</span>.<span class=\"name\">Prim</span>.<span class=\"name\">mkRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Prim.mkRef","kind":"opaque","line":89,"name":"ST.Prim.mkRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L89-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.instNonemptyRef\"><span class=\"name\">ST</span>.<span class=\"name\">instNonemptyRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.instNonemptyRef","kind":"instance","line":79,"name":"ST.instNonemptyRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L79-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.h\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">h</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Ref.h","kind":"theorem","line":77,"name":"ST.Ref.h","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.ref\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST.RefPointed\">RefPointed</a>.<a href=\"./Init/Prelude.html#NonemptyType.type\">type</a></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Ref.ref","kind":"def","line":76,"name":"ST.Ref.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref.mk\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <span class=\"fn\"><a href=\"./Init/System/ST.html#ST.RefPointed\">RefPointed</a>.<a href=\"./Init/Prelude.html#NonemptyType.type\">type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#ST.Ref\">Ref</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#ST.Ref.mk","kind":"ctor","line":75,"name":"ST.Ref.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.Ref\"><span class=\"name\">ST</span>.<span class=\"name\">Ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Mutable reference cells that contain values of type `α`. These cells can read from and mutated in\nthe `ST σ` monad.\n","docLink":"./Init/System/ST.html#ST.Ref","kind":"structure","line":71,"name":"ST.Ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L71-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST.RefPointed\"><span class=\"name\">ST</span>.<span class=\"name\">RefPointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>","info":{"doc":"References ","docLink":"./Init/System/ST.html#ST.RefPointed","kind":"opaque","line":68,"name":"ST.RefPointed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L68-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instMonadLiftSTEST\"><span class=\"name\">instMonadLiftSTEST</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Init/System/ST.html#EST\">EST</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instMonadLiftSTEST","kind":"instance","line":60,"name":"instMonadLiftSTEST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L60-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#runST\"><span class=\"name\">runST</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\"><a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Runs an `ST` computation, in which mutable state via `ST.Ref` is the only side effect.\n","docLink":"./Init/System/ST.html#runST","kind":"def","line":51,"name":"runST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L51-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#runEST\"><span class=\"name\">runEST</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\"><a href=\"./Init/System/ST.html#EST\">EST</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs an `EST` computation, in which mutable state and exceptions are the only side effects.\n","docLink":"./Init/System/ST.html#runEST","kind":"def","line":42,"name":"runEST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L42-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instSTWorldEST\"><span class=\"name\">instSTWorldEST</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Init/System/ST.html#EST\">EST</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instSTWorldEST","kind":"instance","line":40,"name":"instSTWorldEST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instSTWorldOfMonadLift\"><span class=\"name\">instSTWorldOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instSTWorldOfMonadLift","kind":"instance","line":39,"name":"instSTWorldOfMonadLift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#STWorld.mk\"><span class=\"name\">STWorld</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/ST.html#STWorld\">STWorld</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#STWorld.mk","kind":"ctor","line":37,"name":"STWorld.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#STWorld\"><span class=\"name\">STWorld</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An auxiliary class used to infer the “state” of `EST` and `ST` monads.\n","docLink":"./Init/System/ST.html#STWorld","kind":"class","line":34,"name":"STWorld","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instMonadST\"><span class=\"name\">instMonadST</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instMonadST","kind":"instance","line":32,"name":"instMonadST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instInhabitedEST\"><span class=\"name\">instInhabitedEST</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#EST\">EST</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instInhabitedEST","kind":"instance","line":31,"name":"instInhabitedEST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instMonadExceptOfEST\"><span class=\"name\">instMonadExceptOfEST</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Init/System/ST.html#EST\">EST</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instMonadExceptOfEST","kind":"instance","line":30,"name":"instMonadExceptOfEST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#instMonadEST\"><span class=\"name\">instMonadEST</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#EST\">EST</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/ST.html#instMonadEST","kind":"instance","line":29,"name":"instMonadEST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#ST\"><span class=\"name\">ST</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"A restricted version of `IO` in which mutable state is the only side effect.\n\nIt is possible to run `ST` computations in a non-monadic context using `runST`.\n","docLink":"./Init/System/ST.html#ST","kind":"def","line":22,"name":"ST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L22-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/ST.html#EST\"><span class=\"name\">EST</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"A restricted version of `IO` in which mutable state and exceptions are the only side effects.\n\nIt is possible to run `EST` computations in a non-monadic context using `runEST`.\n","docLink":"./Init/System/ST.html#EST","kind":"def","line":15,"name":"EST","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/ST.lean#L15-L20"}}],"imports":["Init.Classical","Init.Control.EState","Init.Control.Reader"],"instances":[{"className":"Monad","name":"instMonadEST","typeNames":["EST"]},{"className":"MonadExceptOf","name":"instMonadExceptOfEST","typeNames":["EST"]},{"className":"Inhabited","name":"instInhabitedEST","typeNames":["EST"]},{"className":"Monad","name":"instMonadST","typeNames":["ST"]},{"className":"STWorld","name":"instSTWorldOfMonadLift","typeNames":[]},{"className":"STWorld","name":"instSTWorldEST","typeNames":["EST"]},{"className":"MonadLift","name":"instMonadLiftSTEST","typeNames":["ST","EST"]},{"className":"Nonempty","name":"ST.instNonemptyRef","typeNames":["ST.Ref"]}],"name":"Init.System.ST"}