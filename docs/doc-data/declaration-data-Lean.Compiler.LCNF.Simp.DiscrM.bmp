{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpCtorDiscrCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?","kind":"def","line":109,"name":"Lean.Compiler.LCNF.Simp.simpCtorDiscrCore?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L109-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withDiscrCtor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorFields</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Execute `x` with the information that `discr = ctorName ctorFields`.\nWe use this information to simplify nested cases on the same discriminant.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtor","kind":"def","line":106,"name":"Lean.Compiler.LCNF.Simp.withDiscrCtor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">withDiscrCtorImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorFields</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Execute `x` with the information that `discr = ctorName ctorFields`.\nWe use this information to simplify nested cases on the same discriminant.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.withDiscrCtorImp","kind":"def","line":84,"name":"Lean.Compiler.LCNF.Simp.withDiscrCtorImp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L84-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.getIndInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">getIndInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>))</span></span></div></div>","info":{"doc":"If `type` is an inductive datatype, return its universe levels and parameters.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.getIndInfo?","kind":"def","line":71,"name":"Lean.Compiler.LCNF.Simp.getIndInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L71-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtorName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">findCtorName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtorName?","kind":"def","line":67,"name":"Lean.Compiler.LCNF.Simp.findCtorName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">findCtor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a>)</span></span></div></div>","info":{"doc":"If `fvarId` is a constructor application, returns constructor information.\nRemark: we use the map `discrCtorMap`.\nRemark: We use this method when simplifying projections and cases-constructor.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.findCtor?","kind":"def","line":52,"name":"Lean.Compiler.LCNF.Simp.findCtor?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L52-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Helper monad for tracking mappings from discriminant to constructor applications and back.\nThe combinator `withDiscrCtor` should be used when visiting `cases` alternatives.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM","kind":"def","line":46,"name":"Lean.Compiler.LCNF.Simp.DiscrM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L46-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.ctorDiscrMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span>.<span class=\"name\">ctorDiscrMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.PersistentExprMap\">PersistentExprMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"A mapping from constructor application to discriminant it is equal to in the current context.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.ctorDiscrMap","kind":"def","line":44,"name":"Lean.Compiler.LCNF.Simp.DiscrM.Context.ctorDiscrMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.discrCtorMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span>.<span class=\"name\">discrCtorMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a></span></div></div>","info":{"doc":"A mapping from discriminant to constructor application it is equal to in the current context.\n","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.discrCtorMap","kind":"def","line":40,"name":"Lean.Compiler.LCNF.Simp.DiscrM.Context.discrCtorMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrCtorMap</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorDiscrMap</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.PersistentExprMap\">PersistentExprMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context.mk","kind":"ctor","line":36,"name":"Lean.Compiler.LCNF.Simp.DiscrM.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DiscrM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM.Context","kind":"structure","line":36,"name":"Lean.Compiler.LCNF.Simp.DiscrM.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L36-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">getNumFields</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumFields","kind":"def","line":31,"name":"Lean.Compiler.LCNF.Simp.CtorInfo.getNumFields","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L31-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">getNumParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getNumParams","kind":"def","line":27,"name":"Lean.Compiler.LCNF.Simp.CtorInfo.getNumParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L27-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">getName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.getName","kind":"def","line":22,"name":"Lean.Compiler.LCNF.Simp.CtorInfo.getName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L22-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.natVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">natVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a></div></div>","info":{"doc":"Natural numbers are morally constructor applications ","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.natVal","kind":"ctor","line":19,"name":"Lean.Compiler.LCNF.Simp.CtorInfo.natVal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L19-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\">CtorInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo.ctor","kind":"ctor","line":18,"name":"Lean.Compiler.LCNF.Simp.CtorInfo.ctor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">CtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.CtorInfo","kind":"inductive","line":17,"name":"Lean.Compiler.LCNF.Simp.CtorInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/DiscrM.lean#L17-L20"}}],"imports":["Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Simp.Basic"],"instances":[],"name":"Lean.Compiler.LCNF.Simp.DiscrM"}