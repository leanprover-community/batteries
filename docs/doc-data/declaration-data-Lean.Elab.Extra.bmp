{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabDefaultOrNonempty\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabDefaultOrNonempty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabDefaultOrNonempty","kind":"def","line":568,"name":"Lean.Elab.Term.Op.elabDefaultOrNonempty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L568-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelNoProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRelNoProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelNoProp","kind":"def","line":566,"name":"Lean.Elab.Term.Op.elabBinRelNoProp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L566-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRel","kind":"def","line":564,"name":"Lean.Elab.Term.Op.elabBinRel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L564-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRelCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">noProp</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Elaboration functions for `binrel%` and `binrel_no_prop%` notations.\nWe use the infrastructure for `binop%` to make sure we propagate information between the left and right hand sides\nof a binary relation.\n\n- `binrel% R x y` elaborates `R x y` using the `binop%/...` expression trees in both `x` and `y`.\n  It is similar to how `binop% R x y` elaborates but with a significant difference:\n  it does not use the expected type when computing the types of the operands.\n- `binrel_no_prop% R x y` elaborates `R x y` like `binrel% R x y`, but if the resulting type for `x` and `y`\n  is `Prop` they are coerced to `Bool`.\n  This is used for relations such as `==` which do not support `Prop`, but we still want\n  to be able to write `(5 > 2) == (2 > 1)` for example.\n","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore","kind":"def","line":484,"name":"Lean.Elab.Term.Op.elabBinRelCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L484-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabUnOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabUnOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabUnOp","kind":"def","line":482,"name":"Lean.Elab.Term.Op.elabUnOp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L482-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabRightact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabRightact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabRightact","kind":"def","line":481,"name":"Lean.Elab.Term.Op.elabRightact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L481-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabLeftact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabLeftact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabLeftact","kind":"def","line":480,"name":"Lean.Elab.Term.Op.elabLeftact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L480-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOpLazy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinOpLazy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOpLazy","kind":"def","line":479,"name":"Lean.Elab.Term.Op.elabBinOpLazy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L479-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOp","kind":"def","line":478,"name":"Lean.Elab.Term.Op.elabBinOp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L478-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabOp","kind":"def","line":475,"name":"Lean.Elab.Term.Op.elabOp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L475-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabForIn'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'","kind":"def","line":54,"name":"Lean.Elab.Term.elabForIn'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L54-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabForIn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn","kind":"def","line":30,"name":"Lean.Elab.Term.elabForIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Extra.lean#L30-L52"}}],"imports":["Lean.Elab.App","Lean.Elab.BuiltinNotation"],"instances":[],"name":"Lean.Elab.Extra"}