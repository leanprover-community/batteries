{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.check'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">check'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.check'","kind":"def","line":560,"name":"Lean.Meta.Grind.Arith.CommRing.check'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L560-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/CheckResult.html#Lean.Meta.Grind.CheckResult\">CheckResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.check","kind":"def","line":546,"name":"Lean.Meta.Grind.Arith.CommRing.check","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L546-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.checkRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">checkRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/CheckResult.html#Lean.Meta.Grind.CheckResult\">CheckResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.checkRing","kind":"def","line":531,"name":"Lean.Meta.Grind.Arith.CommRing.checkRing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L531-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PropagateEqMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PropagateEqMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PropagateEqMap","kind":"def","line":483,"name":"Lean.Meta.Grind.Arith.CommRing.PropagateEqMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L483-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.processNewDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">processNewDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.processNewDiseq","kind":"def","line":458,"name":"Lean.Meta.Grind.Arith.CommRing.processNewDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L458-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.processNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">processNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.processNewEq","kind":"def","line":348,"name":"Lean.Meta.Grind.Arith.CommRing.processNewEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L348-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.addNewDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">addNewDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.addNewDiseq","kind":"def","line":341,"name":"Lean.Meta.Grind.Arith.CommRing.addNewDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L341-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.saveDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">saveDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.saveDiseq","kind":"def","line":337,"name":"Lean.Meta.Grind.Arith.CommRing.saveDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L337-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.simplify\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">simplify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.simplify","kind":"def","line":332,"name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.simplify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L332-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.checkConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">checkConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `c.d.p` is the constant polynomial. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.checkConstant","kind":"def","line":323,"name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.checkConstant","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L323-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.addNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">addNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.addNewEq","kind":"def","line":315,"name":"Lean.Meta.Grind.Arith.CommRing.addNewEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L315-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToBasis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">addToBasis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToBasis","kind":"def","line":310,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToBasis","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L310-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.withCheckingNumEq0\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">withCheckingNumEq0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.withCheckingNumEq0","kind":"def","line":304,"name":"Lean.Meta.Grind.Arith.CommRing.withCheckingNumEq0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L304-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToBasisAfterSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">addToBasisAfterSimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToBasisAfterSimp","kind":"def","line":289,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToBasisAfterSimp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L289-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyBasis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplifyBasis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyBasis","kind":"def","line":268,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyBasis","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L268-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toMonic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">toMonic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"Tries to convert the leading monomial into a monic one.\n\nIt exploits the fact that given a polynomial with leading coefficient `k`,\nif the ring has a nonzero characteristic `p` and `gcd k p = 1`, then\n`k` has an inverse.\n\nIt also handles the easy case where `k` is `-1`.\n\nRemark: if the ring implements the class `NoNatZeroDivisors`, then\nthe coefficients are divided by the gcd of all coefficients.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toMonic","kind":"def","line":237,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.toMonic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L237-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.superposeWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">superposeWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.superposeWith","kind":"def","line":227,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.superposeWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L227-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToQueue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">addToQueue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToQueue","kind":"def","line":222,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.addToQueue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L222-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.addToBasisCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">addToBasisCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.addToBasisCore","kind":"def","line":215,"name":"Lean.Meta.Grind.Arith.CommRing.addToBasisCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L215-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyAndCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplifyAndCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span></div></div>","info":{"doc":"Simplifies and checks whether the resulting constraint is trivial (i.e., `0 = 0`),\nor inconsistent (i.e., `k = 0` where `k % c != 0` for a comm-ring with characteristic `c`),\nand returns `none`. Otherwise, returns the simplified constraint.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyAndCheck","kind":"def","line":195,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyAndCheck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L195-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.checkConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">checkConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `c.p` is the constant polynomial. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.checkConstant","kind":"def","line":172,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.checkConstant","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L172-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplify\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"Simplify the given equation constraint using the current basis. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplify","kind":"def","line":160,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L160-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyUsingNumEq0\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplifyUsingNumEq0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyUsingNumEq0","kind":"def","line":155,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyUsingNumEq0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L155-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWithExhaustively\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplifyWithExhaustively</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"Simplifies `c₁` using `c₂` exhaustively. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWithExhaustively","kind":"opaque","line":150,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWithExhaustively","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L150-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplifyWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"Simplifies `c₁` using `c₂`. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWith","kind":"def","line":145,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L145-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWithCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">simplifyWithCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span></div></div>","info":{"doc":"Simplifies `c₁` using `c₂`. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWithCore","kind":"def","line":134,"name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.simplifyWithCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L134-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplify\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">simplify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a></span></div></div>","info":{"doc":"Simplified `d.p` using the current basis, and returns the extended polynomial derivation. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplify","kind":"def","line":122,"name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L122-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplifyNumEq0\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">simplifyNumEq0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplifyNumEq0","kind":"def","line":117,"name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplifyNumEq0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L117-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplifyWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">simplifyWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a></span></div></div>","info":{"doc":"Simplifies `d.p` using `c`, and returns an extended polynomial derivation. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplifyWith","kind":"def","line":110,"name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.simplifyWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L110-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Grind.CommRing.Poly.findSimp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">findSimp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">Meta.Grind.Arith.CommRing.RingM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">Meta.Grind.Arith.CommRing.EqCnstr</a>)</span></span></div></div>","info":{"doc":"Returns `some c`, where `c` is an equation from the basis whose leading monomial divides some\nmonomial in `p`.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Grind.CommRing.Poly.findSimp?","kind":"def","line":98,"name":"Lean.Grind.CommRing.Poly.findSimp?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L98-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Grind.CommRing.Mon.findSimp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">findSimp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">Meta.Grind.Arith.CommRing.RingM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">Meta.Grind.Arith.CommRing.EqCnstr</a>)</span></span></div></div>","info":{"doc":"Returns `some c`, where `c` is an equation from the basis whose leading monomial divides `m`.\nRemark: if the current ring does not satisfy the property\n```\n∀ (k : Nat) (a : α), k ≠ 0 → OfNat.ofNat (α := α) k * a = 0 → a = 0\n```\nthen the leading coefficient of the equation must also divide `k`\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Grind.CommRing.Mon.findSimp?","kind":"def","line":81,"name":"Lean.Grind.CommRing.Mon.findSimp?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L81-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.mkEqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">mkEqCnstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstrProof\">EqCnstrProof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingM.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.html#Lean.Meta.Grind.Arith.CommRing.mkEqCnstr","kind":"def","line":47,"name":"Lean.Meta.Grind.Arith.CommRing.mkEqCnstr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/CommRing/EqCnstr.lean#L47-L51"}}],"imports":["Lean.Meta.Tactic.Grind.Arith.CommRing.RingId","Lean.Meta.Tactic.Grind.ProveEq","Lean.Meta.Tactic.Grind.Diseq","Lean.Meta.Tactic.Grind.Arith.Util","Lean.Meta.Tactic.Grind.Arith.CommRing.Proof","Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.CommRing.Inv","Lean.Meta.Tactic.Grind.Arith.CommRing.Reify","Lean.Meta.Tactic.Grind.Arith.CommRing.SafePoly"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Arith.CommRing.EqCnstr"}